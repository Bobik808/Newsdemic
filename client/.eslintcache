[{"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\index.tsx":"1","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\reportWebVitals.ts":"2","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\App.tsx":"3","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\types\\connections.ts":"4","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\socket-io-client\\socket-io-client.tsx":"5","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\CardHand\\CardHand.tsx":"6","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\store.tsx":"7","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\sourceDeck\\sourceDeck.tsx":"8","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\MarkersStore\\MarkersStore.tsx":"9","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\ChaosMeter_Grommet\\ChaosMeter_Grommet.tsx":"10","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\PlayerPrompt\\PlayerPrompt.tsx":"11","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\ChaosMeter\\ChaosMeter.tsx":"12","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\SourceParent\\SourceParent.tsx":"13","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\MisinformationDeck\\misinformationDeck.tsx":"14","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\OtherPlayer\\OtherPlayer.tsx":"15","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\gameStateActions.ts":"16","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\playerReducer.ts":"17","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\gameStateReducer.ts":"18","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\allGamesReducer.ts":"19","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\helpers\\iconExporter.ts":"20","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\helpers\\utils.ts":"21","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\SourceCard\\SourceCard.tsx":"22","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\Source\\Source.tsx":"23","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\reduxTypes.ts":"24","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\logic\\dummyState.REDO_CO.ts":"25","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\logic\\actions.MW.ts":"26","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\logic\\actions.newState_CO.ts":"27","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\logic\\connections.ts":"28","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\CureDeck\\CureDeck.tsx":"29","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\SpreadLevel\\SpreadLevel.tsx":"30","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\PlayerPawn\\PlayerPawn.tsx":"31"},{"size":500,"mtime":1612774295908,"results":"32","hashOfConfig":"33"},{"size":425,"mtime":1612257005249,"results":"34","hashOfConfig":"33"},{"size":2492,"mtime":1612802982643,"results":"35","hashOfConfig":"33"},{"size":2978,"mtime":1612543802069,"results":"36","hashOfConfig":"33"},{"size":1710,"mtime":1612625032782,"results":"37","hashOfConfig":"33"},{"size":1142,"mtime":1612780309367,"results":"38","hashOfConfig":"33"},{"size":706,"mtime":1612774295912,"results":"39","hashOfConfig":"33"},{"size":349,"mtime":1612782842860,"results":"40","hashOfConfig":"33"},{"size":731,"mtime":1612778297986,"results":"41","hashOfConfig":"33"},{"size":1171,"mtime":1612778319696,"results":"42","hashOfConfig":"33"},{"size":662,"mtime":1612774295895,"results":"43","hashOfConfig":"33"},{"size":1389,"mtime":1612777687410,"results":"44","hashOfConfig":"33"},{"size":874,"mtime":1612802923685,"results":"45","hashOfConfig":"33"},{"size":377,"mtime":1612778562574,"results":"46","hashOfConfig":"33"},{"size":2734,"mtime":1612798422678,"results":"47","hashOfConfig":"33"},{"size":2511,"mtime":1612625032779,"results":"48","hashOfConfig":"33"},{"size":700,"mtime":1612622171091,"results":"49","hashOfConfig":"33"},{"size":1992,"mtime":1612802923689,"results":"50","hashOfConfig":"33"},{"size":350,"mtime":1612625032778,"results":"51","hashOfConfig":"33"},{"size":4397,"mtime":1612622171087,"results":"52","hashOfConfig":"33"},{"size":310,"mtime":1612543802067,"results":"53","hashOfConfig":"33"},{"size":1758,"mtime":1612774295900,"results":"54","hashOfConfig":"33"},{"size":3825,"mtime":1612803575613,"results":"55","hashOfConfig":"33"},{"size":2608,"mtime":1612625032780,"results":"56","hashOfConfig":"33"},{"size":3793,"mtime":1612810679093,"results":"57","hashOfConfig":"33"},{"size":10205,"mtime":1612815135458,"results":"58","hashOfConfig":"33"},{"size":13267,"mtime":1612812855543,"results":"59","hashOfConfig":"33"},{"size":2972,"mtime":1612539674765,"results":"60","hashOfConfig":"33"},{"size":1150,"mtime":1612784195483,"results":"61","hashOfConfig":"33"},{"size":859,"mtime":1612785159418,"results":"62","hashOfConfig":"33"},{"size":674,"mtime":1612803080025,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"hmvcsi",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"66"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"66"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"66"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"66"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"66"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"66"},"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\index.tsx",[],["134","135"],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\reportWebVitals.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\App.tsx",["136","137","138","139","140","141","142","143","144","145","146","147","148"],"import React, { useEffect, useState } from 'react';\nimport { Box, Button, Grommet, Card, CardHeader, CardBody, CardFooter, Meter } from 'grommet';\n// import { Notification } from 'grommet-icons';\nimport './App.scss';\nimport './socket-io-client/socket-io-client';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/gameState/store';\nimport { getGames } from './socket-io-client/socket-io-client';\nimport { CureDeck } from './components/CureDeck/CureDeck';\nimport { getIcon } from './helpers/iconExporter'\nimport { SourceCard } from './components/SourceCard/SourceCard';\nimport { CardHand } from './components/CardHand/CardHand';\nimport { SourceDeck } from './components/sourceDeck/sourceDeck'\nimport { MarkersStore } from './components/MarkersStore/MarkersStore'\nimport { MisinformationDeck } from './components/MisinformationDeck/misinformationDeck'\nimport { ChaosMeter } from './components/ChaosMeter/ChaosMeter'\nimport { SpreadLevel } from './components/SpreadLevel/SpreadLevel';\nimport { PlayerPrompt } from './components/PlayerPrompt/PlayerPrompt';\nimport { SourceParent } from './components/SourceParent/SourceParent';\nimport { ChaosMeterGrommet } from './components/ChaosMeter_Grommet/ChaosMeter_Grommet'\nimport { OtherPlayer } from './components/OtherPlayer/OtherPlayer';\nimport { connections } from './types/connections'\n\n\nfunction App () {\n\n  const [showSidebar, setShowSidebar] = useState(false);\n\n  useEffect(() => {\n    getGames();\n  }, []);\n\n  const fakePlayer1 = {\n    name: 'Konstantin',\n     id: '5678',\n    cards: [\n      connections[Math.floor(Math.random() * (connections.length - 1))],\n    ],\n    cardHandFull: false,\n    isCurrent: false,\n    pawnColor: 'fuchsia',\n    currentSource: 'University'\n  }\n\n  return (\n    // <Grommet theme={grommet} full>\n    <Provider store={store}>\n      <div className=\"app-outer-wrapper\">\n        <div className=\"app-container\">\n          {/* <Map /> */}\n          {/* <GameBoard /> */}\n            <SourceParent />\n          <div className=\"sidebar-left\">\n            <CardHand />\n            <PlayerPrompt />\n          </div>\n          <div className=\"board-container\">\n          <CureDeck /> \n          <SpreadLevel/> \n            <ChaosMeter />\n            <SourceDeck />\n            <MisinformationDeck />\n            <MarkersStore />\n            <ChaosMeterGrommet />\n            <OtherPlayer />\n          </div>\n        </div>\n      </div>\n    </Provider>\n    // {/* </Grommet> */ }\n  );\n}\n\nexport default App;\n","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\types\\connections.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\socket-io-client\\socket-io-client.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\CardHand\\CardHand.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\store.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\sourceDeck\\sourceDeck.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\MarkersStore\\MarkersStore.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\ChaosMeter_Grommet\\ChaosMeter_Grommet.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\PlayerPrompt\\PlayerPrompt.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\ChaosMeter\\ChaosMeter.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\SourceParent\\SourceParent.tsx",["149","150","151"],"import React from 'react'\nimport PropTypes from 'prop-types'\nimport { initDummyState } from '../../logic/dummyState.REDO_CO';\nimport { SourceComponent  } from '../Source/Source'\nimport {Source} from '../../types/gameStateTypes'\nimport { render } from '@testing-library/react';\nimport {useSelector} from 'react-redux'\nimport {RootState} from '../../redux/gameState/store'\n\nexport const SourceParent = () => {\n  // const sources = initDummyState.sources;\n  const sources = useSelector((state: RootState) => state.gameStateReducer.sources);\n\n\n  // use the \n\n  const renderSources = (srcArr: Source[]) => {\n    \n    return srcArr.map(source => {\n      //! GET source.markers_community etc and plug into props of SourceComponent\n      return <SourceComponent source={source} key={source.name}/>\n    })\n  }\n\n  return (\n    <div>\n      {renderSources(sources)}\n    </div>\n  )\n}\n\n\n\n","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\MisinformationDeck\\misinformationDeck.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\OtherPlayer\\OtherPlayer.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\gameStateActions.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\playerReducer.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\gameStateReducer.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\allGamesReducer.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\helpers\\iconExporter.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\helpers\\utils.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\SourceCard\\SourceCard.tsx",["152","153","154"],"import React from 'react';\nimport { getIcon } from '../../helpers/iconExporter'\nimport { toCamelCase, toPascalCase } from '../../helpers/utils'\nimport './SourceCard.css'\nimport { shareCardEvent } from '../../logic/event.listeners';\nimport { ShareCardProps } from '../../redux/gameState/reduxTypes'\n\n//! issue with \"Card\" interface beings used for both Source/connection & \"Viral\" cards, which have name type \"null\" - possible change types/logic later\nexport interface SourceCardProps {\n  name: string,    //! NULL TO BE REMOVED\n  category: string, //! NULL TO BE REMOVED\n  canShare: any[]\n}\n// DON'T NEED ===> canlogon can go to the place if you have that card\n// canShare: a button that appears on each card when you are on the same location as another player\n// canchare: Player[]\n\n\nexport const SourceCard: React.FC<SourceCardProps> = ({ name, category, canShare }: SourceCardProps) => { // SVGIcon\n\n  const currentState = {}\n\n  const SVGIcon = getIcon(toCamelCase(name) + 'Icon');\n\n  const handleShareClick = (id: string) => {\n    //DISPATCH ACTION\n    console.log(`SHARING CARD ${name} WITH ${id}`);\n  }\n\n\n  const renderShareButtons = (shareWith: { name: string, id: string }[]) => {\n    return shareWith.map(player => <button onClick={() => handleShareClick(player.id)\n\n      // shareCardEvent({\n      //   oldState: currentState,\n      //   currentPlayerID: ,\n      //   recipient: player.id,\n      //   sharedCard: name\n      // })\n    }>{player.name}</button>)\n  }\n  return (\n    <div className={`source-card-container ${category}`} >\n      <SVGIcon name={name} className=\"card-icon\" />\n      <div className=\"name-container\" >\n        <p className=\"title\">{toPascalCase(name)}</p>\n        {renderShareButtons(canShare)}\n      </div>\n    </div>\n  )\n}","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\Source\\Source.tsx",["155","156"],"import React from 'react';\nimport {Player, Source} from '../../types/objects.REDO'\nimport { getIcon } from '../../helpers/iconExporter'\nimport { toCamelCase } from '../../helpers/utils';\nimport './Source.css'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { clearMisinfoAction } from '../../redux/gameState/gameStateActions';\nimport { RootState } from '../../redux/gameState/store';\nimport { PlayerPawn } from '../PlayerPawn/PlayerPawn';\n\n\nexport interface SourceProps {\n  source: Source;\n}\n\n\nexport const SourceComponent: React.FC<SourceProps> = ({ source}: SourceProps) => { // SVGIcon\n  const dispatch = useDispatch()\n  const gamestate = useSelector((state: RootState) => state.gameStateReducer)\n  const currentPlayer = useSelector((state: RootState) => state.playerStateReducer)\n  console.log('gamestate from source : ', gamestate)\n  console.log('currentPlayer from source : ' , currentPlayer)\n  \n  let { name, markers_community, markers_social, markers_relations,\n    canMove, canLogOff, canLogOn, canClearCommunity,\n    canClearRelations, canClearSocial, canShare, canDebunk } = source;\n\n  console.log('THIS IS THE NAME::::::: ', toCamelCase(name));\n  const SVGIconSource: React.FunctionComponent<React.SVGProps<SVGSVGElement>>\n    = getIcon(toCamelCase(name) + 'Icon');\n\n\n  const getMarker = (category: string, num: number , canBeCleared:boolean) => {\n    //add a different icon if canBeCleared\n    if (num > 0 && canBeCleared) {\n      //get the clearable icon\n      const ClearableIcon = getIcon(toCamelCase(`marker ${category} ${num}`))\n      //wrap it with  button to make it clickable\n      return (<button onClick={()=>clearMisinformationbyOne(category)}><ClearableIcon/></button>)\n      \n    }\n    if (num > 0) {\n      console.log(toCamelCase(`marker ${category} ${num}`))\n      const Icon = getIcon(toCamelCase(`marker ${category} ${num}`));\n      return <Icon   />;\n    }\n  }\n\n\n\n\n  const clearMisinformationbyOne = (misinfoType:string) => {\n    //throws a logic error !!!\n    dispatch(clearMisinfoAction({oldState:gamestate , currentPlayerID: currentPlayer.id, misinfoType, location:source.name }))\n  }\n\n\n  const getPlayerPawns = (players:Player[]) => {\n\n    return players.map(player => <PlayerPawn player={player.name} colour={player.pawnColor }/>)\n\n\n  }\n\n  const Iconnn = getIcon('markerRelations3');\n\n  //adding the right class names\n   let canMoveClassName = canMove ? 'can-move-to' : ''\n  let canLogOffClassName = canLogOff ? 'can-log-off' : ''\n  let canLogOnClassName = canLogOn ? 'can-log-on' : ''\n\n  return (\n    <div className={`source-container ${name} ${canLogOffClassName} ${canLogOnClassName} ${canMoveClassName}`} >\n      <SVGIconSource />\n      <div className=\"markersContainer\">\n        {getMarker('community', markers_community , canClearCommunity)} \n        {getMarker('social', markers_social, canClearSocial)}\n        {getMarker('relations', markers_relations, canClearRelations)}\n      </div>\n      {canShare.length > 0 ?  getPlayerPawns(canShare):null}\n    </div>\n  )\n}\n\n// highlighted to show canMove, canLogon (single source which), canLogoff\n\n// 3 markers & can clear?\n\n// pawn <-- use otherPlayer, (canShare in otherPlayer)\n\n// canMove: white transparent overlay (AWAY LOCATION)\n// canLogon: blue border? (AWAY LOCATION)\n// canLogoff: green border? (AWAY LOCATION)\n// canLogon and Logoff: split blue/green border (AWAY LOCATION)\n\n// with social marker: red dot on corner w/ number 1,2,3 (BOTH CURRENT & AWAY)\n//    canClear that marker: slow flashing (CURRENT LOCATION)\n// with community marker: yellow triangle on corner w/ number 1,2,3 (BOTH CURRENT & AWAY)\n//    canClear that marker: slow flashing (CURRENT LOCATION)\n// with relations marker: blue square on corner w/ number 1,2,3 (BOTH CURRENT & AWAY)\n//    canClear that marker: slow flashing (CURRENT LOCATION)","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\reduxTypes.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\logic\\dummyState.REDO_CO.ts",["157","158","159","160","161"],"// this initial state presumes 2 players, 3 locations (one for each color), 3 connection and 3 misinfo cards, and 1 viral card.\n\n import { Gamestate, Card, Source, Player, Misinformation, Connection } from '../types/gameStateTypes'\n\nexport const initDummyState: Gamestate = {\n  sources: [\n    {\n      name: 'university',\n      misinfoType: 'community',\n      markers_community: 1,\n      markers_social: 1,\n      markers_relations: 1,\n      canMove: true,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: true,\n      canClearSocial: true,\n      canClearRelations: true,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'hair salon',\n      misinfoType: 'social',\n      markers_community: 3,\n      markers_social: 3,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: true,\n      canClearSocial: true,\n      canClearRelations: true,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'pub',\n      misinfoType: 'relations',\n      markers_community: 3,\n      markers_social: 3,\n      markers_relations: 3,\n      canMove: true,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: true,\n      canClearSocial: true,\n      canClearRelations: true,\n      canShare: [ {\n        name: 'Player 1',\n        id: '1234',\n        cards: [],\n        cardHandOverflow: false,\n        isCurrent: true,\n        pawnColor: 'green',\n        currentSource: 'pub',\n        room:'1',\n      },{\n        name: 'Player 2',\n        id: '5678',\n        cards: [],\n        cardHandOverflow: false,\n        isCurrent: true,\n        pawnColor: 'purple',\n        currentSource: 'pub',\n        room:'1',\n  \n      },],\n      canDebunk: [],\n    },\n  ],\n  players: [\n    {\n      name: 'Player 1',\n      id: '1234',\n      cards: [],\n      cardHandOverflow: false,\n      isCurrent: true,\n      pawnColor: 'green',\n      currentSource: 'pub',\n      room:'1',\n    },\n    {\n      name: 'Player 2',\n      id: '5678',\n      cards: [{\n        cardType: 'connection',\n        sourceName: 'Instagram',\n        misinfoType: 'yellow',\n      },],\n      cardHandOverflow: false,\n      isCurrent: true,\n      pawnColor: 'purple',\n      currentSource: 'pub',\n      room:'1',\n\n    },\n  ],\n  spreadLevel: 1,\n  chaosMeter: 0,\n  misinformation: {\n    community: {\n      name: 'Misinfo Type 1',\n      debunked: false,\n      markersLeft: 16,\n    },\n    social: {\n      name: 'Misinfo Type 2',\n      debunked: false,\n      markersLeft: 16,\n    },\n    relations: {\n      name: 'Misinfo Type 3',\n      debunked: false,\n      markersLeft: 16,\n    },\n  },\n  connectionDeck: [\n    {\n      cardType: 'connection',\n      sourceName: 'University',\n      misinfoType: 'blue',\n    },\n    {\n      cardType: 'connection',\n      sourceName: 'Gym',\n      misinfoType: 'red',\n    },\n    {\n      cardType: 'connection',\n      sourceName: 'Instagram',\n      misinfoType: 'yellow',\n    },\n    {\n      cardType: 'viral',\n    },\n  ],\n  misinformationDeckActive: [\n    {\n      cardType: 'misinformation',\n      sourceName: 'University',\n      misinfoType: 'blue',\n    },\n    {\n      cardType: 'misinformation',\n      sourceName: 'Gym',\n      misinfoType: 'red',\n    },\n    {\n      cardType: 'misinformation',\n      sourceName: 'Instagram',\n      misinfoType: 'yellow',\n    },\n    {\n      cardType: 'misinformation',\n      sourceName: 'Instagram',\n      misinfoType: 'yellow',\n    },\n    {\n      cardType: 'misinformation',\n      sourceName: 'Instagram',\n      misinfoType: 'yellow',\n    },\n    {\n      cardType: 'misinformation',\n      sourceName: 'Instagram',\n      misinfoType: 'yellow',\n    },\n  ],\n  misinformationDeckPassive: [],\n  turnMovesLeft: 4,\n  dealHistory: 0,\n  gameWon: false,\n  gameLost: false,\n  received: false,\n}","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\logic\\actions.MW.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\logic\\actions.newState_CO.ts",["162","163","164","165"],"import { Gamestate, Card,ViralCard, Source, Player, Misinformation } from '../types/gameStateTypes'\nimport { didWin, viral as playViralCard, dealMisinfoCard,dealConnectionCard } from './actions.MW'\nimport { connections as sources } from './connections'\nimport {viralCheck} from './actions.MW'\nimport { MisinformationDeck } from '../components/MisinformationDeck/misinformationDeck';\n\n\n//* START THE GAME\n//? called when start button pressed, after game initialised and player order set\n\nexport function startGame(oldState: Gamestate) {\n  const currentPlayerID: Player['id'] = oldState.players[0].id;\n  return updatePossibleActions(oldState, currentPlayerID);\n}\n\n//* ACTIONS\n\nexport function moveAction(oldState: Gamestate, currentPlayerID: Player['id'], location: Source['name']): Gamestate {\n  const newState: Gamestate =\n  {\n    ...oldState,\n    players: oldState.players\n      .map((player) => player.id === currentPlayerID ?\n        { ...player, currentSource: location } :\n        player\n      ),\n    turnMovesLeft: oldState.turnMovesLeft - 1,\n  };\n  console.log('player moved to', location);\n  console.log('there are', newState.turnMovesLeft, 'moves left')\n  return nextMoveChecker(newState, currentPlayerID);\n}\n\n\nexport function clearMisinfo(oldState: Gamestate, currentPlayerID: Player['id'], misinfoType: Misinformation['name'], location: Source['name']): Gamestate {\n  const sourceIndex: number = oldState.sources.map((source) => source.name).indexOf(location);\n  console.log('old state in clearmisinfo', oldState)\n  let noOfMarkers: number = 1;\n  if (oldState.misinformation[misinfoType].debunked) {\n    noOfMarkers = oldState.sources[sourceIndex][`markers_${misinfoType}`]\n  };\n  const newState: Gamestate =\n  {\n    ...oldState,\n    sources: oldState.sources\n      .map((source) => source.name === location ?\n        { ...source, [`markers_${misinfoType}`]: source[`markers_${misinfoType}`] - noOfMarkers } :\n        source\n      ), \n    misinformation: {\n      ...oldState.misinformation,\n      [misinfoType]: {\n        ...oldState.misinformation[misinfoType],\n        markersLeft: oldState.misinformation[misinfoType].markersLeft - noOfMarkers\n      }\n    },\n    turnMovesLeft: oldState.turnMovesLeft - 1,\n  };\n  console.log('player cleared', noOfMarkers, misinfoType);\n  console.log('there are', newState.turnMovesLeft, 'moves left')\n  console.log('new state in clearmisinfo', newState)\n  //switch it back to return nextMoveChecker(newState, currentPlayerID); unless u wanna see the world burn\n\n  // return newState\n  return nextMoveChecker(newState, currentPlayerID);\n}\n\n\nexport function shareCard(oldState: Gamestate, currentPlayerID: Player['id'], recipient: Player['id'], sharedCard: Card['sourceName']): Gamestate {\n  \n  const playerIndex = oldState.players\n    .map((player) => player.id)\n    .indexOf(currentPlayerID);\n  const cardMisinfoValue = oldState.players[playerIndex].cards\n    .filter((card) => card.sourceName === sharedCard)[0].misinfoType;\n  \n  \n  const newState: Gamestate =\n  {\n    ...oldState,\n    players: oldState.players\n      .map((player) => player.id === currentPlayerID ?\n        {\n          ...player,\n          cards: player.cards.filter((card) => card.sourceName !== sharedCard)\n        } :\n        player.id === recipient ?\n          {\n            ...player,\n            cards: [...player.cards, {\n              cardType: 'connection',\n              sourceName: sharedCard,\n              misinfoType: cardMisinfoValue\n            }],\n          } :\n          player\n      ),\n    turnMovesLeft: oldState.turnMovesLeft - 1,\n  };\n  console.log('player shared', sharedCard, 'with player', recipient);\n  console.log('there are', newState.turnMovesLeft, 'moves left')\n  return nextMoveChecker(newState, currentPlayerID);\n}\n\n\nexport function logOnOff(oldState: Gamestate, currentPlayerID: Player['id'], location: Source['name'], usedCard: Card['sourceName']): Gamestate {\n  const newState: Gamestate =\n  {\n    ...oldState,\n    players: oldState.players\n      .map((player) => player.id === currentPlayerID ?\n        {\n          ...player,\n          currentSource: location,\n          cards: player.cards.filter((card) => card.sourceName !== usedCard)\n        } :\n        player\n      ),\n    turnMovesLeft: oldState.turnMovesLeft - 1,\n  };\n  console.log('player flew to', location, 'using the', usedCard, 'card');\n  console.log('there are', newState.turnMovesLeft, 'moves left')\n  return nextMoveChecker(newState, currentPlayerID);\n}\n\n\nexport function debunkMisinfo(oldState: Gamestate, currentPlayerID: Player['id'], usedCards: Card['sourceName'][], misinfoType: Misinformation['name']): Gamestate {\n  const newState: Gamestate =\n  {\n    ...oldState,\n    players: oldState.players\n      .map((player) => player.id === currentPlayerID ?\n        {\n          ...player,\n          cards: player.cards.filter((card) => !usedCards.includes(card.sourceName))\n        } :\n        player\n      ),\n    misinformation: {\n      ...oldState.misinformation,\n      [misinfoType]: {\n        ...oldState.misinformation[misinfoType],\n        debunked: true,\n      }\n    },\n    turnMovesLeft: oldState.turnMovesLeft - 1,\n  };\n  if (didWin(newState)) {\n    console.log('congratulations, you debunked all the misinformation and won')\n    return {\n      ...newState,\n      gameWon: true,\n    }\n  } else {\n    console.log('player debunked', misinfoType);\n    console.log('there are', newState.turnMovesLeft, 'moves left')\n    return nextMoveChecker(newState, currentPlayerID)\n  }\n}\n\n\n//* TURN\n\nexport function updatePossibleActions(oldState: Gamestate, currentPlayerID: Player['id']): Gamestate {\n  //* settup\n  const playerIndex: number = oldState.players.map((player) => player.id).indexOf(currentPlayerID);\n  const location: Player['currentSource'] = oldState.players[playerIndex].currentSource;\n  const sourceIndex: number = oldState.sources.map((source) => source.name).indexOf(location);\n  //* move check\n  console.log('location from updatePossible', location)\n  const adjacents: string[] = sources.filter((source) => source.name === location)[0].connections;\n  //* clear checks\n  const clearCommunityMisinfo: boolean = oldState.sources[sourceIndex].markers_community > 0;\n  const clearSocialMisinfo: boolean = oldState.sources[sourceIndex].markers_social > 0;\n  const clearRelationsMisinfo: boolean = oldState.sources[sourceIndex].markers_relations > 0;\n  //* share checks\n  // check if cards in hand\n  let possibleShares: Player[] = [];\n  if (oldState.players[playerIndex].cards.length > 0) {\n    // check if another player is there\n    const otherPlayers: Player[] = oldState\n      .players\n      .filter((player) => player.id !== currentPlayerID)\n      .filter((otherPlayer) => otherPlayer.currentSource === location);\n    // check players have space in their hand\n    possibleShares = otherPlayers\n      .filter((player) => player.cards.length < 6)\n  }\n  //* logoff checks\n  // check hand contains current location card\n  const logoffPossible: boolean = oldState.players[playerIndex].cards\n    .filter((card) => card.sourceName === location)\n    .length > 0;\n  //* logon check\n  // check hand contains other location card\n  const logonPossible: Card['sourceName'][] = oldState.players[playerIndex].cards\n    .map((card) => card.sourceName)\n    .filter((name) => name !== location);\n  //* debunk checks\n  // check if we are at home (debunk 1/2)\n  const atHome: boolean = location === 'crazy dave';\n  // check hand contains 4 of any misinfo type/area (debunk 2/2)\n  const debunkable: Misinformation['name'][] = []\n  if (atHome) {\n    if (\n      oldState.players[playerIndex].cards\n        .filter((card) => card.misinfoType === 'community')\n        .length >= 4) {\n      debunkable.push('community')\n    };\n    if (\n      oldState.players[playerIndex].cards\n        .filter((card) => card.misinfoType === 'social')\n        .length >= 4) {\n      debunkable.push('social')\n    };\n    if (\n      oldState.players[playerIndex].cards\n        .filter((card) => card.misinfoType === 'relations')\n        .length >= 4) {\n      debunkable.push('relations')\n    };\n  };\n  //* UPDATE ENTIRE STATE WITH ALL ABOVE CHANGES\n  const newState: Gamestate =\n  {\n    ...oldState,\n    sources: oldState.sources\n      .map((source) => source.name === location ?\n        {\n          ...source,\n          canMove: false,\n          canLogOn: false,\n          canLogOff: false,\n          canClearCommunity: clearCommunityMisinfo,\n          canClearSocial: clearSocialMisinfo,\n          canClearRelations: clearRelationsMisinfo,\n          canShare: possibleShares,\n          canDebunk: debunkable,\n        } :\n        {\n          ...source,\n          canMove: adjacents.includes(source.name),\n          canLogOn: logonPossible.includes(source.name),\n          canLogOff: logoffPossible,\n          canClearCommunity: false,\n          canClearSocial: false,\n          canClearRelations: false,\n          canShare: [],\n          canDebunk: [],\n        }\n      ),\n  };\n  return newState;\n}\n\n\nexport function boardActions(oldState: Gamestate, currentPlayerID: Player['id'], noOfCards: number): Gamestate {\n  // deal connection cards\n  const playerIndex = oldState.players\n    .map((player) => player.id)\n    .indexOf(currentPlayerID);\n  let cardsLeft = noOfCards;\n  \n  let newState: Gamestate = oldState;\n  while (cardsLeft > 0) {\n    newState = dealConnectionCard(oldState);\n    if (newState.players[playerIndex].cards.length > 6) {\n      console.log('your hand is full, you need to discard a card');\n      return {\n        ...newState,\n        players: newState.players\n          .map((player) => player.id === currentPlayerID ?\n            { ...player, cardHandOverflow: true } :\n            player\n          ),\n        dealHistory: cardsLeft - 1,\n      } // exits function here\n    }\n    cardsLeft--;\n  }\n  //? do we need to put breaks here, and how, for the front end to update or show when a card has been dealt?\n  // check spread marker for weight\n  // deal misinfo cards\n  let misinfoCardNo = [2, 2, 3, 4][newState.spreadLevel];\n  while (misinfoCardNo > 0) {\n    newState = dealMisinfoCard(newState, 1, false)!\n    misinfoCardNo--\n  }\n  //change current player turn\n  //? anything else needs resetting?\n  return nextTurn(newState, currentPlayerID)\n}\n\n//* HELPERS\n\nexport function nextTurn(oldState: Gamestate, currentPlayerID: Player['id']): Gamestate {\n  const playerIndex: number = oldState.players.map((player) => player.id).indexOf(currentPlayerID);\n  const nextPlayerIndex: number = playerIndex === oldState.players.length - 1 ?\n    0 :\n    playerIndex + 1;\n  const newState: Gamestate =\n  {\n    ...oldState,\n    players: oldState.players\n      .map((player, index) => index === playerIndex ?\n        { ...player, isCurrent: false } :\n        index === nextPlayerIndex ?\n          { ...player, isCurrent: true } :\n          player\n      ),\n    // reset number of moves\n    turnMovesLeft: 4,\n  };\n  console.log('next players turn!')\n  return updatePossibleActions(newState, newState.players[nextPlayerIndex].id)\n}\n\n\n// export function dealConnectionCard(oldState: Gamestate, currentPlayerID: Player['id']): Gamestate {\n//   //* if no cards left then game is lost\n//   if (oldState.connectionDeck.length === 0) {\n//     console.log('no more connections... you lost!');\n//     return {\n//       ...oldState,\n//       gameLost: true\n//     }\n//   }\n//   const newCard: Card|ViralCard = oldState.connectionDeck[0]\n//   console.log('NEWCARD' , newCard)\n//   if (viralCheck(newCard)) {\n//     //? does viral function remove card? should it be returned? should it also break for game checks?\n//     console.log('you drew a viral card!');\n//     return playViralCard(oldState)\n//   }\n//   else {\n//     const newState: Gamestate =\n//     {\n//       ...oldState,\n//       players: oldState.players\n//         .map((player) => player.id === currentPlayerID ?\n//           {\n//             ...player,\n//             cards: [...player.cards, newCard],\n//           } :\n//           player\n//         ),\n//       connectionDeck: oldState.connectionDeck.slice(1)\n//     };\n//     console.log('player was dealt a', newCard, 'connection card');\n//     return newState;\n//   }\n// }\n\n\nexport function nextMoveChecker(oldState: Gamestate, currentPlayerID: Player['id']): Gamestate {\n  if (oldState.turnMovesLeft > 0) {\n    return updatePossibleActions(oldState, currentPlayerID)\n  } else {\n    //? move onto 'board actions' part of turn\n    return boardActions(oldState, currentPlayerID, 2)\n  }\n}\n\n\n// called when player has chosen to discard card from hand, when cardHandOverflow === true\nexport function discardCard(oldState: Gamestate, currentPlayerID: Player['id'], discardedCard: Card['sourceName']): Gamestate {\n  const newState: Gamestate =\n  {\n    ...oldState,\n    players: oldState.players\n      .map((player) => player.id === currentPlayerID ?\n        {\n          ...player,\n          cards: player.cards.filter((card) => card.sourceName !== discardedCard),\n          cardHandOverflow: false,\n        } :\n        player\n      ),\n  };\n  //? calling boardActions with newState.dealHistory will decrement the amount of connection cards to be dealt, allowing the function to continue where it left off\n  return boardActions(newState, currentPlayerID, newState.dealHistory)\n}","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\logic\\connections.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\CureDeck\\CureDeck.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\SpreadLevel\\SpreadLevel.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\PlayerPawn\\PlayerPawn.tsx",["166","167","168","169"],"// import React from 'react';\nimport React from 'react';\n// also exported from '@storybook/react' if you can deal with breaking changes in 6.1\nimport { Story, Meta } from '@storybook/react/types-6-0';\nimport './PlayerPawn.css';\nimport { withDesign } from 'storybook-addon-designs';\nimport { useSelector } from 'react-redux';\n// import {RootState} from '../../redux/gameState/store'\n\nexport interface PlayerPawnProps {\n  player: string;\n  colour: string;\n}\n\nexport const PlayerPawn: React.FC<PlayerPawnProps> = ({\n  player,\n  colour,\n}: PlayerPawnProps) => {\n  return (\n    <div className='container'>\n      <div className={`player_pawn ${colour}`}></div>\n    </div>\n  );\n};\n",{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","severity":1,"message":"175","line":2,"column":10,"nodeType":"176","messageId":"177","endLine":2,"endColumn":13},{"ruleId":"174","severity":1,"message":"178","line":2,"column":15,"nodeType":"176","messageId":"177","endLine":2,"endColumn":21},{"ruleId":"174","severity":1,"message":"179","line":2,"column":23,"nodeType":"176","messageId":"177","endLine":2,"endColumn":30},{"ruleId":"174","severity":1,"message":"180","line":2,"column":32,"nodeType":"176","messageId":"177","endLine":2,"endColumn":36},{"ruleId":"174","severity":1,"message":"181","line":2,"column":38,"nodeType":"176","messageId":"177","endLine":2,"endColumn":48},{"ruleId":"174","severity":1,"message":"182","line":2,"column":50,"nodeType":"176","messageId":"177","endLine":2,"endColumn":58},{"ruleId":"174","severity":1,"message":"183","line":2,"column":60,"nodeType":"176","messageId":"177","endLine":2,"endColumn":70},{"ruleId":"174","severity":1,"message":"184","line":2,"column":72,"nodeType":"176","messageId":"177","endLine":2,"endColumn":77},{"ruleId":"174","severity":1,"message":"185","line":10,"column":10,"nodeType":"176","messageId":"177","endLine":10,"endColumn":17},{"ruleId":"174","severity":1,"message":"186","line":11,"column":10,"nodeType":"176","messageId":"177","endLine":11,"endColumn":20},{"ruleId":"174","severity":1,"message":"187","line":27,"column":10,"nodeType":"176","messageId":"177","endLine":27,"endColumn":21},{"ruleId":"174","severity":1,"message":"188","line":27,"column":23,"nodeType":"176","messageId":"177","endLine":27,"endColumn":37},{"ruleId":"174","severity":1,"message":"189","line":33,"column":9,"nodeType":"176","messageId":"177","endLine":33,"endColumn":20},{"ruleId":"174","severity":1,"message":"190","line":2,"column":8,"nodeType":"176","messageId":"177","endLine":2,"endColumn":17},{"ruleId":"174","severity":1,"message":"191","line":3,"column":10,"nodeType":"176","messageId":"177","endLine":3,"endColumn":24},{"ruleId":"174","severity":1,"message":"192","line":6,"column":10,"nodeType":"176","messageId":"177","endLine":6,"endColumn":16},{"ruleId":"174","severity":1,"message":"193","line":5,"column":10,"nodeType":"176","messageId":"177","endLine":5,"endColumn":24},{"ruleId":"174","severity":1,"message":"194","line":6,"column":10,"nodeType":"176","messageId":"177","endLine":6,"endColumn":24},{"ruleId":"174","severity":1,"message":"195","line":21,"column":9,"nodeType":"176","messageId":"177","endLine":21,"endColumn":21},{"ruleId":"174","severity":1,"message":"196","line":26,"column":50,"nodeType":"176","messageId":"177","endLine":26,"endColumn":59},{"ruleId":"174","severity":1,"message":"197","line":65,"column":9,"nodeType":"176","messageId":"177","endLine":65,"endColumn":15},{"ruleId":"174","severity":1,"message":"180","line":3,"column":22,"nodeType":"176","messageId":"177","endLine":3,"endColumn":26},{"ruleId":"174","severity":1,"message":"198","line":3,"column":28,"nodeType":"176","messageId":"177","endLine":3,"endColumn":34},{"ruleId":"174","severity":1,"message":"199","line":3,"column":36,"nodeType":"176","messageId":"177","endLine":3,"endColumn":42},{"ruleId":"174","severity":1,"message":"200","line":3,"column":44,"nodeType":"176","messageId":"177","endLine":3,"endColumn":58},{"ruleId":"174","severity":1,"message":"201","line":3,"column":60,"nodeType":"176","messageId":"177","endLine":3,"endColumn":70},{"ruleId":"174","severity":1,"message":"202","line":1,"column":26,"nodeType":"176","messageId":"177","endLine":1,"endColumn":35},{"ruleId":"174","severity":1,"message":"203","line":2,"column":27,"nodeType":"176","messageId":"177","endLine":2,"endColumn":40},{"ruleId":"174","severity":1,"message":"204","line":4,"column":9,"nodeType":"176","messageId":"177","endLine":4,"endColumn":19},{"ruleId":"174","severity":1,"message":"205","line":5,"column":10,"nodeType":"176","messageId":"177","endLine":5,"endColumn":28},{"ruleId":"174","severity":1,"message":"206","line":4,"column":10,"nodeType":"176","messageId":"177","endLine":4,"endColumn":15},{"ruleId":"174","severity":1,"message":"207","line":4,"column":17,"nodeType":"176","messageId":"177","endLine":4,"endColumn":21},{"ruleId":"174","severity":1,"message":"208","line":6,"column":10,"nodeType":"176","messageId":"177","endLine":6,"endColumn":20},{"ruleId":"174","severity":1,"message":"209","line":7,"column":10,"nodeType":"176","messageId":"177","endLine":7,"endColumn":21},"no-native-reassign",["210"],"no-negated-in-lhs",["211"],"@typescript-eslint/no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Grommet' is defined but never used.","'Card' is defined but never used.","'CardHeader' is defined but never used.","'CardBody' is defined but never used.","'CardFooter' is defined but never used.","'Meter' is defined but never used.","'getIcon' is defined but never used.","'SourceCard' is defined but never used.","'showSidebar' is assigned a value but never used.","'setShowSidebar' is assigned a value but never used.","'fakePlayer1' is assigned a value but never used.","'PropTypes' is defined but never used.","'initDummyState' is defined but never used.","'render' is defined but never used.","'shareCardEvent' is defined but never used.","'ShareCardProps' is defined but never used.","'currentState' is assigned a value but never used.","'canDebunk' is assigned a value but never used.","'Iconnn' is assigned a value but never used.","'Source' is defined but never used.","'Player' is defined but never used.","'Misinformation' is defined but never used.","'Connection' is defined but never used.","'ViralCard' is defined but never used.","'playViralCard' is defined but never used.","'viralCheck' is defined but never used.","'MisinformationDeck' is defined but never used.","'Story' is defined but never used.","'Meta' is defined but never used.","'withDesign' is defined but never used.","'useSelector' is defined but never used.","no-global-assign","no-unsafe-negation"]