
[{"D:\\thesis\\Viral\\Viral\\client\\src\\index.tsx":"1","D:\\thesis\\Viral\\Viral\\client\\src\\reportWebVitals.ts":"2","D:\\thesis\\Viral\\Viral\\client\\src\\App.tsx":"3","D:\\thesis\\Viral\\Viral\\client\\src\\logic\\connections.ts":"4","D:\\thesis\\Viral\\Viral\\client\\src\\socket-io-client\\socket-io-client.tsx":"5","D:\\thesis\\Viral\\Viral\\client\\src\\components\\StartGame.tsx":"6","D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\store.tsx":"7","D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\gameStateActions.ts":"8","D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\gameStateReducer.ts":"9","D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\playerReducer.ts":"10","D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\allGamesReducer.ts":"11","D:\\thesis\\Viral\\Viral\\client\\src\\components\\NewGameMenu\\NewGameMenu.tsx":"12","D:\\thesis\\Viral\\Viral\\client\\src\\components\\MarkersStore\\MarkersStore.tsx":"13","D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\reduxTypes.ts":"14","D:\\thesis\\Viral\\Viral\\client\\src\\logic\\actions.newState_CO.ts":"15","D:\\thesis\\Viral\\Viral\\client\\src\\logic\\actions.MW.ts":"16","D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\initialState.tsx":"17","D:\\thesis\\Viral\\Viral\\client\\src\\components\\sourceDeck\\sourceDeck.tsx":"18","D:\\thesis\\Viral\\Viral\\client\\src\\components\\MisinformationDeck\\misinformationDeck.tsx":"19","D:\\thesis\\Viral\\Viral\\client\\src\\components\\CardHand\\CardHand.tsx":"20","D:\\thesis\\Viral\\Viral\\client\\src\\components\\CureDeck\\CureDeck.tsx":"21","D:\\thesis\\Viral\\Viral\\client\\src\\components\\ChaosMeter\\ChaosMeter.tsx":"22","D:\\thesis\\Viral\\Viral\\client\\src\\components\\SpreadLevel\\SpreadLevel.tsx":"23","D:\\thesis\\Viral\\Viral\\client\\src\\components\\SourceParent\\SourceParent.tsx":"24","D:\\thesis\\Viral\\Viral\\client\\src\\components\\PlayerPrompt\\PlayerPrompt.tsx":"25","D:\\thesis\\Viral\\Viral\\client\\src\\components\\SourceCard\\SourceCard.tsx":"26","D:\\thesis\\Viral\\Viral\\client\\src\\components\\Source\\Source.tsx":"27","D:\\thesis\\Viral\\Viral\\client\\src\\helpers\\iconExporter.ts":"28","D:\\thesis\\Viral\\Viral\\client\\src\\helpers\\utils.ts":"29","D:\\thesis\\Viral\\Viral\\client\\src\\components\\PlayerPawn\\PlayerPawn.tsx":"30","D:\\thesis\\Viral\\Viral\\client\\src\\logic\\dummyState.REDO_CO.ts":"31","D:\\thesis\\Viral\\Viral\\client\\src\\components\\Source\\DebunkModal.tsx":"32","D:\\thesis\\Viral\\Viral\\client\\src\\types\\gameStateTypes.ts":"33","D:\\thesis\\Viral\\Viral\\client\\src\\components\\OtherPlayer\\OtherPlayer.tsx":"34","D:\\thesis\\Viral\\Viral\\client\\src\\components\\GameOn.tsx":"35","D:\\thesis\\Viral\\Viral\\client\\src\\components\\GameOver\\gameOver.tsx":"36","D:\\thesis\\Viral\\Viral\\client\\src\\components\\YouWon\\youWon.tsx":"37"},{"size":500,"mtime":1612871791381,"results":"38","hashOfConfig":"39"},{"size":425,"mtime":1612199487710,"results":"40","hashOfConfig":"39"},{"size":415,"mtime":1612870019717,"results":"41","hashOfConfig":"39"},{"size":2987,"mtime":1612900019866,"results":"42","hashOfConfig":"39"},{"size":1966,"mtime":1612954127241,"results":"43","hashOfConfig":"39"},{"size":2295,"mtime":1612900083924,"results":"44","hashOfConfig":"39"},{"size":706,"mtime":1612804814879,"results":"45","hashOfConfig":"39"},{"size":3115,"mtime":1612899328483,"results":"46","hashOfConfig":"39"},{"size":2857,"mtime":1612968254894,"results":"47","hashOfConfig":"39"},{"size":707,"mtime":1612870411289,"results":"48","hashOfConfig":"39"},{"size":369,"mtime":1612871914371,"results":"49","hashOfConfig":"39"},{"size":3652,"mtime":1612967392775,"results":"50","hashOfConfig":"39"},{"size":738,"mtime":1612862362153,"results":"51","hashOfConfig":"39"},{"size":3243,"mtime":1612899328484,"results":"52","hashOfConfig":"39"},{"size":14913,"mtime":1612968254893,"results":"53","hashOfConfig":"39"},{"size":12389,"mtime":1612968254891,"results":"54","hashOfConfig":"39"},{"size":1523,"mtime":1612779415808,"results":"55","hashOfConfig":"39"},{"size":349,"mtime":1612862362178,"results":"56","hashOfConfig":"39"},{"size":377,"mtime":1612862362154,"results":"57","hashOfConfig":"39"},{"size":960,"mtime":1612900166436,"results":"58","hashOfConfig":"39"},{"size":1090,"mtime":1612862362151,"results":"59","hashOfConfig":"39"},{"size":1471,"mtime":1612968254884,"results":"60","hashOfConfig":"39"},{"size":860,"mtime":1612871791380,"results":"61","hashOfConfig":"39"},{"size":943,"mtime":1612900610081,"results":"62","hashOfConfig":"39"},{"size":661,"mtime":1612968254889,"results":"63","hashOfConfig":"39"},{"size":1759,"mtime":1612871791378,"results":"64","hashOfConfig":"39"},{"size":7067,"mtime":1612968254890,"results":"65","hashOfConfig":"39"},{"size":5037,"mtime":1612967688338,"results":"66","hashOfConfig":"39"},{"size":556,"mtime":1612863569089,"results":"67","hashOfConfig":"39"},{"size":1233,"mtime":1612968265705,"results":"68","hashOfConfig":"39"},{"size":11513,"mtime":1612870970131,"results":"69","hashOfConfig":"39"},{"size":3972,"mtime":1612900610079,"results":"70","hashOfConfig":"39"},{"size":1761,"mtime":1612899328486,"results":"71","hashOfConfig":"39"},{"size":2733,"mtime":1612862362157,"results":"72","hashOfConfig":"39"},{"size":3941,"mtime":1612968254886,"results":"73","hashOfConfig":"39"},{"size":128,"mtime":1612900019856,"results":"74","hashOfConfig":"39"},{"size":149,"mtime":1612900019863,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"1kpgg80",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"78"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"78"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"78"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"78"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"78"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"78"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"78"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"78"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"150"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"78"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"78"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"D:\\thesis\\Viral\\Viral\\client\\src\\index.tsx",[],["166","167"],"D:\\thesis\\Viral\\Viral\\client\\src\\reportWebVitals.ts",[],"D:\\thesis\\Viral\\Viral\\client\\src\\App.tsx",[],"D:\\thesis\\Viral\\Viral\\client\\src\\logic\\connections.ts",[],"D:\\thesis\\Viral\\Viral\\client\\src\\socket-io-client\\socket-io-client.tsx",["168"],"//based on change of state \nimport io from \"socket.io-client\";\nimport * as dotenv from 'dotenv';\nimport { store } from '../redux/gameState/store'\nimport { GetAllGamesAction, updateGameState } from \"../redux/gameState/gameStateActions\";\nimport { Gamestate } from \"../types/gameStateTypes\";\nimport { Play } from \"grommet-icons\";\ndotenv.config({ path: __dirname + '../.env' });\nconst socket = io(process.env.SERVER_URL || 'http://localhost:3002');\n\n\nconst Player = store.getState().playerStateReducer\n\n// on click - 'start game' \nexport const joinRoom = (player: typeof Player) => {\n  socket.emit('joinRoom', player);\n}\n\n// Message from server // welcome component \nsocket.on('joinConfirmation', (message: string) => {\n  console.log(message); // display message to the screen \n\n});\n\n//subscripion to any game state changes \n\nstore.subscribe(() => {\n  const newState = store.getState().gameStateReducer\n  const Player = store.getState().playerStateReducer\n  // console.log(newState, 'NEW STATE FROM SUBSCRIBE ')\n  // console.log(Player, 'PLAYER')\n  if (!newState.received && Player && newState.gameOn) {\n    socket.emit('onChangeState', { newState, Player })\n  }\n})\n\n// const addPlayer = (player: typeof Player) => {\n//   socket.emit('addPlayerToGame', player)\n// }\n\n\n//data coming from backend after game state changed\nsocket.on('updatedState', (newState: Gamestate) => {\n  console.log('newstate from client ', newState)\n  newState.received = true;\n  store.dispatch(updateGameState(newState))\n})\n\nexport const getGame = (player: typeof Player) => {\n  // console.log(player, 'PLAYER ON GET GAME - WILL BE ADDED HERE')\n  player && socket.emit('retriveGame', player)\n\n}\n\nexport const getGames = () => {\n  socket.emit('getGames')\n  socket.on('games', (\n    (data: string[]) => {\n      store.dispatch(GetAllGamesAction(data))\n    }\n  ))\n}\ngetGames();\n\n\n\n// how to we tell the users \nsocket.on('userLeft', (message: string) => console.log(message)) // need a end game button ","D:\\thesis\\Viral\\Viral\\client\\src\\components\\StartGame.tsx",["169","170","171","172","173","174","175","176","177"],"\nimport React, { useEffect, useState } from 'react';\n// import { Box, Button, Grommet, Card, CardHeader, CardBody, CardFooter, Meter } from 'grommet';\n// import { Notification } from 'grommet-icons';\nimport { Provider, useDispatch, useSelector } from 'react-redux';\nimport { RootState, store } from '../redux/gameState/store';\nimport { getGame, getGames, joinRoom } from '../socket-io-client/socket-io-client';\nimport { CureDeck } from '../components/CureDeck/CureDeck';\nimport { getIcon } from '../helpers/iconExporter'\n\n\nimport { NewGameMenu } from '../components/NewGameMenu/NewGameMenu'\nimport { addPlayerToGameState, DealCardsToNewPlayerAction, StartGameAction } from '../redux/gameState/gameStateActions';\nimport { Gamestate, Player } from '../types/gameStateTypes';\n\nimport { GameOn } from './GameOn';\n\nimport { GameOver } from './GameOver/gameOver'\nimport { Winner } from './YouWon/youWon'\n\nexport const StartGame: React.FC = (): JSX.Element => {\n\n  const dispatch = useDispatch();\n  // const [showSidebar, setShowSidebar] = useState(false);\n  const player = useSelector((state: RootState) => state.playerStateReducer)\n  const allRooms = useSelector((state: RootState) => state.allGamesStateReducer)\n  const [stateRendered, updateStateRendered] = useState(false)\n  // let gameOn: boolean = false;\n  let state = useSelector((state: RootState) => state.gameStateReducer)\n\n  const startGame = (player: Player) => {\n    if (!stateRendered) {\n      joinRoom(player)\n      if (allRooms.filter(room => room === player.room).length > 0) {\n        getGame(player);\n        updateStateRendered(true)\n      } else {\n        dispatch(StartGameAction([player]))\n        updateStateRendered(true)\n      }\n    }\n  }\n\n\n  const MapSVG = getIcon('map');\n  // const addPlayer = () => {\n  //   dispatch(addPlayerToGameState(player, gamestate))\n  // }\n\n  return (\n\n    <div>\n      {state.gameWon ?\n        <Winner /> :\n        state.gameLost ?\n          <GameOver /> :\n          (player.name.length < 1) ?\n            <NewGameMenu />\n            : (\n              (!stateRendered) ?\n                <h1>\n                  game loading ...\n          {startGame(player)}\n                </h1>\n                :\n                <GameOn rendered={stateRendered} />\n            )\n      }\n    </div>\n  )\n}\n\n\n\n\n\n\n\n\n","D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\store.tsx",[],"D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\gameStateActions.ts",["178"],"import { ClearmisinfoProps, CLEAR_MISINFO, DebunkMisinfoProps, DEBUNK_MISINFO, discardCardProps, DISCARD_ACTION, logOnOffProps, LOG_ON_OFF, MoveActionProps, MOVE_ACTION, ShareCardProps, SHARE_CARD, UPDATE_GAME_STATE, GameStateActionTypes, PlayerStateActionTypes, ADD_PLAYER, GET_ALL_GAMES, AllGamesActionTypes, START_GAME, ADD_PLAYER_TO_GAME, DEAL_CARDS, dealCardsProp } from './reduxTypes';\nimport { Gamestate, Player, } from '../../types/gameStateTypes'\nimport { gameStateReducer } from './gameStateReducer';\n//Below are example of actions with typescript.\n// we need to create an action for each reduced case\n\n\nexport function moveAction(props: MoveActionProps): GameStateActionTypes {\n  const { oldState, currentPlayerID, location } = props\n  return {\n    type: MOVE_ACTION,\n    payload: { oldState, currentPlayerID, location }\n  }\n}\n\n\n\nexport function clearMisinfoAction(props: ClearmisinfoProps): GameStateActionTypes {\n  const { oldState, currentPlayerID, location, misinfoType } = props;\n  return {\n    type: CLEAR_MISINFO,\n    payload: { oldState, currentPlayerID, location, misinfoType }\n  }\n}\n\n\nexport function shareCardAction(props: ShareCardProps): GameStateActionTypes {\n  const { oldState, currentPlayerID, recipient, sharedCard } = props;\n  return {\n    type: SHARE_CARD,\n    payload: { oldState, currentPlayerID, recipient, sharedCard }\n  }\n}\n\nexport function logOnOffAction(props: logOnOffProps): GameStateActionTypes {\n  const { oldState, currentPlayerID, location, usedCard } = props;\n  return {\n    type: LOG_ON_OFF,\n    payload: { oldState, currentPlayerID, location, usedCard }\n  }\n}\nexport function debunkMisinfoAction(props: DebunkMisinfoProps): GameStateActionTypes {\n  const { oldState, currentPlayerID, usedCards, misinfoType } = props;\n  return {\n    type: DEBUNK_MISINFO,\n    payload: { oldState, currentPlayerID, usedCards, misinfoType }\n  }\n}\n\nexport function discardCardAction(props: discardCardProps): GameStateActionTypes {\n  const { oldState, currentPlayerID, discardedCard } = props;\n  return {\n    type: DISCARD_ACTION,\n    payload: { oldState, currentPlayerID, discardedCard }\n  }\n}\n//redux action to update whole gameState // examples\nexport function updateGameState(gameState: Gamestate): GameStateActionTypes {\n  return {\n    type: UPDATE_GAME_STATE,\n    payload: gameState\n  }\n}\n\nexport function AddPlayerAction(name: string, color: string, room: string): PlayerStateActionTypes {\n  return {\n    type: ADD_PLAYER,\n    payload: { name, color, room }\n  }\n}\n\nexport function GetAllGamesAction(array: string[]): AllGamesActionTypes {\n  return {\n    type: GET_ALL_GAMES,\n    payload: array\n  }\n}\n\n\nexport function StartGameAction(players: Player[]): GameStateActionTypes {\n  return {\n    type: START_GAME,\n    payload: players\n  }\n}\n\nexport function addPlayerToGameState(player: Player): GameStateActionTypes {\n  return {\n    type: ADD_PLAYER_TO_GAME,\n    payload: { player }\n  }\n}\n\n\nexport function DealCardsToNewPlayerAction(props: dealCardsProp): GameStateActionTypes {\n  const { player, state } = props;\n  return {\n    type: DEAL_CARDS,\n    payload: { player, state }\n  }\n}","D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\gameStateReducer.ts",["179","180","181"],"D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\playerReducer.ts",[],"D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\allGamesReducer.ts",[],"D:\\thesis\\Viral\\Viral\\client\\src\\components\\NewGameMenu\\NewGameMenu.tsx",["182","183","184","185","186","187","188","189","190","191","192"],"import React, { ButtonHTMLAttributes, ChangeEvent, DetailedHTMLProps, useState } from 'react';\nimport './NewGameMenu.scss';\n// import { startGameEvent, addPlayerEvent } from '../../logic/event.listeners'\nimport { AddPlayerAction, addPlayerToGameState, DealCardsToNewPlayerAction, StartGameAction, updateGameState } from '../../redux/gameState/gameStateActions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState, store } from '../../redux/gameState/store';\nimport { Player } from '../../types/gameStateTypes';\nimport { Console } from 'console';\nimport { getIcon } from '../../helpers/iconExporter'\n\n\nexport const NewGameMenu: React.FC = () => {\n\n  const FirePawn = getIcon('firePawn');\n  const HexagonPawn = getIcon('hexagonPlayerPawn');\n  const FlowerPawn = getIcon('flowerPawn');\n  const RombPawn = getIcon('rombPawn')\n  const SunPawn = getIcon('sunPawn')\n  const SquarePawn = getIcon('squarePawn')\n\n  function handleChange(event: ChangeEvent<HTMLInputElement>): void {\n    event.preventDefault()\n    if (event.target) {\n      updateInput(state => ({\n        ...state,\n        [event.target.name]: event.target.value\n      }))\n    }\n\n  }\n  const [input, updateInput] = useState({ name: '', color: '', room: '' })\n  const dispatch = useDispatch();\n\n\n  const handleSelect = (color: string) => {\n    let selectedPawn: string = 'none';\n    selectedPawn = color === input.color ? 'none' : color;\n\n    updateInput(state => ({\n      ...state,\n      color: selectedPawn\n    }))\n\n  }\n\n  let player = useSelector((state: RootState) => state.playerStateReducer)\n  let state = useSelector((state: RootState) => state.gameStateReducer)\n\n  const addPlayer = (event: React.MouseEvent<HTMLElement>) => {\n    event.preventDefault()\n    dispatch(AddPlayerAction(input.name, input.color, input.room))\n  }\n\n\n  return (\n    <form className='form' >\n      <div className='menu-container'>\n        <div className='title-container'>\n          <h3 style={{ color: 'royalblue' }}>Welcome</h3>\n        </div>\n        <input\n          type='text'\n          name='name'\n          value={input.name}\n          placeholder='Player name '\n          onChange={handleChange}\n        ></input>\n\n\n        <input\n          type='text'\n          name='room'\n          value={input.room}\n          placeholder='Room '\n          onChange={handleChange}\n\n        ></input>\n        <div className='colors-container' >\n          <FirePawn id=\"icon\"\n            style={{ border: input.color === 'orange' ? '2px solid orange' : 'none' }}\n            onClick={() => handleSelect('orange')}\n          />\n\n          <HexagonPawn id=\"icon\"\n            style={{ border: (input.color === 'green') ? ' 2px solid green' : 'none' }}\n            onClick={() => handleSelect('green')}\n          />\n\n          <FlowerPawn id=\"icon\"\n            style={{ border: (input.color === 'pink') ? '2px solid pink' : 'none' }}\n            onClick={() => handleSelect('pink')}\n          />\n\n          <RombPawn id=\"icon\"\n            style={{ border: (input.color === 'blue') ? ' 2px solid blue' : 'none' }}\n            onClick={() => handleSelect('blue')}\n          />\n          <SunPawn id='icon'\n            onClick={() => handleSelect('yellow')}\n            style={{ border: (input.color === 'yellow') ? '2px solid yellow' : 'none' }}\n          />\n\n          <SquarePawn id=\"icon\"\n            onClick={() => handleSelect('red')}\n            style={{ border: (input.color === 'red') ? '2px solid red' : 'none' }}\n          />\n        </div>\n\n        <button className='start_game_button' type='submit' onClick={addPlayer} >\n          Play\n        </button>\n      </div >\n    </form >\n  );\n};","D:\\thesis\\Viral\\Viral\\client\\src\\components\\MarkersStore\\MarkersStore.tsx",[],"D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\reduxTypes.ts",[],"D:\\thesis\\Viral\\Viral\\client\\src\\logic\\actions.newState_CO.ts",[],"D:\\thesis\\Viral\\Viral\\client\\src\\logic\\actions.MW.ts",[],"D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\initialState.tsx",["193","194","195","196","197"],"// this initial state presumes 2 players, 3 locations (one for each color), 3 connection and 3 misinfo cards, and 1 viral card.\n\nimport { Gamestate, Card, Source, Player, Misinformation, Connection } from '../../types/gameStateTypes'\n\nexport const initialState: Gamestate = {\n  sources: [\n  \n  ],\n  players: [\n  ],\n  spreadLevel: 1,\n  chaosMeter: 0,\n  misinformation: {\n    community: {\n      name: 'Misinfo Type 1',\n      debunked: false,\n      markersLeft: 16,\n    },\n    social: {\n      name: 'Misinfo Type 2',\n      debunked: false,\n      markersLeft: 16,\n    },\n    relations: {\n      name: 'Misinfo Type 3',\n      debunked: false,\n      markersLeft: 16,\n    },\n  },\n  connectionDeck: [\n    {\n      cardType: 'connection',\n      sourceName: 'University',\n      misinfoType: 'blue',\n    },\n    {\n      cardType: 'connection',\n      sourceName: 'Gym',\n      misinfoType: 'red',\n    },\n    {\n      cardType: 'connection',\n      sourceName: 'Instagram',\n      misinfoType: 'yellow',\n    },\n    {\n      cardType: 'viral',\n    },\n  ],\n  misinformationDeckActive: [\n    {\n      cardType: 'misinformation',\n      sourceName: 'University',\n      misinfoType: 'blue',\n    },\n    {\n      cardType: 'misinformation',\n      sourceName: 'Gym',\n      misinfoType: 'red',\n    },\n    {\n      cardType: 'misinformation',\n      sourceName: 'Instagram',\n      misinfoType: 'yellow',\n    },\n  ],\n  misinformationDeckPassive: [],\n  turnMovesLeft: 4,\n  dealHistory: 0,\n  gameWon: false,\n  gameLost: false,\n  received: false,\n  gameOn:false\n}","D:\\thesis\\Viral\\Viral\\client\\src\\components\\sourceDeck\\sourceDeck.tsx",[],"D:\\thesis\\Viral\\Viral\\client\\src\\components\\MisinformationDeck\\misinformationDeck.tsx",[],"D:\\thesis\\Viral\\Viral\\client\\src\\components\\CardHand\\CardHand.tsx",[],"D:\\thesis\\Viral\\Viral\\client\\src\\components\\CureDeck\\CureDeck.tsx",[],["198","199"],"D:\\thesis\\Viral\\Viral\\client\\src\\components\\ChaosMeter\\ChaosMeter.tsx",[],"D:\\thesis\\Viral\\Viral\\client\\src\\components\\SpreadLevel\\SpreadLevel.tsx",[],"D:\\thesis\\Viral\\Viral\\client\\src\\components\\SourceParent\\SourceParent.tsx",["200","201"],"import React from 'react'\nimport PropTypes from 'prop-types'\n// import { initDummyState } from '../../logic/dummyState.REDO_CO';\nimport { SourceComponent  } from '../Source/Source'\nimport {Source} from '../../types/gameStateTypes'\nimport { render } from '@testing-library/react';\nimport {useSelector} from 'react-redux'\nimport { RootState } from '../../redux/gameState/store'\nimport './SourceParent.scss'\n\nexport const SourceParent = () => {\n  // const sources = initDummyState.sources;\n  const sources = useSelector((state: RootState) => state.gameStateReducer.sources);\n\n\n  // use the\n\n  const renderSources = (srcArr: Source[]) => {\n    \n    return srcArr.map(source => {\n      //! GET source.markers_community etc and plug into props of SourceComponent\n\n\n      return <SourceComponent source={source} key={source.name}/>\n    })\n  }\n\n  return (\n    <div id=\"source-parent-grid-container\">\n      {renderSources(sources)}\n    </div>\n  )\n}\n\n\n\n","D:\\thesis\\Viral\\Viral\\client\\src\\components\\PlayerPrompt\\PlayerPrompt.tsx",["202","203"],"import React from 'react';\nimport \"./PlayerPrompt.scss\"\n\nexport interface PlayerPromptProps {\n  msg: string\n}\n\n\nexport const PlayerPrompt: React.FC = () => { // SVGIcon\n  // using redux instead of props for real implementation\n  //const gamestate = useSelector(state => state.gamestate)\n  //const msg = gamestate.messages\n\n\n  const messages = ['this is a test message' , 'Bratuwurst?', ' ja bitte Bratwurst', 'Donald Trump is Tupac and lives under Connors head']\n  //messages.push(msg)\n  return (\n    <div className=\"player-prompt-container\" >\n      {messages.map(msg => {return (\n        <div className=\"single-message\">{msg}</div>)\n      })}\n\n    </div>\n  )\n}","D:\\thesis\\Viral\\Viral\\client\\src\\components\\SourceCard\\SourceCard.tsx",["204","205","206"],"import React from 'react';\nimport { getIcon } from '../../helpers/iconExporter'\nimport { toCamelCase, toPascalCase } from '../../helpers/utils'\nimport './SourceCard.scss'\nimport { shareCardEvent } from '../../logic/event.listeners';\nimport { ShareCardProps } from '../../redux/gameState/reduxTypes'\n\n//! issue with \"Card\" interface beings used for both Source/connection & \"Viral\" cards, which have name type \"null\" - possible change types/logic later\nexport interface SourceCardProps {\n  name: string,    //! NULL TO BE REMOVED\n  category: string, //! NULL TO BE REMOVED\n  canShare: any[]\n}\n// DON'T NEED ===> canlogon can go to the place if you have that card\n// canShare: a button that appears on each card when you are on the same location as another player\n// canchare: Player[]\n\n\nexport const SourceCard: React.FC<SourceCardProps> = ({ name, category, canShare }: SourceCardProps) => { // SVGIcon\n\n  const currentState = {}\n\n  const SVGIcon = getIcon(toCamelCase(name) + 'Icon');\n\n  const handleShareClick = (id: string) => {\n    //DISPATCH ACTION\n    console.log(`SHARING CARD ${name} WITH ${id}`);\n  }\n\n\n  const renderShareButtons = (shareWith: { name: string, id: string }[]) => {\n    return shareWith.map(player => <button onClick={() => handleShareClick(player.id)\n\n      // shareCardEvent({\n      //   oldState: currentState,\n      //   currentPlayerID: ,\n      //   recipient: player.id,\n      //   sharedCard: name\n      // })\n    }>{player.name}</button>)\n  }\n  return (\n    <div className={`source-card-container ${category}`} >\n      <SVGIcon name={name} className=\"card-icon\" />\n      <div className=\"name-container\" >\n        <p className=\"title\">{toPascalCase(name)}</p>\n        {renderShareButtons(canShare)}\n      </div>\n    </div>\n  )\n}","D:\\thesis\\Viral\\Viral\\client\\src\\components\\Source\\Source.tsx",["207","208","209","210"],"import React, { Fragment, useEffect, useState } from 'react';\nimport { Player, Source } from '../../types/gameStateTypes'\nimport { getIcon } from '../../helpers/iconExporter'\nimport { toCamelCase, toKebabCase } from '../../helpers/utils';\nimport './Source.scss'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { clearMisinfoAction, debunkMisinfoAction, moveAction, logOnOffAction } from '../../redux/gameState/gameStateActions';\nimport { RootState } from '../../redux/gameState/store';\nimport { PlayerPawn } from '../PlayerPawn/PlayerPawn';\nimport { ModalComponent } from './DebunkModal';\nimport { logOnOff } from '../../logic/actions.newState_CO';\n\n\nexport interface SourceProps {\n  source: Source;\n}\n\n\nexport const SourceComponent: React.FC<SourceProps> = ({ source }: SourceProps) => { // SVGIcon\n\n\n  const dispatch = useDispatch()\n  const gamestate = useSelector((state: RootState) => state.gameStateReducer)\n  const array = useSelector((state: RootState) => state.gameStateReducer.players.filter(player => player.isCurrent === true))\n  //console.log('CURRENT PLAYER', array)\n  const currentPlayer = array[0]\n  const allPlayers = useSelector((state: RootState) => state.gameStateReducer.players)\n  //console.log('gamestate from source : ', gamestate)\n  //console.log('currentPlayer from source : ' , currentPlayer)\n\n  const [modalIsOpen, setIsOpen] = useState(false)\n  const [selectedDebunkCards, setselectedDebunkCards] = useState([])\n\n  let { name, markers_community, markers_social, markers_relations,\n    canMove, canLogOff, canLogOn, canClearCommunity,\n    canClearRelations, canClearSocial, canShare, canDebunk, misinfoType } = source;\n\n\n\n  useEffect(() => {\n    console.log('close modal from source tsx useEffect---------', modalIsOpen)\n\n  }, [modalIsOpen])\n  useEffect(() => {\n    console.log('close modal from source tsx useEffect seleceted debunked cards---------', selectedDebunkCards)\n\n  }, [selectedDebunkCards])\n\n  console.log('source MOVABLE', source.name, canMove)\n  console.log('THIS IS THE NAME::::::: ', toCamelCase(name));\n  //console.log('THIS IS THE NAME::::::: ', toCamelCase(name));\n  const SVGIconSource: React.FunctionComponent<React.SVGProps<SVGSVGElement>>\n    = getIcon(toCamelCase(name) + 'Icon');\n\n\n  const getMarker = (category: string, num: number, canBeCleared: boolean, canDebunk: string[]) => {\n    if (num > 0 && canDebunk.includes(category)) {\n\n      //get the debunable icon\n      const DebunkableIcon = getIcon(toCamelCase(`marker ${category} ${num}`))\n      //wrap it with  button to make it clickable\n      return (<button onClick={() => debunkMisinforamtion(category)}><DebunkableIcon /></button>)\n\n    }\n\n    //add a different icon if canBeCleared\n    if (num > 0 && canBeCleared) {\n      //get the clearable icon\n      const ClearableIcon = getIcon(toCamelCase(`marker ${category} ${num}`))\n      //wrap it with  button to make it clickable\n\n      return (<button onClick={() => clearMisinformationbyOne(category)}><ClearableIcon /></button>)\n\n    }\n    if (num > 0) {\n      //console.log(toCamelCase(`marker ${category} ${num}`))\n      const Icon = getIcon(toCamelCase(`marker ${category} ${num}`));\n      return <Icon />;\n    }\n  }\n\n  const debunkMisinforamtion = (category: string) => {\n\n    //showModal\n    setIsOpen(true)\n\n    setTimeout(async () => {\n      try {\n\n        // Wait user to confirm !\n        dispatch(debunkMisinfoAction({\n          oldState: gamestate, currentPlayerID: currentPlayer.id,\n          misinfoType: category, usedCards: selectedDebunkCards\n        }))\n\n        // this line below is executed only after user click on OK\n        alert(\"OK\");\n      } catch (err) {\n        alert(\"CANCEL\");\n      }\n    }, 7000);\n\n\n  }\n\n  const clearMisinformationbyOne = (misinfoType: string) => {\n    //throws a logic error !!!\n    dispatch(clearMisinfoAction({ oldState: gamestate, currentPlayerID: currentPlayer.id, misinfoType, location: source.name }))\n  }\n\n\n  const getPlayerPawns = (players: Player[], currentPlayer: Player) => {\n    let test: Player[] = [];\n    for (const player of allPlayers) {\n      if (player.currentSource === source.name && !test.includes(player)) {\n        test.push(currentPlayer)\n      }\n    }\n    //console.log(players)\n    if (test.length > 0) return test.map(player => {\n      console.log('player', player)\n       return < PlayerPawn color = { player.pawnColor } />\n      })\n\n    else return null\n\n  }\n\n  const changePlayersCurrentSource = () => {\n    dispatch(moveAction({ oldState: gamestate, currentPlayerID: currentPlayer.id, location: source.name }))\n  }\n\n  const logonToNewSource = () => {\n    dispatch(logOnOffAction({ oldState: gamestate, currentPlayerID: currentPlayer.id, location: source.name, usedCard: source.name }))\n  }\n\n  const logoffToNewSource = () => {\n    const spentCard = gamestate.players.filter(player => player.id === currentPlayer.id)[0].currentSource;\n    dispatch(logOnOffAction({ oldState: gamestate, currentPlayerID: currentPlayer.id, location: source.name, usedCard: spentCard }))\n  }\n\n  const renderIcon = () => {\n    if (canMove) return <button onClick={() => changePlayersCurrentSource()}> <SVGIconSource /> </button>\n    return null\n\n  }\n\n  const renderAsLogOn = () => {\n    if (canLogOn) return <button onClick={() => changePlayersCurrentSource()}> <SVGIconSource /> </button>\n    return null\n\n  }\n\n  function unclickableMessage() {\n    console.log(`%c you can't do anything at ${source.name}`, `background-color: red; color: white; padding: 10px`)\n    return null;\n  }\n\n  //adding the right class names\n  let canMoveClassName = canMove ? 'can-move-to' : ''\n  let canLogOffClassName = canLogOff ? 'can-log-off' : ''\n  let canLogOnClassName = canLogOn ? 'can-log-on' : ''\n  let canDebunkClassName = canDebunk ? 'can-debunk' : ''\n\n\n  const closeModal = () => {\n    console.log('close modal from source tsx---------')\n    setIsOpen(false)\n\n\n\n  }\n\n  const NewSVG = getIcon('connection1')\n\n  return (\n    <>\n      {modalIsOpen ? <ModalComponent modalIsOpen={modalIsOpen} closeModal={closeModal} setselectedDebunkCards={setselectedDebunkCards} /> : null}\n\n\n\n      <div\n        onClick={\n          // logic to render different click events from source\n          canLogOff ?\n            logoffToNewSource :\n            canLogOn ?\n              logonToNewSource :\n              canMove ?\n                changePlayersCurrentSource :\n                unclickableMessage}\n        className={`source-container ${toKebabCase(name)} ${canLogOffClassName} ${canLogOnClassName} ${canMoveClassName} ${source.misinfoType}`} >\n\n        <SVGIconSource />\n        <div className={`markers-container ${misinfoType}`}>\n          {getMarker('community', markers_community, canClearCommunity, canDebunk)}\n          {getMarker('social', markers_social, canClearSocial, canDebunk)}\n          {getMarker('relations', markers_relations, canClearRelations, canDebunk)}\n        </div>\n        {getPlayerPawns(canShare, currentPlayer)}\n      </div>\n    </>\n\n  )\n\n\n\n}\n\n\n\n// CAN MOVE:\n// CAN LOGON:\n// CAN LOGOFF:\n// MARKERS x3 ---> CAN CLEAR\n// PAWNS","D:\\thesis\\Viral\\Viral\\client\\src\\helpers\\iconExporter.ts",[],"D:\\thesis\\Viral\\Viral\\client\\src\\helpers\\utils.ts",[],"D:\\thesis\\Viral\\Viral\\client\\src\\components\\PlayerPawn\\PlayerPawn.tsx",["211","212","213","214"],"D:\\thesis\\Viral\\Viral\\client\\src\\logic\\dummyState.REDO_CO.ts",["215","216","217","218","219"],"// this initial state presumes 2 players, 3 locations (one for each color), 3 connection and 3 misinfo cards, and 1 viral card.\n\n import { Gamestate, Card, Source, Player, Misinformation, Connection } from '../types/gameStateTypes'\n\nexport const initDummyState: Gamestate = {\n  sources: [\n    {\n      name: 'university',\n      misinfoType: 'community',\n      markers_community: 1,\n      markers_social: 1,\n      markers_relations: 1,\n      canMove: true,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: true,\n      canClearSocial: true,\n      canClearRelations: true,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'High School',\n      misinfoType: 'blue',\n      markers_community: 1,\n      markers_social: 3,\n      markers_relations: 0,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'Taxi',\n      misinfoType: 'blue',\n      markers_community: 1,\n      markers_social: 3,\n      markers_relations: 0,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'Local Cult',\n      misinfoType: 'blue',\n      markers_community: 1,\n      markers_social: 3,\n      markers_relations: 0,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'Pub',\n      misinfoType: 'blue',\n      markers_community: 1,\n      markers_social: 3,\n      markers_relations: 0,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'Hair Salon',\n      misinfoType: 'blue',\n      markers_community: 1,\n      markers_social: 3,\n      markers_relations: 0,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: true,\n      canClearSocial: true,\n      canClearRelations: true,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'University',\n      misinfoType: 'blue',\n      markers_community: 1,\n      markers_social: 3,\n      markers_relations: 0,\n      canMove: true,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'Gym',\n      misinfoType: 'blue',\n      markers_community: 1,\n      markers_social: 0,\n      markers_relations: 2,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: true,\n      canClearSocial: true,\n      canClearRelations: true,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'Asda',\n      misinfoType: 'blue',\n      markers_community: 1,\n      markers_social: 3,\n      markers_relations: 0,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'Instagram',\n      misinfoType: 'yellow',\n      markers_community: 1,\n      markers_social: 2,\n      markers_relations: 3,\n      canMove: true,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: true,\n      canClearSocial: true,\n      canClearRelations: true,\n      canShare: [ {\n        name: 'Player 1',\n        id: '1234',\n        cards: [],\n        cardHandOverflow: false,\n        isCurrent: true,\n        pawnColor: 'green',\n        currentSource: 'pub',\n        room:'1',\n      },{\n        name: 'Player 2',\n        id: '5678',\n        cards: [],\n        cardHandOverflow: false,\n        isCurrent: true,\n        pawnColor: 'purple',\n        currentSource: 'pub',\n        room:'1',\n\n      },],\n      canDebunk: [],\n    },\n    {\n      name: 'Facebook',\n      misinfoType: 'yellow',\n      markers_community: 1,\n      markers_social: 2,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'Youtube',\n      misinfoType: 'yellow',\n      markers_community: 1,\n      markers_social: 2,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'twitter',\n      misinfoType: 'yellow',\n      markers_community: 1,\n      markers_social: 2,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'Illuminatify',\n      misinfoType: 'yellow',\n      markers_community: 1,\n      markers_social: 2,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'reddit',\n      misinfoType: 'yellow',\n      markers_community: 1,\n      markers_social: 2,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'Whatsapp',\n      misinfoType: 'yellow',\n      markers_community: 1,\n      markers_social: 2,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'Tiktok',\n      misinfoType: 'yellow',\n      markers_community: 3,\n      markers_social: 3,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'uncle eugene',\n      misinfoType: 'red',\n      markers_community: 3,\n      markers_social: 3,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'cousin',\n      misinfoType: 'red',\n      markers_community: 3,\n      markers_social: 3,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'fran from hr',\n      misinfoType: 'red',\n      markers_community: 3,\n      markers_social: 3,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'evil ex',\n      misinfoType: 'red',\n      markers_community: 3,\n      markers_social: 3,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'opinionated grandpa',\n      misinfoType: 'red',\n      markers_community: 3,\n      markers_social: 3,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'crazy dave',\n      misinfoType: 'red',\n      markers_community: 3,\n      markers_social: 3,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'guy at the bus stop',\n      misinfoType: 'red',\n      markers_community: 3,\n      markers_social: 3,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'mother in law',\n      misinfoType: 'red',\n      markers_community: 3,\n      markers_social: 3,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n  ],\n  players: [\n    {\n      name: 'Player 1',\n      id: '1234',\n      cards: [ \n      ],\n      cardHandOverflow: false,\n      isCurrent: true,\n      pawnColor: 'green',\n\n      currentSource: 'pub',\n      room:'1',\n     \n     \n\n    },\n    {\n      name: 'Player 2',\n      id: '5678',\n      cards: [{\n        cardType: 'connection',\n        sourceName: 'Instagram',\n        misinfoType: 'yellow',\n      },],\n      cardHandOverflow: false,\n      isCurrent: true,\n      pawnColor: 'purple',\n      currentSource: 'University',\n      room: '1',\n    \n\n    },\n  ],\n  spreadLevel: 1,\n  chaosMeter: 0,\n  misinformation: {\n    community: {\n      name: 'Misinfo Type 1',\n      debunked: false,\n      markersLeft: 16,\n    },\n    social: {\n      name: 'Misinfo Type 2',\n      debunked: false,\n      markersLeft: 16,\n    },\n    relations: {\n      name: 'Misinfo Type 3',\n      debunked: false,\n      markersLeft: 16,\n    },\n  },\n  connectionDeck: [\n    {\n      cardType: 'connection',\n      sourceName: 'University',\n      misinfoType: 'blue',\n    },\n    {\n      cardType: 'connection',\n      sourceName: 'Gym',\n      misinfoType: 'red',\n    },\n    {\n      cardType: 'connection',\n      sourceName: 'Instagram',\n      misinfoType: 'yellow',\n    },\n    {\n      cardType: 'viral',\n    },\n  ],\n  misinformationDeckActive: [\n    {\n      cardType: 'misinformation',\n      sourceName: 'University',\n      misinfoType: 'blue',\n    },\n    {\n      cardType: 'misinformation',\n      sourceName: 'Gym',\n      misinfoType: 'red',\n    },\n    {\n      cardType: 'misinformation',\n      sourceName: 'Instagram',\n      misinfoType: 'yellow',\n    },\n    {\n      cardType: 'misinformation',\n      sourceName: 'Instagram',\n      misinfoType: 'yellow',\n    },\n    {\n      cardType: 'misinformation',\n      sourceName: 'Instagram',\n      misinfoType: 'yellow',\n    },\n    {\n      cardType: 'misinformation',\n      sourceName: 'Instagram',\n      misinfoType: 'yellow',\n    },\n  ],\n  misinformationDeckPassive: [],\n  turnMovesLeft: 4,\n  dealHistory: 0,\n  gameWon: false,\n  gameLost: false,\n  received: false,\n  gameOn:true\n}",["220","221"],"D:\\thesis\\Viral\\Viral\\client\\src\\components\\Source\\DebunkModal.tsx",["222","223","224","225","226","227"],"import React from 'react';\nimport Modal from 'react-modal';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../redux/gameState/store';\nimport { SourceCard } from '../SourceCard/SourceCard';\nimport ReactDOM from 'react-dom';\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)'\n  }\n};\n\n\ninterface ModalProps {\n  modalIsOpen: boolean,\n  setIsOpen: Function,\n  setselectedDebunkCards: Function\n}\n\nexport function ModalComponent({ modalIsOpen, setIsOpen, setselectedDebunkCards }: ModalProps) {\n  const currentPlayerCards = useSelector((state: RootState) => state.playerStateReducer.cards)\n\n  const gameState = useSelector((state: RootState) => state.gameStateReducer)\n\n\n\n\n  const fakeCards = ['Card 1', 'Card 2', 'Card 3']\n\n\n  var subtitle: any;\n\n\n\n  function openModal() {\n    setIsOpen(true);\n  }\n\n  function afterOpenModal() {\n    // references are now sync'd and can be accessed.\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  return (\n    <div>\n      <Modal\n        isOpen={modalIsOpen}\n        onAfterOpen={afterOpenModal}\n        onRequestClose={closeModal}\n        style={customStyles}\n        contentLabel=\"Example Modal\"\n      >\n        {fakeCards.map(card => <div>{card}</div>)}\n      </Modal>\n    </div>\n  );\n}","D:\\thesis\\Viral\\Viral\\client\\src\\types\\gameStateTypes.ts",[],["228","229"],"D:\\thesis\\Viral\\Viral\\client\\src\\components\\OtherPlayer\\OtherPlayer.tsx",[],"D:\\thesis\\Viral\\Viral\\client\\src\\components\\GameOn.tsx",["230","231","232","233","234","235","236","237","238","239","240","241","242","243","244"],"\nimport React, { useEffect, useState } from 'react';\n// import { Box, Button, Grommet, Card, CardHeader, CardBody, CardFooter, Meter } from 'grommet';\n// import { Notification } from 'grommet-icons';\nimport { Provider, useDispatch, useSelector } from 'react-redux';\nimport { RootState, store } from '../redux/gameState/store';\nimport { getGame, getGames, joinRoom } from '../socket-io-client/socket-io-client';\nimport { CureDeck } from '../components/CureDeck/CureDeck';\nimport { getIcon } from '../helpers/iconExporter'\nimport { SourceCard } from '../components/SourceCard/SourceCard';\nimport { CardHand } from '../components/CardHand/CardHand';\nimport { SourceDeck } from '../components/sourceDeck/sourceDeck'\nimport { MarkersStore } from '../components/MarkersStore/MarkersStore'\nimport { MisinformationDeck } from '../components/MisinformationDeck/misinformationDeck'\nimport { ChaosMeter } from '../components/ChaosMeter/ChaosMeter'\nimport { SpreadLevel } from '../components/SpreadLevel/SpreadLevel';\nimport { PlayerPrompt } from '../components/PlayerPrompt/PlayerPrompt';\nimport { SourceParent } from '../components/SourceParent/SourceParent';\nimport { NewGameMenu } from '../components/NewGameMenu/NewGameMenu'\nimport { addPlayerToGameState, DealCardsToNewPlayerAction, StartGameAction } from '../redux/gameState/gameStateActions';\nimport { Gamestate, Player } from '../types/gameStateTypes';\nimport { UpdateGameStateAction } from '../redux/gameState/reduxTypes';\nimport { OtherPlayer } from './OtherPlayer/OtherPlayer';\n\n\ninterface Props {\n  rendered: boolean\n}\n\nexport const GameOn: React.FC<Props> = ({ rendered }): JSX.Element => {\n\n  const dispatch = useDispatch();\n  // const [showSidebar, setShowSidebar] = useState(false);\n  const player = useSelector((state: RootState) => state.playerStateReducer)\n  const allRooms = useSelector((state: RootState) => state.allGamesStateReducer)\n\n  const getCards = () => {\n    state = store.getState().gameStateReducer\n    console.log(state, 'state from the gey cards button')\n    dispatch(DealCardsToNewPlayerAction({ player, state }))\n  }\n\n  const checkCards = (newstate: Gamestate) => {\n    for (let PLAYER of newstate.players) {\n      if (PLAYER.id === player.id) {\n        const p = PLAYER.cards;\n        const card = p[0];\n        if (!card) {\n\n          return true\n        }\n      }\n    }\n    return false;\n  };\n\n\n\n  let state = useSelector((state: RootState) => state.gameStateReducer)\n\n  return (\n    <div>\n      { (rendered && state.gameOn) &&\n        <div className=\"app-outer-wrapper\">\n          <div className=\"app-container\">\n            {/* <Map /> */}\n            {/* <GameBoard /> */}\n            <div className=\"sidebar-left\">\n              {(checkCards(state) === true) ?\n                <button\n                  style={{\n                    background: 'royalblue', \n                    padding: ' 15px 35px', \n                    fontSize: '1em', \n                    borderRadius: '20px', \n                    border: 'none', \n                    fontWeight: 'bold', \n                    color: 'white', \n                    margin: '15px auto',\n                    width: '100%'\n                  }}\n                  onClick={getCards}> GET CARDS </button>\n                :\n                <CardHand />\n              }\n              <PlayerPrompt state={state}/>\n            </div>\n            <div className=\"board-container\">\n              <div id=\"game-board\">\n                {/* <MapSVG className=\"map-svg\"/> */}\n                <SourceParent />\n              </div>\n              <SourceParent />\n              <SourceDeck />\n              <MisinformationDeck />\n              <MarkersStore />\n              {/* <ChaosMeterGrommet /> */}\n              <OtherPlayer />\n              {/* </Grommet> */}\n\n            </div>\n            <div className=\"sidebar right\">\n              <ChaosMeter />\n              <SpreadLevel />\n            </div>\n          </div>\n        </div>\n      }\n    </div >\n  )\n}","D:\\thesis\\Viral\\Viral\\client\\src\\components\\GameOver\\gameOver.tsx",[],"D:\\thesis\\Viral\\Viral\\client\\src\\components\\YouWon\\youWon.tsx",[],{"ruleId":"245","replacedBy":"246"},{"ruleId":"247","replacedBy":"248"},{"ruleId":"249","severity":1,"message":"250","line":7,"column":10,"nodeType":"251","messageId":"252","endLine":7,"endColumn":14},{"ruleId":"249","severity":1,"message":"253","line":2,"column":17,"nodeType":"251","messageId":"252","endLine":2,"endColumn":26},{"ruleId":"249","severity":1,"message":"254","line":5,"column":10,"nodeType":"251","messageId":"252","endLine":5,"endColumn":18},{"ruleId":"249","severity":1,"message":"255","line":6,"column":21,"nodeType":"251","messageId":"252","endLine":6,"endColumn":26},{"ruleId":"249","severity":1,"message":"256","line":7,"column":19,"nodeType":"251","messageId":"252","endLine":7,"endColumn":27},{"ruleId":"249","severity":1,"message":"257","line":8,"column":10,"nodeType":"251","messageId":"252","endLine":8,"endColumn":18},{"ruleId":"249","severity":1,"message":"258","line":13,"column":10,"nodeType":"251","messageId":"252","endLine":13,"endColumn":30},{"ruleId":"249","severity":1,"message":"259","line":13,"column":32,"nodeType":"251","messageId":"252","endLine":13,"endColumn":58},{"ruleId":"249","severity":1,"message":"260","line":14,"column":10,"nodeType":"251","messageId":"252","endLine":14,"endColumn":19},{"ruleId":"249","severity":1,"message":"261","line":45,"column":9,"nodeType":"251","messageId":"252","endLine":45,"endColumn":15},{"ruleId":"249","severity":1,"message":"262","line":3,"column":10,"nodeType":"251","messageId":"252","endLine":3,"endColumn":26},{"ruleId":"249","severity":1,"message":"263","line":1,"column":10,"nodeType":"251","messageId":"252","endLine":1,"endColumn":28},{"ruleId":"249","severity":1,"message":"264","line":5,"column":10,"nodeType":"251","messageId":"252","endLine":5,"endColumn":25},{"ruleId":"249","severity":1,"message":"265","line":6,"column":10,"nodeType":"251","messageId":"252","endLine":6,"endColumn":17},{"ruleId":"249","severity":1,"message":"266","line":1,"column":17,"nodeType":"251","messageId":"252","endLine":1,"endColumn":37},{"ruleId":"249","severity":1,"message":"267","line":1,"column":52,"nodeType":"251","messageId":"252","endLine":1,"endColumn":69},{"ruleId":"249","severity":1,"message":"258","line":4,"column":27,"nodeType":"251","messageId":"252","endLine":4,"endColumn":47},{"ruleId":"249","severity":1,"message":"259","line":4,"column":49,"nodeType":"251","messageId":"252","endLine":4,"endColumn":75},{"ruleId":"249","severity":1,"message":"268","line":4,"column":77,"nodeType":"251","messageId":"252","endLine":4,"endColumn":92},{"ruleId":"249","severity":1,"message":"269","line":4,"column":94,"nodeType":"251","messageId":"252","endLine":4,"endColumn":109},{"ruleId":"249","severity":1,"message":"255","line":6,"column":21,"nodeType":"251","messageId":"252","endLine":6,"endColumn":26},{"ruleId":"249","severity":1,"message":"270","line":7,"column":10,"nodeType":"251","messageId":"252","endLine":7,"endColumn":16},{"ruleId":"249","severity":1,"message":"265","line":8,"column":10,"nodeType":"251","messageId":"252","endLine":8,"endColumn":17},{"ruleId":"249","severity":1,"message":"271","line":46,"column":7,"nodeType":"251","messageId":"252","endLine":46,"endColumn":13},{"ruleId":"249","severity":1,"message":"272","line":47,"column":7,"nodeType":"251","messageId":"252","endLine":47,"endColumn":12},{"ruleId":"249","severity":1,"message":"273","line":3,"column":21,"nodeType":"251","messageId":"252","endLine":3,"endColumn":25},{"ruleId":"249","severity":1,"message":"274","line":3,"column":27,"nodeType":"251","messageId":"252","endLine":3,"endColumn":33},{"ruleId":"249","severity":1,"message":"270","line":3,"column":35,"nodeType":"251","messageId":"252","endLine":3,"endColumn":41},{"ruleId":"249","severity":1,"message":"275","line":3,"column":43,"nodeType":"251","messageId":"252","endLine":3,"endColumn":57},{"ruleId":"249","severity":1,"message":"276","line":3,"column":59,"nodeType":"251","messageId":"252","endLine":3,"endColumn":69},{"ruleId":"245","replacedBy":"277"},{"ruleId":"247","replacedBy":"278"},{"ruleId":"249","severity":1,"message":"279","line":2,"column":8,"nodeType":"251","messageId":"252","endLine":2,"endColumn":17},{"ruleId":"249","severity":1,"message":"280","line":6,"column":10,"nodeType":"251","messageId":"252","endLine":6,"endColumn":16},{"ruleId":"249","severity":1,"message":"281","line":1,"column":15,"nodeType":"251","messageId":"252","endLine":1,"endColumn":23},{"ruleId":"282","severity":1,"message":"283","line":17,"column":50,"nodeType":"284","messageId":"285","endLine":17,"endColumn":52},{"ruleId":"249","severity":1,"message":"286","line":5,"column":10,"nodeType":"251","messageId":"252","endLine":5,"endColumn":24},{"ruleId":"249","severity":1,"message":"287","line":6,"column":10,"nodeType":"251","messageId":"252","endLine":6,"endColumn":24},{"ruleId":"249","severity":1,"message":"288","line":21,"column":9,"nodeType":"251","messageId":"252","endLine":21,"endColumn":21},{"ruleId":"249","severity":1,"message":"289","line":11,"column":10,"nodeType":"251","messageId":"252","endLine":11,"endColumn":18},{"ruleId":"249","severity":1,"message":"290","line":138,"column":9,"nodeType":"251","messageId":"252","endLine":138,"endColumn":19},{"ruleId":"249","severity":1,"message":"291","line":144,"column":9,"nodeType":"251","messageId":"252","endLine":144,"endColumn":22},{"ruleId":"249","severity":1,"message":"292","line":159,"column":7,"nodeType":"251","messageId":"252","endLine":159,"endColumn":25},{"ruleId":"249","severity":1,"message":"293","line":4,"column":10,"nodeType":"251","messageId":"252","endLine":4,"endColumn":15},{"ruleId":"249","severity":1,"message":"294","line":4,"column":17,"nodeType":"251","messageId":"252","endLine":4,"endColumn":21},{"ruleId":"249","severity":1,"message":"295","line":6,"column":10,"nodeType":"251","messageId":"252","endLine":6,"endColumn":20},{"ruleId":"249","severity":1,"message":"296","line":7,"column":10,"nodeType":"251","messageId":"252","endLine":7,"endColumn":21},{"ruleId":"249","severity":1,"message":"273","line":3,"column":22,"nodeType":"251","messageId":"252","endLine":3,"endColumn":26},{"ruleId":"249","severity":1,"message":"274","line":3,"column":28,"nodeType":"251","messageId":"252","endLine":3,"endColumn":34},{"ruleId":"249","severity":1,"message":"270","line":3,"column":36,"nodeType":"251","messageId":"252","endLine":3,"endColumn":42},{"ruleId":"249","severity":1,"message":"275","line":3,"column":44,"nodeType":"251","messageId":"252","endLine":3,"endColumn":58},{"ruleId":"249","severity":1,"message":"276","line":3,"column":60,"nodeType":"251","messageId":"252","endLine":3,"endColumn":70},{"ruleId":"245","replacedBy":"297"},{"ruleId":"247","replacedBy":"298"},{"ruleId":"249","severity":1,"message":"299","line":5,"column":10,"nodeType":"251","messageId":"252","endLine":5,"endColumn":20},{"ruleId":"249","severity":1,"message":"300","line":6,"column":8,"nodeType":"251","messageId":"252","endLine":6,"endColumn":16},{"ruleId":"249","severity":1,"message":"301","line":27,"column":9,"nodeType":"251","messageId":"252","endLine":27,"endColumn":27},{"ruleId":"249","severity":1,"message":"302","line":29,"column":9,"nodeType":"251","messageId":"252","endLine":29,"endColumn":18},{"ruleId":"249","severity":1,"message":"303","line":37,"column":7,"nodeType":"251","messageId":"252","endLine":37,"endColumn":20},{"ruleId":"249","severity":1,"message":"304","line":41,"column":12,"nodeType":"251","messageId":"252","endLine":41,"endColumn":21},{"ruleId":"245","replacedBy":"305"},{"ruleId":"247","replacedBy":"306"},{"ruleId":"249","severity":1,"message":"253","line":2,"column":17,"nodeType":"251","messageId":"252","endLine":2,"endColumn":26},{"ruleId":"249","severity":1,"message":"281","line":2,"column":28,"nodeType":"251","messageId":"252","endLine":2,"endColumn":36},{"ruleId":"249","severity":1,"message":"254","line":5,"column":10,"nodeType":"251","messageId":"252","endLine":5,"endColumn":18},{"ruleId":"249","severity":1,"message":"307","line":7,"column":10,"nodeType":"251","messageId":"252","endLine":7,"endColumn":17},{"ruleId":"249","severity":1,"message":"256","line":7,"column":19,"nodeType":"251","messageId":"252","endLine":7,"endColumn":27},{"ruleId":"249","severity":1,"message":"308","line":7,"column":29,"nodeType":"251","messageId":"252","endLine":7,"endColumn":37},{"ruleId":"249","severity":1,"message":"257","line":8,"column":10,"nodeType":"251","messageId":"252","endLine":8,"endColumn":18},{"ruleId":"249","severity":1,"message":"309","line":9,"column":10,"nodeType":"251","messageId":"252","endLine":9,"endColumn":17},{"ruleId":"249","severity":1,"message":"299","line":10,"column":10,"nodeType":"251","messageId":"252","endLine":10,"endColumn":20},{"ruleId":"249","severity":1,"message":"310","line":19,"column":10,"nodeType":"251","messageId":"252","endLine":19,"endColumn":21},{"ruleId":"249","severity":1,"message":"258","line":20,"column":10,"nodeType":"251","messageId":"252","endLine":20,"endColumn":30},{"ruleId":"249","severity":1,"message":"268","line":20,"column":60,"nodeType":"251","messageId":"252","endLine":20,"endColumn":75},{"ruleId":"249","severity":1,"message":"270","line":21,"column":21,"nodeType":"251","messageId":"252","endLine":21,"endColumn":27},{"ruleId":"249","severity":1,"message":"311","line":22,"column":10,"nodeType":"251","messageId":"252","endLine":22,"endColumn":31},{"ruleId":"249","severity":1,"message":"312","line":35,"column":9,"nodeType":"251","messageId":"252","endLine":35,"endColumn":17},"no-native-reassign",["313"],"no-negated-in-lhs",["314"],"@typescript-eslint/no-unused-vars","'Play' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Provider' is defined but never used.","'store' is defined but never used.","'getGames' is defined but never used.","'CureDeck' is defined but never used.","'addPlayerToGameState' is defined but never used.","'DealCardsToNewPlayerAction' is defined but never used.","'Gamestate' is defined but never used.","'MapSVG' is assigned a value but never used.","'gameStateReducer' is defined but never used.","'ADD_PLAYER_TO_GAME' is defined but never used.","'addPlayerToGame' is defined but never used.","'Console' is defined but never used.","'ButtonHTMLAttributes' is defined but never used.","'DetailedHTMLProps' is defined but never used.","'StartGameAction' is defined but never used.","'updateGameState' is defined but never used.","'Player' is defined but never used.","'player' is assigned a value but never used.","'state' is assigned a value but never used.","'Card' is defined but never used.","'Source' is defined but never used.","'Misinformation' is defined but never used.","'Connection' is defined but never used.",["313"],["314"],"'PropTypes' is defined but never used.","'render' is defined but never used.","'useState' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'shareCardEvent' is defined but never used.","'ShareCardProps' is defined but never used.","'currentState' is assigned a value but never used.","'logOnOff' is defined but never used.","'renderIcon' is assigned a value but never used.","'renderAsLogOn' is assigned a value but never used.","'canDebunkClassName' is assigned a value but never used.","'Story' is defined but never used.","'Meta' is defined but never used.","'withDesign' is defined but never used.","'useSelector' is defined but never used.",["313"],["314"],"'SourceCard' is defined but never used.","'ReactDOM' is defined but never used.","'currentPlayerCards' is assigned a value but never used.","'gameState' is assigned a value but never used.","'subtitle' is defined but never used.","'openModal' is defined but never used.",["313"],["314"],"'getGame' is defined but never used.","'joinRoom' is defined but never used.","'getIcon' is defined but never used.","'NewGameMenu' is defined but never used.","'UpdateGameStateAction' is defined but never used.","'allRooms' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
