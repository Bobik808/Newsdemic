[{"D:\\thesis\\Viral\\Viral\\client\\src\\index.tsx":"1","D:\\thesis\\Viral\\Viral\\client\\src\\reportWebVitals.ts":"2","D:\\thesis\\Viral\\Viral\\client\\src\\App.tsx":"3","D:\\thesis\\Viral\\Viral\\client\\src\\logic\\connections.ts":"4","D:\\thesis\\Viral\\Viral\\client\\src\\socket-io-client\\socket-io-client.tsx":"5","D:\\thesis\\Viral\\Viral\\client\\src\\components\\StartGame.tsx":"6","D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\store.tsx":"7","D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\gameStateActions.ts":"8","D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\gameStateReducer.ts":"9","D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\playerReducer.ts":"10","D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\allGamesReducer.ts":"11","D:\\thesis\\Viral\\Viral\\client\\src\\components\\NewGameMenu\\NewGameMenu.tsx":"12","D:\\thesis\\Viral\\Viral\\client\\src\\components\\MarkersStore\\MarkersStore.tsx":"13","D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\reduxTypes.ts":"14","D:\\thesis\\Viral\\Viral\\client\\src\\logic\\actions.newState_CO.ts":"15","D:\\thesis\\Viral\\Viral\\client\\src\\logic\\actions.MW.ts":"16","D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\initialState.tsx":"17","D:\\thesis\\Viral\\Viral\\client\\src\\components\\sourceDeck\\sourceDeck.tsx":"18","D:\\thesis\\Viral\\Viral\\client\\src\\components\\MisinformationDeck\\misinformationDeck.tsx":"19","D:\\thesis\\Viral\\Viral\\client\\src\\components\\CardHand\\CardHand.tsx":"20","D:\\thesis\\Viral\\Viral\\client\\src\\components\\CureDeck\\CureDeck.tsx":"21","D:\\thesis\\Viral\\Viral\\client\\src\\components\\ChaosMeter\\ChaosMeter.tsx":"22","D:\\thesis\\Viral\\Viral\\client\\src\\components\\SpreadLevel\\SpreadLevel.tsx":"23","D:\\thesis\\Viral\\Viral\\client\\src\\components\\SourceParent\\SourceParent.tsx":"24","D:\\thesis\\Viral\\Viral\\client\\src\\components\\PlayerPrompt\\PlayerPrompt.tsx":"25","D:\\thesis\\Viral\\Viral\\client\\src\\components\\SourceCard\\SourceCard.tsx":"26","D:\\thesis\\Viral\\Viral\\client\\src\\components\\Source\\Source.tsx":"27","D:\\thesis\\Viral\\Viral\\client\\src\\helpers\\iconExporter.ts":"28","D:\\thesis\\Viral\\Viral\\client\\src\\helpers\\utils.ts":"29","D:\\thesis\\Viral\\Viral\\client\\src\\components\\PlayerPawn\\PlayerPawn.tsx":"30","D:\\thesis\\Viral\\Viral\\client\\src\\logic\\dummyState.REDO_CO.ts":"31","D:\\thesis\\Viral\\Viral\\client\\src\\components\\Source\\DebunkModal.tsx":"32","D:\\thesis\\Viral\\Viral\\client\\src\\types\\gameStateTypes.ts":"33","D:\\thesis\\Viral\\Viral\\client\\src\\components\\OtherPlayer\\OtherPlayer.tsx":"34","D:\\thesis\\Viral\\Viral\\client\\src\\components\\GameOn.tsx":"35","D:\\thesis\\Viral\\Viral\\client\\src\\components\\GameOver\\gameOver.tsx":"36","D:\\thesis\\Viral\\Viral\\client\\src\\components\\YouWon\\youWon.tsx":"37","D:\\thesis\\Viral\\Viral\\client\\src\\components\\InfoModal\\InfoModal.tsx":"38"},{"size":500,"mtime":1612871791381,"results":"39","hashOfConfig":"40"},{"size":425,"mtime":1612199487710,"results":"41","hashOfConfig":"40"},{"size":412,"mtime":1612985505690,"results":"42","hashOfConfig":"40"},{"size":3006,"mtime":1612970314857,"results":"43","hashOfConfig":"40"},{"size":1966,"mtime":1612954127241,"results":"44","hashOfConfig":"40"},{"size":2329,"mtime":1613030613945,"results":"45","hashOfConfig":"40"},{"size":917,"mtime":1612970314859,"results":"46","hashOfConfig":"40"},{"size":3115,"mtime":1612899328483,"results":"47","hashOfConfig":"40"},{"size":2839,"mtime":1612968347554,"results":"48","hashOfConfig":"40"},{"size":707,"mtime":1612870411289,"results":"49","hashOfConfig":"40"},{"size":369,"mtime":1612871914371,"results":"50","hashOfConfig":"40"},{"size":3660,"mtime":1612970314852,"results":"51","hashOfConfig":"40"},{"size":738,"mtime":1612862362153,"results":"52","hashOfConfig":"40"},{"size":3243,"mtime":1612899328484,"results":"53","hashOfConfig":"40"},{"size":21442,"mtime":1612987590458,"results":"54","hashOfConfig":"40"},{"size":10547,"mtime":1612983424773,"results":"55","hashOfConfig":"40"},{"size":1523,"mtime":1612779415808,"results":"56","hashOfConfig":"40"},{"size":349,"mtime":1612862362178,"results":"57","hashOfConfig":"40"},{"size":377,"mtime":1612862362154,"results":"58","hashOfConfig":"40"},{"size":960,"mtime":1612900166436,"results":"59","hashOfConfig":"40"},{"size":1888,"mtime":1612985602603,"results":"60","hashOfConfig":"40"},{"size":1619,"mtime":1612970314849,"results":"61","hashOfConfig":"40"},{"size":831,"mtime":1612983424771,"results":"62","hashOfConfig":"40"},{"size":943,"mtime":1612900610081,"results":"63","hashOfConfig":"40"},{"size":722,"mtime":1612968347548,"results":"64","hashOfConfig":"40"},{"size":1759,"mtime":1612871791378,"results":"65","hashOfConfig":"40"},{"size":6988,"mtime":1612983424769,"results":"66","hashOfConfig":"40"},{"size":5124,"mtime":1613032652520,"results":"67","hashOfConfig":"40"},{"size":556,"mtime":1612863569089,"results":"68","hashOfConfig":"40"},{"size":1233,"mtime":1612968265705,"results":"69","hashOfConfig":"40"},{"size":11513,"mtime":1612870970131,"results":"70","hashOfConfig":"40"},{"size":3972,"mtime":1612900610079,"results":"71","hashOfConfig":"40"},{"size":1761,"mtime":1612899328486,"results":"72","hashOfConfig":"40"},{"size":4903,"mtime":1612983424759,"results":"73","hashOfConfig":"40"},{"size":4590,"mtime":1613033921632,"results":"74","hashOfConfig":"40"},{"size":753,"mtime":1612984837669,"results":"75","hashOfConfig":"40"},{"size":149,"mtime":1612900019863,"results":"76","hashOfConfig":"40"},{"size":1447,"mtime":1613031818278,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"1kpgg80",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"80"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"80"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"80"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"80"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"80"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"80"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"80"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"80"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"80"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"80"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"80"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"80"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"80"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"155"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"80"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"80"},"D:\\thesis\\Viral\\Viral\\client\\src\\index.tsx",[],["173","174"],"D:\\thesis\\Viral\\Viral\\client\\src\\reportWebVitals.ts",[],"D:\\thesis\\Viral\\Viral\\client\\src\\App.tsx",["175"],"\nimport React from 'react';\n// import { Notification } from 'grommet-icons';\nimport './App.scss';\nimport './socket-io-client/socket-io-client';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/gameState/store';\n\nimport { StartGame } from './components/StartGame'\n\n\nfunction App() {\n  return (\n\n    <Provider store={store}>\n\n      <StartGame />\n    </Provider >\n\n  );\n}\n\nexport default App;\n","D:\\thesis\\Viral\\Viral\\client\\src\\logic\\connections.ts",[],"D:\\thesis\\Viral\\Viral\\client\\src\\socket-io-client\\socket-io-client.tsx",["176"],"//based on change of state \nimport io from \"socket.io-client\";\nimport * as dotenv from 'dotenv';\nimport { store } from '../redux/gameState/store'\nimport { GetAllGamesAction, updateGameState } from \"../redux/gameState/gameStateActions\";\nimport { Gamestate } from \"../types/gameStateTypes\";\nimport { Play } from \"grommet-icons\";\ndotenv.config({ path: __dirname + '../.env' });\nconst socket = io(process.env.SERVER_URL || 'http://localhost:3002');\n\n\nconst Player = store.getState().playerStateReducer\n\n// on click - 'start game' \nexport const joinRoom = (player: typeof Player) => {\n  socket.emit('joinRoom', player);\n}\n\n// Message from server // welcome component \nsocket.on('joinConfirmation', (message: string) => {\n  console.log(message); // display message to the screen \n\n});\n\n//subscripion to any game state changes \n\nstore.subscribe(() => {\n  const newState = store.getState().gameStateReducer\n  const Player = store.getState().playerStateReducer\n  // console.log(newState, 'NEW STATE FROM SUBSCRIBE ')\n  // console.log(Player, 'PLAYER')\n  if (!newState.received && Player && newState.gameOn) {\n    socket.emit('onChangeState', { newState, Player })\n  }\n})\n\n// const addPlayer = (player: typeof Player) => {\n//   socket.emit('addPlayerToGame', player)\n// }\n\n\n//data coming from backend after game state changed\nsocket.on('updatedState', (newState: Gamestate) => {\n  console.log('newstate from client ', newState)\n  newState.received = true;\n  store.dispatch(updateGameState(newState))\n})\n\nexport const getGame = (player: typeof Player) => {\n  // console.log(player, 'PLAYER ON GET GAME - WILL BE ADDED HERE')\n  player && socket.emit('retriveGame', player)\n\n}\n\nexport const getGames = () => {\n  socket.emit('getGames')\n  socket.on('games', (\n    (data: string[]) => {\n      store.dispatch(GetAllGamesAction(data))\n    }\n  ))\n}\ngetGames();\n\n\n\n// how to we tell the users \nsocket.on('userLeft', (message: string) => console.log(message)) // need a end game button ","D:\\thesis\\Viral\\Viral\\client\\src\\components\\StartGame.tsx",["177","178","179","180","181","182","183","184","185"],"D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\store.tsx",[],"D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\gameStateActions.ts",["186"],"import { ClearmisinfoProps, CLEAR_MISINFO, DebunkMisinfoProps, DEBUNK_MISINFO, discardCardProps, DISCARD_ACTION, logOnOffProps, LOG_ON_OFF, MoveActionProps, MOVE_ACTION, ShareCardProps, SHARE_CARD, UPDATE_GAME_STATE, GameStateActionTypes, PlayerStateActionTypes, ADD_PLAYER, GET_ALL_GAMES, AllGamesActionTypes, START_GAME, ADD_PLAYER_TO_GAME, DEAL_CARDS, dealCardsProp } from './reduxTypes';\nimport { Gamestate, Player, } from '../../types/gameStateTypes'\nimport { gameStateReducer } from './gameStateReducer';\n//Below are example of actions with typescript.\n// we need to create an action for each reduced case\n\n\nexport function moveAction(props: MoveActionProps): GameStateActionTypes {\n  const { oldState, currentPlayerID, location } = props\n  return {\n    type: MOVE_ACTION,\n    payload: { oldState, currentPlayerID, location }\n  }\n}\n\n\n\nexport function clearMisinfoAction(props: ClearmisinfoProps): GameStateActionTypes {\n  const { oldState, currentPlayerID, location, misinfoType } = props;\n  return {\n    type: CLEAR_MISINFO,\n    payload: { oldState, currentPlayerID, location, misinfoType }\n  }\n}\n\n\nexport function shareCardAction(props: ShareCardProps): GameStateActionTypes {\n  const { oldState, currentPlayerID, recipient, sharedCard } = props;\n  return {\n    type: SHARE_CARD,\n    payload: { oldState, currentPlayerID, recipient, sharedCard }\n  }\n}\n\nexport function logOnOffAction(props: logOnOffProps): GameStateActionTypes {\n  const { oldState, currentPlayerID, location, usedCard } = props;\n  return {\n    type: LOG_ON_OFF,\n    payload: { oldState, currentPlayerID, location, usedCard }\n  }\n}\nexport function debunkMisinfoAction(props: DebunkMisinfoProps): GameStateActionTypes {\n  const { oldState, currentPlayerID, usedCards, misinfoType } = props;\n  return {\n    type: DEBUNK_MISINFO,\n    payload: { oldState, currentPlayerID, usedCards, misinfoType }\n  }\n}\n\nexport function discardCardAction(props: discardCardProps): GameStateActionTypes {\n  const { oldState, currentPlayerID, discardedCard } = props;\n  return {\n    type: DISCARD_ACTION,\n    payload: { oldState, currentPlayerID, discardedCard }\n  }\n}\n//redux action to update whole gameState // examples\nexport function updateGameState(gameState: Gamestate): GameStateActionTypes {\n  return {\n    type: UPDATE_GAME_STATE,\n    payload: gameState\n  }\n}\n\nexport function AddPlayerAction(name: string, color: string, room: string): PlayerStateActionTypes {\n  return {\n    type: ADD_PLAYER,\n    payload: { name, color, room }\n  }\n}\n\nexport function GetAllGamesAction(array: string[]): AllGamesActionTypes {\n  return {\n    type: GET_ALL_GAMES,\n    payload: array\n  }\n}\n\n\nexport function StartGameAction(players: Player[]): GameStateActionTypes {\n  return {\n    type: START_GAME,\n    payload: players\n  }\n}\n\nexport function addPlayerToGameState(player: Player): GameStateActionTypes {\n  return {\n    type: ADD_PLAYER_TO_GAME,\n    payload: { player }\n  }\n}\n\n\nexport function DealCardsToNewPlayerAction(props: dealCardsProp): GameStateActionTypes {\n  const { player, state } = props;\n  return {\n    type: DEAL_CARDS,\n    payload: { player, state }\n  }\n}","D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\gameStateReducer.ts",["187","188"],"import { ADD_PLAYER_TO_GAME, CLEAR_MISINFO, DEAL_CARDS, DEBUNK_MISINFO, DISCARD_ACTION, GameStateActionTypes, LOG_ON_OFF, MOVE_ACTION, SHARE_CARD, START_GAME, UPDATE_GAME_STATE } from './reduxTypes';\nimport { initialState } from './initialState'\nimport { Gamestate } from '../../types/gameStateTypes'\nimport { clearMisinfo, debunkMisinfo, discardCard, logOnOff, moveAction, shareCard } from '../../logic/actions.newState_CO'\nimport {dealCardsToNewPlayer, setUp } from '../../logic/actions.MW';\nimport { Console } from 'console';\n//here should be a initial State of the Game\nconst GameState: Gamestate = initialState;\n// const GameState: Gamestate = gameState;\n\nexport function gameStateReducer(\n  state = GameState,\n  action: GameStateActionTypes\n): Gamestate {\n  switch (action.type) {\n    case MOVE_ACTION: {\n      const ap = action.payload;\n      const newstate = moveAction(ap.oldState, ap.currentPlayerID, ap.location)\n      return { ...state, ...newstate, received: false };\n    }\n    case CLEAR_MISINFO: {\n      const ap = action.payload;\n      // return {...clearMisinfo(ap.oldState, ap.currentPlayerID, ap.misinfoType, ap.location),  ...state, received: false }}\n      const newState = { ...state, received: false }\n      return { ...newState, ...clearMisinfo(ap.oldState, ap.currentPlayerID, ap.misinfoType, ap.location) }\n    }\n\n    case SHARE_CARD: {\n      const ap = action.payload;\n      const newstate = shareCard(ap.oldState, ap.currentPlayerID, ap.recipient, ap.sharedCard)\n      return { ...state, ...newstate, received: false };\n    }\n    case LOG_ON_OFF: {\n      const ap = action.payload;\n      const newstate = logOnOff(ap.oldState, ap.currentPlayerID, ap.location, ap.usedCard)\n      return { ...state, ...newstate, received: false };\n    }\n    case DEBUNK_MISINFO: {\n      const ap = action.payload;\n      const newstate = debunkMisinfo(ap.oldState, ap.currentPlayerID, ap.usedCards, ap.misinfoType)\n      return { ...state, ...newstate, received: false };\n    }\n    case DISCARD_ACTION: {\n      const ap = action.payload;\n      const newstate = discardCard(ap.oldState, ap.currentPlayerID, ap.discardedCard)\n      return { ...state, ...newstate, received: false };\n    }\n\n    case UPDATE_GAME_STATE:\n      return {\n        ...state, ...action.payload\n      }\n\n    case DEAL_CARDS: {\n      const ap = action.payload;\n      const newstate = dealCardsToNewPlayer(ap.player, ap.state)\n      console.log(\n        'reducer - deal cards', newstate\n      )\n      return { ...newstate, received: false }\n    }\n    case START_GAME: {\n      const initialState = setUp(action.payload)\n      // console.log('it gets here - START GAME REDUCER')\n      const obj = { ...state, ...initialState, gameOn: true, received: false }\n      // console.log('obj - AFTER UPDATE', obj)\n      return obj\n\n    }\n    default: return state\n  }\n}\n","D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\playerReducer.ts",[],"D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\allGamesReducer.ts",[],"D:\\thesis\\Viral\\Viral\\client\\src\\components\\NewGameMenu\\NewGameMenu.tsx",["189","190","191","192","193","194","195","196","197","198","199"],"import React, { ButtonHTMLAttributes, ChangeEvent, DetailedHTMLProps, useState } from 'react';\nimport './NewGameMenu.scss';\n// import { startGameEvent, addPlayerEvent } from '../../logic/event.listeners'\nimport { AddPlayerAction, addPlayerToGameState, DealCardsToNewPlayerAction, StartGameAction, updateGameState } from '../../redux/gameState/gameStateActions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState, store } from '../../redux/gameState/store';\nimport { Player } from '../../types/gameStateTypes';\nimport { Console } from 'console';\nimport { getIcon } from '../../helpers/iconExporter'\n\n\nexport const NewGameMenu: React.FC = () => {\n\n  const FirePawn = getIcon('firePawn');\n  const HexagonPawn = getIcon('hexagonPlayerPawn');\n  const FlowerPawn = getIcon('flowerPawn');\n  const RombPawn = getIcon('rombPawn')\n  const SunPawn = getIcon('sunPawn')\n  const SquarePawn = getIcon('squarePawn')\n\n  function handleChange(event: ChangeEvent<HTMLInputElement>): void {\n    event.preventDefault()\n    if (event.target) {\n      updateInput(state => ({\n        ...state,\n        [event.target.name]: event.target.value\n      }))\n    }\n\n  }\n  const [input, updateInput] = useState({ name: '', color: '', room: '' })\n  const dispatch = useDispatch();\n\n\n  const handleSelect = (color: string) => {\n    let selectedPawn: string = 'none';\n    selectedPawn = color === input.color ? 'none' : color;\n\n    updateInput(state => ({\n      ...state,\n      color: selectedPawn\n    }))\n\n  }\n\n  let player = useSelector((state: RootState) => state.playerStateReducer)\n  let state = useSelector((state: RootState) => state.gameStateReducer)\n\n  const addPlayer = (event: React.MouseEvent<HTMLElement>) => {\n    event.preventDefault()\n    dispatch(AddPlayerAction(input.name, input.color, input.room))\n  }\n\n\n  return (\n    <form className='form' >\n      <div className='menu-container'>\n        <div className='title-container'>\n          <h3 style={{ color: 'royalblue' }}>Welcome</h3>\n        </div>\n        <input\n          type='text'\n          name='name'\n          value={input.name}\n          placeholder='Player name '\n          onChange={handleChange}\n        ></input>\n\n\n        <input\n          type='text'\n          name='room'\n          value={input.room}\n          placeholder='Room '\n          onChange={handleChange}\n\n        ></input>\n        <div className='colors-container' >\n          <FirePawn id=\"icon\"\n            style={{ border: input.color === 'orange' ? '2px solid orange' : 'none' }}\n            onClick={() => handleSelect('orange')}\n          />\n\n          <HexagonPawn id=\"icon\"\n            style={{ border: (input.color === 'green') ? ' 2px solid green' : 'none' }}\n            onClick={() => handleSelect('green')}\n          />\n\n          <FlowerPawn id=\"icon\"\n            style={{ border: (input.color === 'pink') ? '2px solid pink' : 'none' }}\n            onClick={() => handleSelect('pink')}\n          />\n\n          <RombPawn id=\"icon\"\n            style={{ border: (input.color === 'blue') ? ' 2px solid blue' : 'none' }}\n            onClick={() => handleSelect('blue')}\n          />\n          <SunPawn id='icon'\n            onClick={() => handleSelect('yellow')}\n            style={{ border: (input.color === 'yellow') ? '2px solid yellow' : 'none' }}\n          />\n\n          <SquarePawn id=\"icon\"\n            onClick={() => handleSelect('red')}\n            style={{ border: (input.color === 'red') ? '2px solid red' : 'none' }}\n          />\n        </div>\n\n        <button className='start_game_button' type='submit' onClick={addPlayer} >\n          Play\n        </button>\n      </div >\n    </form >\n  );\n};","D:\\thesis\\Viral\\Viral\\client\\src\\components\\MarkersStore\\MarkersStore.tsx",[],"D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\reduxTypes.ts",[],"D:\\thesis\\Viral\\Viral\\client\\src\\logic\\actions.newState_CO.ts",["200","201","202"],"import { Gamestate, Card,ViralCard, Source, Player, Misinformation } from '../types/gameStateTypes'\nimport { didWin,typeCheck } from './actions.MW'\nimport { connections as sources } from './connections'\nimport React,{useState} from 'react';\n\nexport const messages:string[]=[]\n//* START THE GAME\n//? called when start button pressed, after game initialised and player order set\n\nexport function startGame(oldState: Gamestate) {\n  const currentPlayerID: Player['id'] = oldState.players[0].id;\n  let playerName:string=oldState.players.filter(player=>player.id===currentPlayerID)[0].name\n  if(messages.length===0){messages.push(`Welcome ${playerName}! Time to travel around the map cleaning up misinformation around town. Good Luck!`)}\n  \n  return updatePossibleActions(oldState, currentPlayerID);\n}\n\n//* ACTIONS\n\nexport function moveAction(oldState: Gamestate, currentPlayerID: Player['id'], location: Source['name']): Gamestate {\n  const newState: Gamestate =\n  {\n    ...oldState,\n    players: oldState.players\n      .map((player) => player.id === currentPlayerID ?\n        { ...player, currentSource: location } :\n        player\n      ),\n    turnMovesLeft: oldState.turnMovesLeft - 1,\n  };\n\n  let playerName:string=oldState.players.filter(player=>player.id===currentPlayerID)[0].name\n\n  messages.push(`${playerName} moved to \"${location}\"`) \n  messages.push(`${playerName} has ${newState.turnMovesLeft} moves left`)\n  return nextMoveChecker(newState, currentPlayerID);\n}\n\n\nexport function clearMisinfo(oldState: Gamestate, currentPlayerID: Player['id'], misinfoType: Misinformation['name'], location: Source['name']): Gamestate {\n  const sourceIndex: number = oldState.sources.map((source) => source.name).indexOf(location);\n  console.log('old state in clearmisinfo', oldState)\n  let noOfMarkers: number = 1;\n  if (oldState.misinformation[misinfoType].debunked) {\n    noOfMarkers = oldState.sources[sourceIndex][`markers_${misinfoType}`]\n  };\n  const newState: Gamestate =\n  {\n    ...oldState,\n    sources: oldState.sources\n      .map((source) => source.name === location ?\n        { ...source, [`markers_${misinfoType}`]: source[`markers_${misinfoType}`] - noOfMarkers } :\n        source\n      ), \n    misinformation: {\n      ...oldState.misinformation,\n      [misinfoType]: {\n        ...oldState.misinformation[misinfoType],\n        markersLeft: oldState.misinformation[misinfoType].markersLeft - noOfMarkers\n      }\n    },\n    turnMovesLeft: oldState.turnMovesLeft - 1,\n  };\n\n  let playerName:string=oldState.players.filter(player=>player.id===currentPlayerID)[0].name\n\n  messages.push(`${playerName} cleared ${noOfMarkers} bit of ${misinfoType} misinformation from ${location}`)\n  messages.push(`${playerName} has ${newState.turnMovesLeft} moves left`)\n\n  console.log('player cleared', noOfMarkers, misinfoType);\n  //console.log(`%c player cleared ${noOfMarkers} ${misinfoType} markers`,`background-color: lightsalmon; color: green; padding: 10px`);\n  //console.log(`%c there are ${newState.turnMovesLeft} moves left`,`background-color: lightpink; color: black; padding: 10px`);\n  return nextMoveChecker(newState, currentPlayerID);\n}\n\n\nexport function shareCard(oldState: Gamestate, currentPlayerID: Player['id'], recipient: Player['id'], sharedCard: Card['sourceName']): Gamestate {\n  \n  const playerIndex = oldState.players\n    .map((player) => player.id)\n    .indexOf(currentPlayerID);\n  const cardMisinfoValue = oldState.players[playerIndex].cards\n    .filter((card) => card.sourceName === sharedCard)[0].misinfoType;\n  \n  \n  const newState: Gamestate =\n  {\n    ...oldState,\n    players: oldState.players\n      .map((player) => player.id === currentPlayerID ?\n        {\n          ...player,\n          cards: player.cards.filter((card) => card.sourceName !== sharedCard)\n        } :\n        player.id === recipient ?\n          {\n            ...player,\n            cards: [...player.cards, {\n              cardType: 'connection',\n              sourceName: sharedCard,\n              misinfoType: cardMisinfoValue\n            }],\n          } :\n          player\n      ),\n    turnMovesLeft: oldState.turnMovesLeft - 1,\n  };\n  console.log('player shared', sharedCard, 'with player', recipient);\n  console.log(`%c there are ${newState.turnMovesLeft} moves left`,`background-color: lightpink; color: black; padding: 10px`);\n  return nextMoveChecker(newState, currentPlayerID);\n}\n\n\nexport function logOnOff(oldState: Gamestate, currentPlayerID: Player['id'], location: Source['name'], usedCard: Card['sourceName']): Gamestate {\n  const newState: Gamestate =\n  {\n    ...oldState,\n    players: oldState.players\n      .map((player) => player.id === currentPlayerID ?\n        {\n          ...player,\n          currentSource: location,\n          cards: player.cards.filter((card) => card.sourceName !== usedCard)\n        } :\n        player\n      ),\n    turnMovesLeft: oldState.turnMovesLeft - 1,\n  };\n\n  let playerName:string=oldState.players.filter(player=>player.id===currentPlayerID)[0].name\n  messages.push(`${playerName} fast traveled to \"${location}\" using their \"${usedCard}\" card`)\n  messages.push(`${playerName} has ${newState.turnMovesLeft} moves left`)\n  //console.log(`%c player flew to ${location} using the ${usedCard} card`,`background-color: cyan; color: black; padding: 10px`);\n  //console.log(`%c there are ${newState.turnMovesLeft} moves left`,`background-color: lightpink; color: black; padding: 10px`);\n  return nextMoveChecker(newState, currentPlayerID);\n}\n\n\nexport function debunkMisinfo(oldState: Gamestate, currentPlayerID: Player['id'], usedCards: Card['sourceName'][], misinfoType: Misinformation['name']): Gamestate {\n  const newState: Gamestate =\n  {\n    ...oldState,\n    players: oldState.players\n      .map((player) => player.id === currentPlayerID ?\n        {\n          ...player,\n          cards: player.cards.filter((card) => !usedCards.includes(card.sourceName))\n        } :\n        player\n      ),\n    misinformation: {\n      ...oldState.misinformation,\n      [misinfoType]: {\n        ...oldState.misinformation[misinfoType],\n        debunked: true,\n      }\n    },\n    turnMovesLeft: oldState.turnMovesLeft - 1,\n  };\n  if (didWin(newState)) {\n    console.log(`%c CONGRATULATIONS! You debunked all the misinformation in the world and won. Good for you.`,`background-color: chartreuse; color: indianred; padding: 10px; font-weight: bold`);\n    return {\n      ...newState,\n      gameWon: true,\n    }\n  } else {\n    console.log('player debunked', misinfoType);\n    console.log(`%c there are ${newState.turnMovesLeft} moves left`,`background-color: lightpink; color: black; padding: 10px`);\n    return nextMoveChecker(newState, currentPlayerID)\n  }\n}\n\n\n//* TURN\n\nexport function updatePossibleActions(oldState: Gamestate, currentPlayerID: Player['id']): Gamestate {\n  //* settup\n  const playerIndex: number = oldState.players.map((player) => player.id).indexOf(currentPlayerID);\n  const location: Player['currentSource'] = oldState.players[playerIndex].currentSource;\n  const sourceIndex: number = oldState.sources.map((source) => source.name).indexOf(location);\n  //* move check\n  const adjacents: string[] = sources.filter((source) => source.name === location)[0].connections;\n  //* clear checks\n  const clearCommunityMisinfo: boolean = oldState.sources[sourceIndex].markers_community > 0;\n  const clearSocialMisinfo: boolean = oldState.sources[sourceIndex].markers_social > 0;\n  const clearRelationsMisinfo: boolean = oldState.sources[sourceIndex].markers_relations > 0;\n  //* share checks\n  // check if cards in hand\n  let possibleShares: Player[] = [];\n  if (oldState.players[playerIndex].cards.length > 0) {\n    // check if another player is there\n    const otherPlayers: Player[] = oldState\n      .players\n      .filter((player) => player.id !== currentPlayerID)\n      .filter((otherPlayer) => otherPlayer.currentSource === location);\n    // check players have space in their hand\n    possibleShares = otherPlayers\n      .filter((player) => player.cards.length < 6)\n  }\n  //* logoff checks\n  // check hand contains current location card\n  const logoffPossible: boolean = oldState.players[playerIndex].cards\n    .filter((card) => card.sourceName === location)\n    .length > 0;\n  //* logon check\n  // check hand contains other location card\n  const logonPossible: Card['sourceName'][] = oldState.players[playerIndex].cards\n    .map((card) => card.sourceName)\n    .filter((name) => name !== location);\n  //* debunk checks\n  // check if we are at home (debunk 1/2)\n  const atHome: boolean = location === 'crazy dave';\n  // check hand contains 4 of any misinfo type/area (debunk 2/2)\n  const debunkable: Misinformation['name'][] = []\n  if (atHome) {\n    if (\n      oldState.players[playerIndex].cards\n        .filter((card) => card.misinfoType === 'community')\n        .length >= 4) {\n      debunkable.push('community')\n    };\n    if (\n      oldState.players[playerIndex].cards\n        .filter((card) => card.misinfoType === 'social')\n        .length >= 4) {\n      debunkable.push('social')\n    };\n    if (\n      oldState.players[playerIndex].cards\n        .filter((card) => card.misinfoType === 'relations')\n        .length >= 4) {\n      debunkable.push('relations')\n    };\n  };\n  //* UPDATE ENTIRE STATE WITH ALL ABOVE CHANGES\n  const newState: Gamestate =\n  {\n    ...oldState,\n    sources: oldState.sources\n      .map((source) => source.name === location ?\n        {\n          ...source,\n          canMove: false,\n          canLogOn: false,\n          canLogOff: false,\n          canClearCommunity: clearCommunityMisinfo,\n          canClearSocial: clearSocialMisinfo,\n          canClearRelations: clearRelationsMisinfo,\n          canShare: possibleShares,\n          canDebunk: debunkable,\n        } :\n        {\n          ...source,\n          canMove: adjacents.includes(source.name),\n          canLogOn: logonPossible.includes(source.name) && !adjacents.includes(source.name),\n          canLogOff: logoffPossible && !adjacents.includes(source.name),\n          canClearCommunity: false,\n          canClearSocial: false,\n          canClearRelations: false,\n          canShare: [],\n          canDebunk: [],\n        }\n      ),\n  };\n  return newState;\n}\n\n\nexport function boardActions(oldState: Gamestate, currentPlayerID: Player['id'], noOfCards: number): Gamestate {\n  // deal connection cards\n  const playerIndex = oldState.players\n    .map((player) => player.id)\n    .indexOf(currentPlayerID);\n  let cardsLeft = noOfCards;\n  \n  let newState: Gamestate = oldState;\n  while (cardsLeft > 0) {\n    newState = dealConnectionCard(oldState);\n    // check here for losing\n    if (didLose(newState)){\n      \n      // console.log(`%c there are no more cards in the deck, so...`,`color: darkred; padding:10px`);\n      // console.log(`%c ...You Lose!`,`background-color: darkred; color: mintcream; font-weight: bold; padding:10px`);\n      // console.log(`%c SETTING UP NEW GAME...`,`background-color: mediumspringgreen; color: navy; font-weight: bold; padding:10px`);\n      //setUp(newState.players);\n    }\n    // if (newState.players[playerIndex].cards.length > 6) {\n    //   console.log('your hand is full, you need to discard a card');\n    //   return {\n    //     ...newState,\n    //     players: newState.players\n    //       .map((player) => player.id === currentPlayerID ?\n    //         { ...player, cardHandOverflow: true } :\n    //         player\n    //       ),\n    //     dealHistory: cardsLeft - 1,\n    //   } // exits function here\n    // }\n    cardsLeft--;\n  }\n  //? do we need to put breaks here, and how, for the front end to update or show when a card has been dealt?\n  // check spread marker for weight\n  // deal misinfo cards\n  let misinfoCardNo = [2, 2, 3, 4][newState.spreadLevel];\n  while (misinfoCardNo > 0) {\n    newState = dealMisinfoCard(newState, 1, false)!\n    // check if lose (run out of misinfo)\n    if (didLose(newState)){\n      // console.log(`%c there are no more misinfo cards in the deck, so...`,`color: darkred; padding:10px`);\n      // console.log(`%c ...You Lose!`,`background-color: darkred; color: mintcream; font-weight: bold; padding:10px`);\n      // console.log(`%c SETTING UP NEW GAME...`,`background-color: mediumspringgreen; color: navy; font-weight: bold; padding:10px`);\n      //setUp(newState.players);\n    }\n    misinfoCardNo--\n  }\n  //change current player turn\n  //? anything else needs resetting?\n  return nextTurn(newState, currentPlayerID)\n}\n\n//* HELPERS\n\nexport function nextTurn(oldState: Gamestate, currentPlayerID: Player['id']): Gamestate {\n  if(oldState.players.length>1){\n  const playerIndex: number = oldState.players.map((player) => player.id).indexOf(currentPlayerID);\n  const nextPlayerIndex: number = playerIndex === oldState.players.length - 1 ?\n    0 :\n    playerIndex + 1;\n  const newState: Gamestate =\n  {\n    ...oldState,\n    players: oldState.players\n      .map((player, index) => index === playerIndex ?\n        { ...player, isCurrent: false } :\n        index === nextPlayerIndex ?\n          { ...player, isCurrent: true } :\n          player\n      ),\n    // reset number of moves\n    turnMovesLeft: 4,\n  };console.log(`%c NEXT PLAYERS TURN`,`background-color: lightgreen; color: black; padding: 10px`);\n  console.log(nextPlayerIndex)\n  console.log(oldState.players)\n  messages.push(`Now it's over to ${oldState.players[nextPlayerIndex].name}!`)\n  return updatePossibleActions(newState, newState.players[nextPlayerIndex].id)\n}\n  const newState= {\n    ...oldState,\n    turnMovesLeft: 4,\n  };\n  return updatePossibleActions(newState,currentPlayerID)\n}\n\n\n// export function dealConnectionCard(oldState: Gamestate, currentPlayerID: Player['id']): Gamestate {\n//   //* if no cards left then game is lost\n//   if (oldState.connectionDeck.length === 0) {\n//     console.log('no more connections... you lost!');\n//     return {\n//       ...oldState,\n//       gameLost: true\n//     }\n//   }\n//   const newCard: Card|ViralCard = oldState.connectionDeck[0]\n//   console.log('NEWCARD' , newCard)\n//   if (viralCheck(newCard)) {\n//     //? does viral function remove card? should it be returned? should it also break for game checks?\n//     console.log('you drew a viral card!');\n//     return playViralCard(oldState)\n//   }\n//   else {\n//     const newState: Gamestate =\n//     {\n//       ...oldState,\n//       players: oldState.players\n//         .map((player) => player.id === currentPlayerID ?\n//           {\n//             ...player,\n//             cards: [...player.cards, newCard],\n//           } :\n//           player\n//         ),\n//       connectionDeck: oldState.connectionDeck.slice(1)\n//     };\n//     console.log('player was dealt a', newCard, 'connection card');\n//     return newState;\n//   }\n// }\n\n\nexport function nextMoveChecker(oldState: Gamestate, currentPlayerID: Player['id']): Gamestate {\n  if (oldState.turnMovesLeft > 0) {\n    return updatePossibleActions(oldState, currentPlayerID)\n  } else {\n    \n    return boardActions(oldState, currentPlayerID, 2)\n  }\n}\n\n\n// called when player has chosen to discard card from hand, when cardHandOverflow === true\nexport function discardCard(oldState: Gamestate, currentPlayerID: Player['id'], discardedCard: Card['sourceName']): Gamestate {\n  const newState: Gamestate =\n  {\n    ...oldState,\n    players: oldState.players\n      .map((player) => player.id === currentPlayerID ?\n        {\n          ...player,\n          cards: player.cards.filter((card) => card.sourceName !== discardedCard),\n          cardHandOverflow: false,\n        } :\n        player\n      ),\n  };\n  //? calling boardActions with newState.dealHistory will decrement the amount of connection cards to be dealt, allowing the function to continue where it left off\n  return boardActions(newState, currentPlayerID, newState.dealHistory)\n}\n\n\nexport function outbreak(outbreak_source: Source, oldState: Gamestate) {\n  let playerName:string=oldState.players.filter(player=>player.isCurrent)[0].name\n  oldState.chaosMeter++\n  messages.push(`Oh no ${playerName}! We've had an outbreak at ${outbreak_source.name}!! Chaos meter increases to ${oldState.chaosMeter*25}%`)\n  // check if lose (chaos meter )\n  if (didLose(oldState)){\n    \n    //console.log(`%c Chaos reigns!, the chaos meter is too high, so...`,`color: darkred; padding:10px`);\n    //console.log(`%c ...You Lose!`,`background-color: darkred; color: mintcream; font-weight: bold; padding:10px`);\n    //console.log(`%c SETTING UP NEW GAME...`,`background-color: mediumspringgreen; color: navy; font-weight: bold; padding:10px`);\n    //setUp(oldState.players);\n  }\n  let connections!: string[];\n  for (const source of sources) {\n    if (source.name === outbreak_source.name) {\n      connections = source.connections  //* set list of connections to spread to\n    }\n  }\n  for (const connection of connections) {\n    for (const source of oldState.sources) {\n      if (source.name === connection) {\n        let key = outbreak_source.misinfoType\n        if (typeCheck(key))\n          if (source[key] === 3) {\n            oldState = outbreak(source, oldState)\n          }\n          else {\n            source[key]++\n            // check if lose (no more misinfo)\n            if (didLose(oldState)){\n          \n              //console.log(`%c all the misinfo markers are gone, so...`,`color: darkred; padding:10px`);\n              //console.log(`%c ...You Lose!`,`background-color: darkred; color: mintcream; font-weight: bold; padding:10px`);\n              //console.log(`%c SETTING UP NEW GAME...`,`background-color: mediumspringgreen; color: navy; font-weight: bold; padding:10px`);\n              //setUp(oldState.players);\n            }\n          }\n\n      }\n    }\n  }\n  let newState = { ...oldState }\n  return newState\n}\n\nexport function viralCheck(object: any): object is ViralCard {\n  return false\n}\n\nexport function dealConnectionCard(oldState: Gamestate) {\n  let newCard: Card|ViralCard = oldState.connectionDeck[0]\n  \n  if (newCard.cardType==='viral') {\n    //console.log(`%c IT'S GONE VIRAL!`,`background-color: red; color: black; padding: 10px; font-weight: bold`);\n    oldState = playViralCard(oldState)\n    oldState.connectionDeck.shift()\n  }\n  else {\n    for (const player of oldState.players) {\n      if (player.isCurrent) {\n        if (!viralCheck(newCard)) {\n          player.cards.push(newCard)\n          oldState.connectionDeck.shift()\n        }\n      }\n    }\n  }\n\n  // console.log(oldState.players)\n  let newState = { ...oldState }\n  return newState\n}\n\nexport function playViralCard(oldState: Gamestate) {\n  oldState = dealMisinfoCard(oldState, 3, true)!\n  oldState.spreadLevel++\n  oldState.misinformationDeckActive = [...shuffle(oldState.misinformationDeckPassive), ...oldState.misinformationDeckActive]\n  oldState.misinformationDeckPassive=[]\n  let newState = { ...oldState }\n  console.log(newState)\n  return newState\n}\n\nexport function shuffle(array: any[]) {\n  let currentIndex = array.length\n  let tempValue\n  let randomIndex\n\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1\n    tempValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = tempValue\n  }\n  return array;\n}\n\nexport function didLose(state: Gamestate) {\n\n  let playerName:string=state.players.filter(player=>player.isCurrent)[0].name\n  if (state.chaosMeter === 4){\n    messages.push(`Oh no ${playerName},Chaos reigns!, the chaos meter is too high, so it's Game Over`)\n    state.gameLost=true\n    //!UPDATE STATE\n    return true}\n  if (\n    state.misinformation.community.markersLeft === 0 ||\n    state.misinformation.social.markersLeft === 0 ||\n    state.misinformation.relations.markersLeft === 0\n  ){\n    messages.push(`Oh no ${playerName}! All your markers are gone, so it's Game Over`)\n    state.gameLost=true\n    //!UPDATE STATE\n    return true}\n  if (state.connectionDeck.length === 0) {\n    messages.push(`Oh no ${playerName}! You have no there are no cards left to draw, it's Game over!`)\n    state.gameLost=true\n    //!UPDATE STATE\n    return true\n  }\n  return false\n}\n\n\nexport function dealMisinfoCard(oldState: Gamestate, weight: number, isViral: boolean) {\n  \n  let oldDeck: Card[] = oldState.misinformationDeckActive\n  let drawSource: string\n  if (isViral) {\n    drawSource = oldDeck[oldDeck.length - 1].sourceName\n    let playerName:string=oldState.players.filter(player=>player.isCurrent)[0].name //! WHY IS THIS HAPPENING ON 2ND PLAYER JOINING??\n    messages.push(`Oh no ${playerName}! It's gone Viral at \"${drawSource}\"!`)\n  }\n  else {\n    drawSource = oldDeck[0].sourceName\n  }\n  \n  \n  for (const source of oldState.sources) {\n  \n    if (source.name === drawSource) {\n\n      while (weight > 0) {\n        \n\n        let key1 = 'markers_' + source.misinfoType\n        let key2 = source.misinfoType\n\n        if (typeCheck(key1) && typeCheck(key2)) {\n\n          if (source[key1] === 3) {\n            oldState = outbreak(source, oldState)\n          }\n          else {\n            source[key1]++\n            oldState.misinformation[key2].markersLeft--\n          }\n          didLose(oldState)\n          weight--\n        }\n      }\n\n      if (isViral) {\n        oldState.misinformationDeckPassive.push(oldDeck[oldDeck.length - 1])\n        oldState.misinformationDeckActive.pop()\n      }\n      else {\n        oldState.misinformationDeckPassive.push(oldDeck[0])\n        oldState.misinformationDeckActive.shift()\n      }\n      let newState = { ...oldState }\n      return newState\n    }\n  }\n}","D:\\thesis\\Viral\\Viral\\client\\src\\logic\\actions.MW.ts",[],"D:\\thesis\\Viral\\Viral\\client\\src\\redux\\gameState\\initialState.tsx",["203","204","205","206","207"],"// this initial state presumes 2 players, 3 locations (one for each color), 3 connection and 3 misinfo cards, and 1 viral card.\n\nimport { Gamestate, Card, Source, Player, Misinformation, Connection } from '../../types/gameStateTypes'\n\nexport const initialState: Gamestate = {\n  sources: [\n  \n  ],\n  players: [\n  ],\n  spreadLevel: 1,\n  chaosMeter: 0,\n  misinformation: {\n    community: {\n      name: 'Misinfo Type 1',\n      debunked: false,\n      markersLeft: 16,\n    },\n    social: {\n      name: 'Misinfo Type 2',\n      debunked: false,\n      markersLeft: 16,\n    },\n    relations: {\n      name: 'Misinfo Type 3',\n      debunked: false,\n      markersLeft: 16,\n    },\n  },\n  connectionDeck: [\n    {\n      cardType: 'connection',\n      sourceName: 'University',\n      misinfoType: 'blue',\n    },\n    {\n      cardType: 'connection',\n      sourceName: 'Gym',\n      misinfoType: 'red',\n    },\n    {\n      cardType: 'connection',\n      sourceName: 'Instagram',\n      misinfoType: 'yellow',\n    },\n    {\n      cardType: 'viral',\n    },\n  ],\n  misinformationDeckActive: [\n    {\n      cardType: 'misinformation',\n      sourceName: 'University',\n      misinfoType: 'blue',\n    },\n    {\n      cardType: 'misinformation',\n      sourceName: 'Gym',\n      misinfoType: 'red',\n    },\n    {\n      cardType: 'misinformation',\n      sourceName: 'Instagram',\n      misinfoType: 'yellow',\n    },\n  ],\n  misinformationDeckPassive: [],\n  turnMovesLeft: 4,\n  dealHistory: 0,\n  gameWon: false,\n  gameLost: false,\n  received: false,\n  gameOn:false\n}","D:\\thesis\\Viral\\Viral\\client\\src\\components\\sourceDeck\\sourceDeck.tsx",[],"D:\\thesis\\Viral\\Viral\\client\\src\\components\\MisinformationDeck\\misinformationDeck.tsx",[],"D:\\thesis\\Viral\\Viral\\client\\src\\components\\CardHand\\CardHand.tsx",[],"D:\\thesis\\Viral\\Viral\\client\\src\\components\\CureDeck\\CureDeck.tsx",["208","209","210","211","212","213","214","215"],"import React from 'react';\nimport \"./CureDeck.scss\"\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../redux/gameState/store';\n\n\nimport WifiIcon from '@material-ui/icons/Wifi';\nimport WifiOffIcon from '@material-ui/icons/WifiOff';\n\n\n\nconst style = {\n  large: {\n    fontSize:50\n  }\n}\nexport const CureDeck: React.FC = ():JSX.Element => {\n\n  const gamestate = useSelector((state: RootState) => state.gameStateReducer)\n\n  let misinformationCommunityHasDebunked = gamestate.misinformation.community.debunked\n  let misinformationRelationsHasDebunked = gamestate.misinformation.relations.debunked\n  let misinformationSocialHasDebunked = gamestate.misinformation.social.debunked\n\n  const communityCubesLeft = useSelector((state:RootState) => state.gameStateReducer.misinformation.community.markersLeft)\n  const relationsCubesLeft = useSelector((state:RootState) => state.gameStateReducer.misinformation.relations.markersLeft)\n  const socialCubesLeft = useSelector((state:RootState) => state.gameStateReducer.misinformation.social.markersLeft)\n\n  let noCureString = \"Not debunked yet - we're screwed\"\n  let cureString = \"Debunked!! bitches!\"\n  const CureDeck = (<>\n    <div className=\"debunk-indicator A\">\n      {/* {misinformationCommunityHasDebunked ? <WifiOffIcon style={style.large} /> : <WifiIcon style={style.large} />} */}\n      {communityCubesLeft}\n    </div>\n    <div className=\"debunk-indicator B\">\n      {/* {misinformationRelationsHasDebunked ? <WifiOffIcon style={style.large} /> : <WifiIcon style={style.large} />} */}\n      {relationsCubesLeft}\n    </div>\n    <div className=\"debunk-indicator C\">\n      {socialCubesLeft}\n      {/* {misinformationSocialHasDebunked ? <WifiOffIcon style={style.large} /> : <WifiIcon style={style.large} />} */}\n    </div>\n        \n  </>)\n\n  return (\n    <div className=\"cure-deck-container\" >\n      {CureDeck}\n    </div>\n  )\n}","D:\\thesis\\Viral\\Viral\\client\\src\\components\\ChaosMeter\\ChaosMeter.tsx",[],"D:\\thesis\\Viral\\Viral\\client\\src\\components\\SpreadLevel\\SpreadLevel.tsx",[],"D:\\thesis\\Viral\\Viral\\client\\src\\components\\SourceParent\\SourceParent.tsx",["216","217"],"import React from 'react'\nimport PropTypes from 'prop-types'\n// import { initDummyState } from '../../logic/dummyState.REDO_CO';\nimport { SourceComponent  } from '../Source/Source'\nimport {Source} from '../../types/gameStateTypes'\nimport { render } from '@testing-library/react';\nimport {useSelector} from 'react-redux'\nimport { RootState } from '../../redux/gameState/store'\nimport './SourceParent.scss'\n\nexport const SourceParent = () => {\n  // const sources = initDummyState.sources;\n  const sources = useSelector((state: RootState) => state.gameStateReducer.sources);\n\n\n  // use the\n\n  const renderSources = (srcArr: Source[]) => {\n    \n    return srcArr.map(source => {\n      //! GET source.markers_community etc and plug into props of SourceComponent\n\n\n      return <SourceComponent source={source} key={source.name}/>\n    })\n  }\n\n  return (\n    <div id=\"source-parent-grid-container\">\n      {renderSources(sources)}\n    </div>\n  )\n}\n\n\n\n","D:\\thesis\\Viral\\Viral\\client\\src\\components\\PlayerPrompt\\PlayerPrompt.tsx",["218","219"],"import React from 'react';\nimport \"./PlayerPrompt.scss\"\n\nexport interface PlayerPromptProps {\n  msg: string\n}\n\n\nexport const PlayerPrompt: React.FC = () => { // SVGIcon\n  // using redux instead of props for real implementation\n  //const gamestate = useSelector(state => state.gamestate)\n  //const msg = gamestate.messages\n\n\n  const messages = ['this is a test message' , 'Bratuwurst?', ' ja bitte Bratwurst', 'Donald Trump is Tupac and lives under Connors head']\n  //messages.push(msg)\n  return (\n    <div className=\"player-prompt-container\" >\n      {messages.map(msg => {return (\n        <div className=\"single-message\">{msg}</div>)\n      })}\n\n    </div>\n  )\n}","D:\\thesis\\Viral\\Viral\\client\\src\\components\\SourceCard\\SourceCard.tsx",["220","221","222"],"import React from 'react';\nimport { getIcon } from '../../helpers/iconExporter'\nimport { toCamelCase, toPascalCase } from '../../helpers/utils'\nimport './SourceCard.scss'\nimport { shareCardEvent } from '../../logic/event.listeners';\nimport { ShareCardProps } from '../../redux/gameState/reduxTypes'\n\n//! issue with \"Card\" interface beings used for both Source/connection & \"Viral\" cards, which have name type \"null\" - possible change types/logic later\nexport interface SourceCardProps {\n  name: string,    //! NULL TO BE REMOVED\n  category: string, //! NULL TO BE REMOVED\n  canShare: any[]\n}\n// DON'T NEED ===> canlogon can go to the place if you have that card\n// canShare: a button that appears on each card when you are on the same location as another player\n// canchare: Player[]\n\n\nexport const SourceCard: React.FC<SourceCardProps> = ({ name, category, canShare }: SourceCardProps) => { // SVGIcon\n\n  const currentState = {}\n\n  const SVGIcon = getIcon(toCamelCase(name) + 'Icon');\n\n  const handleShareClick = (id: string) => {\n    //DISPATCH ACTION\n    console.log(`SHARING CARD ${name} WITH ${id}`);\n  }\n\n\n  const renderShareButtons = (shareWith: { name: string, id: string }[]) => {\n    return shareWith.map(player => <button onClick={() => handleShareClick(player.id)\n\n      // shareCardEvent({\n      //   oldState: currentState,\n      //   currentPlayerID: ,\n      //   recipient: player.id,\n      //   sharedCard: name\n      // })\n    }>{player.name}</button>)\n  }\n  return (\n    <div className={`source-card-container ${category}`} >\n      <SVGIcon name={name} className=\"card-icon\" />\n      <div className=\"name-container\" >\n        <p className=\"title\">{toPascalCase(name)}</p>\n        {renderShareButtons(canShare)}\n      </div>\n    </div>\n  )\n}","D:\\thesis\\Viral\\Viral\\client\\src\\components\\Source\\Source.tsx",["223","224","225","226"],"import React, { Fragment, useEffect, useState } from 'react';\nimport { Player, Source } from '../../types/gameStateTypes'\nimport { getIcon } from '../../helpers/iconExporter'\nimport { toCamelCase, toKebabCase } from '../../helpers/utils';\nimport './Source.scss'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { clearMisinfoAction, debunkMisinfoAction, moveAction, logOnOffAction } from '../../redux/gameState/gameStateActions';\nimport { RootState } from '../../redux/gameState/store';\nimport { PlayerPawn } from '../PlayerPawn/PlayerPawn';\nimport { ModalComponent } from './DebunkModal';\nimport { logOnOff } from '../../logic/actions.newState_CO';\n\n\nexport interface SourceProps {\n  source: Source;\n}\n\n\nexport const SourceComponent: React.FC<SourceProps> = ({ source }: SourceProps) => { // SVGIcon\n\n\n  const dispatch = useDispatch()\n  const gamestate = useSelector((state: RootState) => state.gameStateReducer)\n  const currentPlayer = useSelector((state: RootState) => state.gameStateReducer.players.filter(player => player.isCurrent === true))[0]\n  ////console.log('CURRENT PLAYER', array)\n  const allPlayers = useSelector((state: RootState) => state.gameStateReducer.players)\n  ////console.log('gamestate from source : ', gamestate)\n  ////console.log('currentPlayer from source : ' , currentPlayer)\n\n  const [modalIsOpen, setIsOpen] = useState(false)\n  const [selectedDebunkCards, setselectedDebunkCards] = useState([])\n\n  let { name, markers_community, markers_social, markers_relations,\n    canMove, canLogOff, canLogOn, canClearCommunity,\n    canClearRelations, canClearSocial, canShare, canDebunk, misinfoType } = source;\n\n\n\n  useEffect(() => {\n    //console.log('close modal from source tsx useEffect---------', modalIsOpen)\n\n  }, [modalIsOpen])\n  useEffect(() => {\n    //console.log('close modal from source tsx useEffect seleceted debunked cards---------', selectedDebunkCards)\n\n  }, [selectedDebunkCards])\n\n  //console.log('source MOVABLE', source.name, canMove)\n  //console.log('THIS IS THE NAME::::::: ', toCamelCase(name));\n  ////console.log('THIS IS THE NAME::::::: ', toCamelCase(name));\n  const SVGIconSource: React.FunctionComponent<React.SVGProps<SVGSVGElement>>\n    = getIcon(toCamelCase(name) + 'Icon');\n\n\n  const getMarker = (category: string, num: number, canBeCleared: boolean, canDebunk: string[]) => {\n    if (num > 0 && canDebunk.includes(category)) {\n\n      //get the debunable icon\n      const DebunkableIcon = getIcon(toCamelCase(`marker ${category} ${num}`))\n      //wrap it with  button to make it clickable\n      return (<button onClick={() => debunkMisinforamtion(category)}><DebunkableIcon /></button>)\n\n    }\n\n    //add a different icon if canBeCleared\n    if (num > 0 && canBeCleared) {\n      //get the clearable icon\n      const ClearableIcon = getIcon(toCamelCase(`marker ${category} ${num}`))\n      //wrap it with  button to make it clickable\n\n      return (<button onClick={() => clearMisinformationbyOne(category)}><ClearableIcon /></button>)\n\n    }\n    if (num > 0) {\n      ////console.log(toCamelCase(`marker ${category} ${num}`))\n      const Icon = getIcon(toCamelCase(`marker ${category} ${num}`));\n      return <Icon />;\n    }\n  }\n\n  const debunkMisinforamtion = (category: string) => {\n\n    //showModal\n    setIsOpen(true)\n\n    setTimeout(async () => {\n      try {\n\n        // Wait user to confirm !\n        dispatch(debunkMisinfoAction({\n          oldState: gamestate, currentPlayerID: currentPlayer.id,\n          misinfoType: category, usedCards: selectedDebunkCards\n        }))\n\n        // this line below is executed only after user click on OK\n        alert(\"OK\");\n      } catch (err) {\n        alert(\"CANCEL\");\n      }\n    }, 7000);\n\n\n  }\n\n  const clearMisinformationbyOne = (misinfoType: string) => {\n    //throws a logic error !!!\n    dispatch(clearMisinfoAction({ oldState: gamestate, currentPlayerID: currentPlayer.id, misinfoType, location: source.name }))\n  }\n\n\n  const getPlayerPawns = (players: Player[], currentPlayer: Player) => {\n    let test: Player[] = [];\n    for (const player of allPlayers) {\n      if (player.currentSource === source.name && !test.includes(player)) {\n        test.push(player)\n\n      }\n    }\n    if (test.length > 0) return test.map(player => <PlayerPawn color={player.pawnColor} />)\n    else return null\n\n  }\n\n\n  const changePlayersCurrentSource = () => {\n    dispatch(moveAction({ oldState: gamestate, currentPlayerID: currentPlayer.id, location: source.name }))\n  }\n\n  const logonToNewSource = () => {\n    dispatch(logOnOffAction({ oldState: gamestate, currentPlayerID: currentPlayer.id, location: source.name, usedCard: source.name }))\n  }\n\n  const logoffToNewSource = () => {\n    const spentCard = gamestate.players.filter(player => player.id === currentPlayer.id)[0].currentSource;\n    dispatch(logOnOffAction({ oldState: gamestate, currentPlayerID: currentPlayer.id, location: source.name, usedCard: spentCard }))\n  }\n\n  const renderIcon = () => {\n    if (canMove) return <button onClick={() => changePlayersCurrentSource()}> <SVGIconSource /> </button>\n    return null\n\n  }\n\n  const renderAsLogOn = () => {\n    if (canLogOn) return <button onClick={() => changePlayersCurrentSource()}> <SVGIconSource /> </button>\n    return null\n\n  }\n\n  function unclickableMessage() {\n    //console.log(`%c you can't do anything at ${source.name}`,`background-color: red; color: white; padding: 10px`)\n    return null;\n  }\n\n  //adding the right class names\n  let canMoveClassName = canMove ? 'can-move-to' : ''\n  let canLogOffClassName = canLogOff ? 'can-log-off' : ''\n  let canLogOnClassName = canLogOn ? 'can-log-on' : ''\n  let canDebunkClassName = canDebunk ? 'can-debunk' : ''\n\n\n  const closeModal = () => {\n    //console.log('close modal from source tsx---------')\n    setIsOpen(false)\n\n\n\n  }\n\n\n  return (\n    <>\n      {modalIsOpen ? <ModalComponent modalIsOpen={modalIsOpen} closeModal={closeModal} setselectedDebunkCards={setselectedDebunkCards} /> : null}\n\n\n\n      <div\n        onClick={\n          // logic to render different click events from source\n          canLogOff ?\n            logoffToNewSource :\n            canLogOn ?\n              logonToNewSource :\n              canMove ?\n                changePlayersCurrentSource :\n                unclickableMessage}\n        className={`source-container ${toKebabCase(name)} ${canLogOffClassName} ${canLogOnClassName} ${canMoveClassName} ${source.misinfoType}`} >\n\n        <SVGIconSource />\n        <div className={`markers-container ${misinfoType}`}>\n          {getMarker('community', markers_community, canClearCommunity, canDebunk)}\n          {getMarker('social', markers_social, canClearSocial, canDebunk)}\n          {getMarker('relations', markers_relations, canClearRelations, canDebunk)}\n        </div>\n        {getPlayerPawns(canShare, currentPlayer)}\n      </div>\n    </>\n\n  )\n\n\n\n}\n\n\n\n// CAN MOVE:\n// CAN LOGON:\n// CAN LOGOFF:\n// MARKERS x3 ---> CAN CLEAR\n// PAWNS","D:\\thesis\\Viral\\Viral\\client\\src\\helpers\\iconExporter.ts",[],"D:\\thesis\\Viral\\Viral\\client\\src\\helpers\\utils.ts",[],"D:\\thesis\\Viral\\Viral\\client\\src\\components\\PlayerPawn\\PlayerPawn.tsx",["227","228","229","230"],"// import React from 'react';\nimport React from 'react';\n// also exported from '@storybook/react' if you can deal with breaking changes in 6.1\nimport { Story, Meta } from '@storybook/react/types-6-0';\nimport './PlayerPawn.css';\nimport { withDesign } from 'storybook-addon-designs';\nimport { useSelector } from 'react-redux';\n// import {RootState} from '../../redux/gameState/store'\nimport { getIcon } from '../../helpers/iconExporter'\n\n\nconst FirePawn = getIcon('firePawn');\nconst HexagonPawn = getIcon('hexagonPlayerPawn');\nconst FlowerPawn = getIcon('flowerPawn');\nconst RombPawn = getIcon('rombPawn')\nconst SunPawn = getIcon('sunPawn')\nconst SquarePawn = getIcon('squarePawn')\n\n\nconst getPawn = (color: string) => {\n\n  if (color === 'orange') return <FirePawn />;\n  if (color === 'red') return <SquarePawn />;\n  if (color === 'blue') return <RombPawn />;\n  if (color === 'yellow') return <SunPawn />;\n  if (color === 'pink') return <FlowerPawn />;\n  if (color === 'green') return <HexagonPawn />;\n\n}\n\nexport interface PlayerPawnProps {\n  color: string\n}\n\nexport const PlayerPawn: React.FC<PlayerPawnProps> = ({\n  color,\n}: PlayerPawnProps) => {\n  return (\n    <div className='container'>\n      {getPawn(color)}\n    </div>\n  );\n};\n","D:\\thesis\\Viral\\Viral\\client\\src\\logic\\dummyState.REDO_CO.ts",["231","232","233","234","235"],"// this initial state presumes 2 players, 3 locations (one for each color), 3 connection and 3 misinfo cards, and 1 viral card.\n\n import { Gamestate, Card, Source, Player, Misinformation, Connection } from '../types/gameStateTypes'\n\nexport const initDummyState: Gamestate = {\n  sources: [\n    {\n      name: 'university',\n      misinfoType: 'community',\n      markers_community: 1,\n      markers_social: 1,\n      markers_relations: 1,\n      canMove: true,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: true,\n      canClearSocial: true,\n      canClearRelations: true,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'High School',\n      misinfoType: 'blue',\n      markers_community: 1,\n      markers_social: 3,\n      markers_relations: 0,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'Taxi',\n      misinfoType: 'blue',\n      markers_community: 1,\n      markers_social: 3,\n      markers_relations: 0,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'Local Cult',\n      misinfoType: 'blue',\n      markers_community: 1,\n      markers_social: 3,\n      markers_relations: 0,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'Pub',\n      misinfoType: 'blue',\n      markers_community: 1,\n      markers_social: 3,\n      markers_relations: 0,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'Hair Salon',\n      misinfoType: 'blue',\n      markers_community: 1,\n      markers_social: 3,\n      markers_relations: 0,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: true,\n      canClearSocial: true,\n      canClearRelations: true,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'University',\n      misinfoType: 'blue',\n      markers_community: 1,\n      markers_social: 3,\n      markers_relations: 0,\n      canMove: true,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'Gym',\n      misinfoType: 'blue',\n      markers_community: 1,\n      markers_social: 0,\n      markers_relations: 2,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: true,\n      canClearSocial: true,\n      canClearRelations: true,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'Asda',\n      misinfoType: 'blue',\n      markers_community: 1,\n      markers_social: 3,\n      markers_relations: 0,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'Instagram',\n      misinfoType: 'yellow',\n      markers_community: 1,\n      markers_social: 2,\n      markers_relations: 3,\n      canMove: true,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: true,\n      canClearSocial: true,\n      canClearRelations: true,\n      canShare: [ {\n        name: 'Player 1',\n        id: '1234',\n        cards: [],\n        cardHandOverflow: false,\n        isCurrent: true,\n        pawnColor: 'green',\n        currentSource: 'pub',\n        room:'1',\n      },{\n        name: 'Player 2',\n        id: '5678',\n        cards: [],\n        cardHandOverflow: false,\n        isCurrent: true,\n        pawnColor: 'purple',\n        currentSource: 'pub',\n        room:'1',\n\n      },],\n      canDebunk: [],\n    },\n    {\n      name: 'Facebook',\n      misinfoType: 'yellow',\n      markers_community: 1,\n      markers_social: 2,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'Youtube',\n      misinfoType: 'yellow',\n      markers_community: 1,\n      markers_social: 2,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'twitter',\n      misinfoType: 'yellow',\n      markers_community: 1,\n      markers_social: 2,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'Illuminatify',\n      misinfoType: 'yellow',\n      markers_community: 1,\n      markers_social: 2,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'reddit',\n      misinfoType: 'yellow',\n      markers_community: 1,\n      markers_social: 2,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'Whatsapp',\n      misinfoType: 'yellow',\n      markers_community: 1,\n      markers_social: 2,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'Tiktok',\n      misinfoType: 'yellow',\n      markers_community: 3,\n      markers_social: 3,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'uncle eugene',\n      misinfoType: 'red',\n      markers_community: 3,\n      markers_social: 3,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'cousin',\n      misinfoType: 'red',\n      markers_community: 3,\n      markers_social: 3,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'fran from hr',\n      misinfoType: 'red',\n      markers_community: 3,\n      markers_social: 3,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'evil ex',\n      misinfoType: 'red',\n      markers_community: 3,\n      markers_social: 3,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'opinionated grandpa',\n      misinfoType: 'red',\n      markers_community: 3,\n      markers_social: 3,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'crazy dave',\n      misinfoType: 'red',\n      markers_community: 3,\n      markers_social: 3,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'guy at the bus stop',\n      misinfoType: 'red',\n      markers_community: 3,\n      markers_social: 3,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'mother in law',\n      misinfoType: 'red',\n      markers_community: 3,\n      markers_social: 3,\n      markers_relations: 3,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n  ],\n  players: [\n    {\n      name: 'Player 1',\n      id: '1234',\n      cards: [ \n      ],\n      cardHandOverflow: false,\n      isCurrent: true,\n      pawnColor: 'green',\n\n      currentSource: 'pub',\n      room:'1',\n     \n     \n\n    },\n    {\n      name: 'Player 2',\n      id: '5678',\n      cards: [{\n        cardType: 'connection',\n        sourceName: 'Instagram',\n        misinfoType: 'yellow',\n      },],\n      cardHandOverflow: false,\n      isCurrent: true,\n      pawnColor: 'purple',\n      currentSource: 'University',\n      room: '1',\n    \n\n    },\n  ],\n  spreadLevel: 1,\n  chaosMeter: 0,\n  misinformation: {\n    community: {\n      name: 'Misinfo Type 1',\n      debunked: false,\n      markersLeft: 16,\n    },\n    social: {\n      name: 'Misinfo Type 2',\n      debunked: false,\n      markersLeft: 16,\n    },\n    relations: {\n      name: 'Misinfo Type 3',\n      debunked: false,\n      markersLeft: 16,\n    },\n  },\n  connectionDeck: [\n    {\n      cardType: 'connection',\n      sourceName: 'University',\n      misinfoType: 'blue',\n    },\n    {\n      cardType: 'connection',\n      sourceName: 'Gym',\n      misinfoType: 'red',\n    },\n    {\n      cardType: 'connection',\n      sourceName: 'Instagram',\n      misinfoType: 'yellow',\n    },\n    {\n      cardType: 'viral',\n    },\n  ],\n  misinformationDeckActive: [\n    {\n      cardType: 'misinformation',\n      sourceName: 'University',\n      misinfoType: 'blue',\n    },\n    {\n      cardType: 'misinformation',\n      sourceName: 'Gym',\n      misinfoType: 'red',\n    },\n    {\n      cardType: 'misinformation',\n      sourceName: 'Instagram',\n      misinfoType: 'yellow',\n    },\n    {\n      cardType: 'misinformation',\n      sourceName: 'Instagram',\n      misinfoType: 'yellow',\n    },\n    {\n      cardType: 'misinformation',\n      sourceName: 'Instagram',\n      misinfoType: 'yellow',\n    },\n    {\n      cardType: 'misinformation',\n      sourceName: 'Instagram',\n      misinfoType: 'yellow',\n    },\n  ],\n  misinformationDeckPassive: [],\n  turnMovesLeft: 4,\n  dealHistory: 0,\n  gameWon: false,\n  gameLost: false,\n  received: false,\n  gameOn:true\n}",["236","237"],"D:\\thesis\\Viral\\Viral\\client\\src\\components\\Source\\DebunkModal.tsx",["238","239","240","241","242","243"],"import React from 'react';\nimport Modal from 'react-modal';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../redux/gameState/store';\nimport { SourceCard } from '../SourceCard/SourceCard';\nimport ReactDOM from 'react-dom';\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)'\n  }\n};\n\n\ninterface ModalProps {\n  modalIsOpen: boolean,\n  setIsOpen: Function,\n  setselectedDebunkCards: Function\n}\n\nexport function ModalComponent({ modalIsOpen, setIsOpen, setselectedDebunkCards }: ModalProps) {\n  const currentPlayerCards = useSelector((state: RootState) => state.playerStateReducer.cards)\n\n  const gameState = useSelector((state: RootState) => state.gameStateReducer)\n\n\n\n\n  const fakeCards = ['Card 1', 'Card 2', 'Card 3']\n\n\n  var subtitle: any;\n\n\n\n  function openModal() {\n    setIsOpen(true);\n  }\n\n  function afterOpenModal() {\n    // references are now sync'd and can be accessed.\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  return (\n    <div>\n      <Modal\n        isOpen={modalIsOpen}\n        onAfterOpen={afterOpenModal}\n        onRequestClose={closeModal}\n        style={customStyles}\n        contentLabel=\"Example Modal\"\n      >\n        {fakeCards.map(card => <div>{card}</div>)}\n      </Modal>\n    </div>\n  );\n}","D:\\thesis\\Viral\\Viral\\client\\src\\types\\gameStateTypes.ts",[],["244","245"],"D:\\thesis\\Viral\\Viral\\client\\src\\components\\OtherPlayer\\OtherPlayer.tsx",[],"D:\\thesis\\Viral\\Viral\\client\\src\\components\\GameOn.tsx",["246","247","248","249","250","251","252","253","254","255","256","257"],"D:\\thesis\\Viral\\Viral\\client\\src\\components\\GameOver\\gameOver.tsx",[],"D:\\thesis\\Viral\\Viral\\client\\src\\components\\YouWon\\youWon.tsx",[],"D:\\thesis\\Viral\\Viral\\client\\src\\components\\InfoModal\\InfoModal.tsx",["258","259"],"import React, { useState } from 'react';\nimport './InfoModal.scss';\n\n\nexport const InfoModal: React.FC = () => {\n\n\n  const onClose = () => {\n\n  };\n\n  return (\n\n    <div className='modal_body'>\n      <h4>Welcome to Viral!</h4>\n      <p className='text'>\n\n        In this game you have to travel around town cleaning up misinformation from various sources.\n        You can either travel to an adjacent source or fast travel by using one of your cards. Each player can make 4 actions, either moving or cleaning, on each turn.\n        After each turn additional misinformation will spread throughout the town so you’ll have to act quickly!\n        The amount of misinformation which spreads each turn depends on the spread level. If a third marker of misinformation is put on a source there is an outbreak spreading it to adjacent sources.\n        Each outbreak increases the chaos meter!\n        After each turn the player also collects two source cards. The spread increases each time one of those source cards turns out to be one of the 3 hidden Viral cards!\n        To win you must debunk all three types of misinformation.\n        Each type of misinformation is debunked by collection 4 source cards representing that type of misinformation.\n        The game is over if the chaos meter increases to 100%, you run out of source cards or if you run out of any type of misinformation marker.\n        Good luck!\n          </p>\n    </div>\n\n\n\n  );\n};",{"ruleId":"260","replacedBy":"261"},{"ruleId":"262","replacedBy":"263"},{"ruleId":"264","severity":1,"message":"265","line":10,"column":10,"nodeType":"266","messageId":"267","endLine":10,"endColumn":18},{"ruleId":"264","severity":1,"message":"268","line":7,"column":10,"nodeType":"266","messageId":"267","endLine":7,"endColumn":14},{"ruleId":"264","severity":1,"message":"269","line":2,"column":17,"nodeType":"266","messageId":"267","endLine":2,"endColumn":26},{"ruleId":"264","severity":1,"message":"270","line":5,"column":10,"nodeType":"266","messageId":"267","endLine":5,"endColumn":18},{"ruleId":"264","severity":1,"message":"271","line":6,"column":21,"nodeType":"266","messageId":"267","endLine":6,"endColumn":26},{"ruleId":"264","severity":1,"message":"272","line":7,"column":19,"nodeType":"266","messageId":"267","endLine":7,"endColumn":27},{"ruleId":"264","severity":1,"message":"273","line":8,"column":10,"nodeType":"266","messageId":"267","endLine":8,"endColumn":18},{"ruleId":"264","severity":1,"message":"274","line":11,"column":10,"nodeType":"266","messageId":"267","endLine":11,"endColumn":30},{"ruleId":"264","severity":1,"message":"275","line":11,"column":32,"nodeType":"266","messageId":"267","endLine":11,"endColumn":58},{"ruleId":"264","severity":1,"message":"276","line":12,"column":10,"nodeType":"266","messageId":"267","endLine":12,"endColumn":19},{"ruleId":"264","severity":1,"message":"277","line":41,"column":9,"nodeType":"266","messageId":"267","endLine":41,"endColumn":15},{"ruleId":"264","severity":1,"message":"278","line":3,"column":10,"nodeType":"266","messageId":"267","endLine":3,"endColumn":26},{"ruleId":"264","severity":1,"message":"279","line":1,"column":10,"nodeType":"266","messageId":"267","endLine":1,"endColumn":28},{"ruleId":"264","severity":1,"message":"280","line":6,"column":10,"nodeType":"266","messageId":"267","endLine":6,"endColumn":17},{"ruleId":"264","severity":1,"message":"281","line":1,"column":17,"nodeType":"266","messageId":"267","endLine":1,"endColumn":37},{"ruleId":"264","severity":1,"message":"282","line":1,"column":52,"nodeType":"266","messageId":"267","endLine":1,"endColumn":69},{"ruleId":"264","severity":1,"message":"274","line":4,"column":27,"nodeType":"266","messageId":"267","endLine":4,"endColumn":47},{"ruleId":"264","severity":1,"message":"275","line":4,"column":49,"nodeType":"266","messageId":"267","endLine":4,"endColumn":75},{"ruleId":"264","severity":1,"message":"283","line":4,"column":77,"nodeType":"266","messageId":"267","endLine":4,"endColumn":92},{"ruleId":"264","severity":1,"message":"284","line":4,"column":94,"nodeType":"266","messageId":"267","endLine":4,"endColumn":109},{"ruleId":"264","severity":1,"message":"271","line":6,"column":21,"nodeType":"266","messageId":"267","endLine":6,"endColumn":26},{"ruleId":"264","severity":1,"message":"285","line":7,"column":10,"nodeType":"266","messageId":"267","endLine":7,"endColumn":16},{"ruleId":"264","severity":1,"message":"280","line":8,"column":10,"nodeType":"266","messageId":"267","endLine":8,"endColumn":17},{"ruleId":"264","severity":1,"message":"286","line":46,"column":7,"nodeType":"266","messageId":"267","endLine":46,"endColumn":13},{"ruleId":"264","severity":1,"message":"287","line":47,"column":7,"nodeType":"266","messageId":"267","endLine":47,"endColumn":12},{"ruleId":"264","severity":1,"message":"288","line":4,"column":8,"nodeType":"266","messageId":"267","endLine":4,"endColumn":13},{"ruleId":"264","severity":1,"message":"289","line":4,"column":15,"nodeType":"266","messageId":"267","endLine":4,"endColumn":23},{"ruleId":"264","severity":1,"message":"290","line":271,"column":9,"nodeType":"266","messageId":"267","endLine":271,"endColumn":20},{"ruleId":"264","severity":1,"message":"291","line":3,"column":21,"nodeType":"266","messageId":"267","endLine":3,"endColumn":25},{"ruleId":"264","severity":1,"message":"292","line":3,"column":27,"nodeType":"266","messageId":"267","endLine":3,"endColumn":33},{"ruleId":"264","severity":1,"message":"285","line":3,"column":35,"nodeType":"266","messageId":"267","endLine":3,"endColumn":41},{"ruleId":"264","severity":1,"message":"293","line":3,"column":43,"nodeType":"266","messageId":"267","endLine":3,"endColumn":57},{"ruleId":"264","severity":1,"message":"294","line":3,"column":59,"nodeType":"266","messageId":"267","endLine":3,"endColumn":69},{"ruleId":"264","severity":1,"message":"295","line":7,"column":8,"nodeType":"266","messageId":"267","endLine":7,"endColumn":16},{"ruleId":"264","severity":1,"message":"296","line":8,"column":8,"nodeType":"266","messageId":"267","endLine":8,"endColumn":19},{"ruleId":"264","severity":1,"message":"297","line":12,"column":7,"nodeType":"266","messageId":"267","endLine":12,"endColumn":12},{"ruleId":"264","severity":1,"message":"298","line":21,"column":7,"nodeType":"266","messageId":"267","endLine":21,"endColumn":41},{"ruleId":"264","severity":1,"message":"299","line":22,"column":7,"nodeType":"266","messageId":"267","endLine":22,"endColumn":41},{"ruleId":"264","severity":1,"message":"300","line":23,"column":7,"nodeType":"266","messageId":"267","endLine":23,"endColumn":38},{"ruleId":"264","severity":1,"message":"301","line":29,"column":7,"nodeType":"266","messageId":"267","endLine":29,"endColumn":19},{"ruleId":"264","severity":1,"message":"302","line":30,"column":7,"nodeType":"266","messageId":"267","endLine":30,"endColumn":17},{"ruleId":"264","severity":1,"message":"303","line":2,"column":8,"nodeType":"266","messageId":"267","endLine":2,"endColumn":17},{"ruleId":"264","severity":1,"message":"304","line":6,"column":10,"nodeType":"266","messageId":"267","endLine":6,"endColumn":16},{"ruleId":"264","severity":1,"message":"289","line":1,"column":15,"nodeType":"266","messageId":"267","endLine":1,"endColumn":23},{"ruleId":"305","severity":1,"message":"306","line":17,"column":50,"nodeType":"307","messageId":"308","endLine":17,"endColumn":52},{"ruleId":"264","severity":1,"message":"309","line":5,"column":10,"nodeType":"266","messageId":"267","endLine":5,"endColumn":24},{"ruleId":"264","severity":1,"message":"310","line":6,"column":10,"nodeType":"266","messageId":"267","endLine":6,"endColumn":24},{"ruleId":"264","severity":1,"message":"311","line":21,"column":9,"nodeType":"266","messageId":"267","endLine":21,"endColumn":21},{"ruleId":"264","severity":1,"message":"312","line":11,"column":10,"nodeType":"266","messageId":"267","endLine":11,"endColumn":18},{"ruleId":"264","severity":1,"message":"313","line":138,"column":9,"nodeType":"266","messageId":"267","endLine":138,"endColumn":19},{"ruleId":"264","severity":1,"message":"314","line":144,"column":9,"nodeType":"266","messageId":"267","endLine":144,"endColumn":22},{"ruleId":"264","severity":1,"message":"315","line":159,"column":7,"nodeType":"266","messageId":"267","endLine":159,"endColumn":25},{"ruleId":"264","severity":1,"message":"316","line":4,"column":10,"nodeType":"266","messageId":"267","endLine":4,"endColumn":15},{"ruleId":"264","severity":1,"message":"317","line":4,"column":17,"nodeType":"266","messageId":"267","endLine":4,"endColumn":21},{"ruleId":"264","severity":1,"message":"318","line":6,"column":10,"nodeType":"266","messageId":"267","endLine":6,"endColumn":20},{"ruleId":"264","severity":1,"message":"319","line":7,"column":10,"nodeType":"266","messageId":"267","endLine":7,"endColumn":21},{"ruleId":"264","severity":1,"message":"291","line":3,"column":22,"nodeType":"266","messageId":"267","endLine":3,"endColumn":26},{"ruleId":"264","severity":1,"message":"292","line":3,"column":28,"nodeType":"266","messageId":"267","endLine":3,"endColumn":34},{"ruleId":"264","severity":1,"message":"285","line":3,"column":36,"nodeType":"266","messageId":"267","endLine":3,"endColumn":42},{"ruleId":"264","severity":1,"message":"293","line":3,"column":44,"nodeType":"266","messageId":"267","endLine":3,"endColumn":58},{"ruleId":"264","severity":1,"message":"294","line":3,"column":60,"nodeType":"266","messageId":"267","endLine":3,"endColumn":70},{"ruleId":"260","replacedBy":"320"},{"ruleId":"262","replacedBy":"321"},{"ruleId":"264","severity":1,"message":"322","line":5,"column":10,"nodeType":"266","messageId":"267","endLine":5,"endColumn":20},{"ruleId":"264","severity":1,"message":"323","line":6,"column":8,"nodeType":"266","messageId":"267","endLine":6,"endColumn":16},{"ruleId":"264","severity":1,"message":"324","line":27,"column":9,"nodeType":"266","messageId":"267","endLine":27,"endColumn":27},{"ruleId":"264","severity":1,"message":"325","line":29,"column":9,"nodeType":"266","messageId":"267","endLine":29,"endColumn":18},{"ruleId":"264","severity":1,"message":"326","line":37,"column":7,"nodeType":"266","messageId":"267","endLine":37,"endColumn":20},{"ruleId":"264","severity":1,"message":"327","line":41,"column":12,"nodeType":"266","messageId":"267","endLine":41,"endColumn":21},{"ruleId":"260","replacedBy":"328"},{"ruleId":"262","replacedBy":"329"},{"ruleId":"264","severity":1,"message":"269","line":2,"column":17,"nodeType":"266","messageId":"267","endLine":2,"endColumn":26},{"ruleId":"264","severity":1,"message":"270","line":5,"column":10,"nodeType":"266","messageId":"267","endLine":5,"endColumn":18},{"ruleId":"264","severity":1,"message":"330","line":7,"column":10,"nodeType":"266","messageId":"267","endLine":7,"endColumn":17},{"ruleId":"264","severity":1,"message":"272","line":7,"column":19,"nodeType":"266","messageId":"267","endLine":7,"endColumn":27},{"ruleId":"264","severity":1,"message":"331","line":7,"column":29,"nodeType":"266","messageId":"267","endLine":7,"endColumn":37},{"ruleId":"264","severity":1,"message":"322","line":10,"column":10,"nodeType":"266","messageId":"267","endLine":10,"endColumn":20},{"ruleId":"264","severity":1,"message":"332","line":19,"column":10,"nodeType":"266","messageId":"267","endLine":19,"endColumn":21},{"ruleId":"264","severity":1,"message":"274","line":20,"column":10,"nodeType":"266","messageId":"267","endLine":20,"endColumn":30},{"ruleId":"264","severity":1,"message":"283","line":20,"column":60,"nodeType":"266","messageId":"267","endLine":20,"endColumn":75},{"ruleId":"264","severity":1,"message":"285","line":21,"column":21,"nodeType":"266","messageId":"267","endLine":21,"endColumn":27},{"ruleId":"264","severity":1,"message":"333","line":22,"column":10,"nodeType":"266","messageId":"267","endLine":22,"endColumn":31},{"ruleId":"264","severity":1,"message":"334","line":39,"column":9,"nodeType":"266","messageId":"267","endLine":39,"endColumn":17},{"ruleId":"264","severity":1,"message":"289","line":1,"column":17,"nodeType":"266","messageId":"267","endLine":1,"endColumn":25},{"ruleId":"264","severity":1,"message":"335","line":8,"column":9,"nodeType":"266","messageId":"267","endLine":8,"endColumn":16},"no-native-reassign",["336"],"no-negated-in-lhs",["337"],"@typescript-eslint/no-unused-vars","'GameOver' is defined but never used.","Identifier","unusedVar","'Play' is defined but never used.","'useEffect' is defined but never used.","'Provider' is defined but never used.","'store' is defined but never used.","'getGames' is defined but never used.","'CureDeck' is defined but never used.","'addPlayerToGameState' is defined but never used.","'DealCardsToNewPlayerAction' is defined but never used.","'Gamestate' is defined but never used.","'MapSVG' is assigned a value but never used.","'gameStateReducer' is defined but never used.","'ADD_PLAYER_TO_GAME' is defined but never used.","'Console' is defined but never used.","'ButtonHTMLAttributes' is defined but never used.","'DetailedHTMLProps' is defined but never used.","'StartGameAction' is defined but never used.","'updateGameState' is defined but never used.","'Player' is defined but never used.","'player' is assigned a value but never used.","'state' is assigned a value but never used.","'React' is defined but never used.","'useState' is defined but never used.","'playerIndex' is assigned a value but never used.","'Card' is defined but never used.","'Source' is defined but never used.","'Misinformation' is defined but never used.","'Connection' is defined but never used.","'WifiIcon' is defined but never used.","'WifiOffIcon' is defined but never used.","'style' is assigned a value but never used.","'misinformationCommunityHasDebunked' is assigned a value but never used.","'misinformationRelationsHasDebunked' is assigned a value but never used.","'misinformationSocialHasDebunked' is assigned a value but never used.","'noCureString' is assigned a value but never used.","'cureString' is assigned a value but never used.","'PropTypes' is defined but never used.","'render' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'shareCardEvent' is defined but never used.","'ShareCardProps' is defined but never used.","'currentState' is assigned a value but never used.","'logOnOff' is defined but never used.","'renderIcon' is assigned a value but never used.","'renderAsLogOn' is assigned a value but never used.","'canDebunkClassName' is assigned a value but never used.","'Story' is defined but never used.","'Meta' is defined but never used.","'withDesign' is defined but never used.","'useSelector' is defined but never used.",["336"],["337"],"'SourceCard' is defined but never used.","'ReactDOM' is defined but never used.","'currentPlayerCards' is assigned a value but never used.","'gameState' is assigned a value but never used.","'subtitle' is defined but never used.","'openModal' is defined but never used.",["336"],["337"],"'getGame' is defined but never used.","'joinRoom' is defined but never used.","'NewGameMenu' is defined but never used.","'UpdateGameStateAction' is defined but never used.","'allRooms' is assigned a value but never used.","'onClose' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]