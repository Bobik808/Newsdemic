[{"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\index.tsx":"1","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\App.tsx":"2","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\socket-io-client\\socket-io-client.tsx":"3","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\StartGame.tsx":"4","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\store.tsx":"5","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\gameStateActions.ts":"6","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\playerReducer.ts":"7","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\helpers\\iconExporter.ts":"8","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\gameStateReducer.ts":"9","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\allGamesReducer.ts":"10","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\GameOn.tsx":"11","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\NewGameMenu\\NewGameMenu.tsx":"12","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\GameOver\\gameOver.tsx":"13","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\YouWon\\youWon.tsx":"14","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\reduxTypes.ts":"15","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\initialState.tsx":"16","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\InfoModal\\InfoModal.tsx":"17","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\CureDeck\\CureDeck.tsx":"18","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\MarkersStore\\MarkersStore.tsx":"19","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\sourceDeck\\sourceDeck.tsx":"20","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\SpreadLevel\\SpreadLevel.tsx":"21","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\MisinformationDeck\\misinformationDeck.tsx":"22","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\PlayerPrompt\\PlayerPrompt.tsx":"23","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\ChaosMeter\\ChaosMeter.tsx":"24","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\SourceParent\\SourceParent.tsx":"25","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\OtherPlayer\\OtherPlayer.tsx":"26","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\CardHand\\CardHand.tsx":"27","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\logic\\connections.ts":"28","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\helpers\\utils.ts":"29","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\Source\\Source.tsx":"30","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\SourceCard\\SourceCard.tsx":"31","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\Source\\DebunkModal.tsx":"32","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\PlayerPawn\\PlayerPawn.tsx":"33","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\logic\\moves.ts":"34","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\logic\\setup.ts":"35"},{"size":220,"mtime":1613662932666,"results":"36","hashOfConfig":"37"},{"size":363,"mtime":1613662932627,"results":"38","hashOfConfig":"37"},{"size":1413,"mtime":1613662932678,"results":"39","hashOfConfig":"37"},{"size":1761,"mtime":1613662932662,"results":"40","hashOfConfig":"37"},{"size":701,"mtime":1613662932676,"results":"41","hashOfConfig":"37"},{"size":2907,"mtime":1613662932671,"results":"42","hashOfConfig":"37"},{"size":657,"mtime":1613662932675,"results":"43","hashOfConfig":"37"},{"size":5352,"mtime":1613662932665,"results":"44","hashOfConfig":"37"},{"size":2463,"mtime":1613662932672,"results":"45","hashOfConfig":"37"},{"size":316,"mtime":1613662932669,"results":"46","hashOfConfig":"37"},{"size":3810,"mtime":1613662932635,"results":"47","hashOfConfig":"37"},{"size":3246,"mtime":1613662932641,"results":"48","hashOfConfig":"37"},{"size":753,"mtime":1612986386660,"results":"49","hashOfConfig":"37"},{"size":149,"mtime":1612892935157,"results":"50","hashOfConfig":"37"},{"size":3243,"mtime":1612901467695,"results":"51","hashOfConfig":"37"},{"size":1344,"mtime":1613662932674,"results":"52","hashOfConfig":"37"},{"size":1446,"mtime":1613662932639,"results":"53","hashOfConfig":"37"},{"size":979,"mtime":1613662932634,"results":"54","hashOfConfig":"37"},{"size":738,"mtime":1612862358470,"results":"55","hashOfConfig":"37"},{"size":349,"mtime":1612782842860,"results":"56","hashOfConfig":"37"},{"size":857,"mtime":1613664472044,"results":"57","hashOfConfig":"37"},{"size":377,"mtime":1612778562574,"results":"58","hashOfConfig":"37"},{"size":1004,"mtime":1613662932649,"results":"59","hashOfConfig":"37"},{"size":1558,"mtime":1613662932632,"results":"60","hashOfConfig":"37"},{"size":656,"mtime":1613662932658,"results":"61","hashOfConfig":"37"},{"size":2323,"mtime":1613662932645,"results":"62","hashOfConfig":"37"},{"size":1068,"mtime":1613663764497,"results":"63","hashOfConfig":"37"},{"size":3011,"mtime":1613042006183,"results":"64","hashOfConfig":"37"},{"size":556,"mtime":1612862358480,"results":"65","hashOfConfig":"37"},{"size":5459,"mtime":1613663100208,"results":"66","hashOfConfig":"37"},{"size":1123,"mtime":1613663713427,"results":"67","hashOfConfig":"37"},{"size":3721,"mtime":1613662932651,"results":"68","hashOfConfig":"37"},{"size":867,"mtime":1613662932646,"results":"69","hashOfConfig":"37"},{"size":17673,"mtime":1613672211045,"results":"70","hashOfConfig":"37"},{"size":6520,"mtime":1613662932668,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"hmvcsi",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"74"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\index.tsx",[],["150","151"],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\App.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\socket-io-client\\socket-io-client.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\StartGame.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\store.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\gameStateActions.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\playerReducer.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\helpers\\iconExporter.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\gameStateReducer.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\allGamesReducer.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\GameOn.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\NewGameMenu\\NewGameMenu.tsx",["152","153"],"import React, {  ChangeEvent, useState } from 'react';\nimport './NewGameMenu.scss';\n\nimport { AddPlayerAction} from '../../redux/gameState/gameStateActions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../redux/gameState/store';\n\nimport { getIcon } from '../../helpers/iconExporter'\n\n\nexport const NewGameMenu: React.FC = () => {\n\n  const FirePawn = getIcon('firePawn');\n  const HexagonPawn = getIcon('hexagonPlayerPawn');\n  const FlowerPawn = getIcon('flowerPawn');\n  const RombPawn = getIcon('rombPawn')\n  const SunPawn = getIcon('sunPawn')\n  const SquarePawn = getIcon('squarePawn')\n\n  function handleChange(event: ChangeEvent<HTMLInputElement>): void {\n    event.preventDefault()\n    if (event.target) {\n      updateInput(state => ({\n        ...state,\n        [event.target.name]: event.target.value\n      }))\n    }\n\n  }\n  const [input, updateInput] = useState({ name: '', color: '', room: '' })\n  const dispatch = useDispatch();\n\n\n  const handleSelect = (color: string) => {\n    let selectedPawn: string = 'none';\n    selectedPawn = color === input.color ? 'none' : color;\n\n    updateInput(state => ({\n      ...state,\n      color: selectedPawn\n    }))\n\n  }\n\n  const addPlayer = (event: React.MouseEvent<HTMLElement>) => {\n    event.preventDefault()\n    dispatch(AddPlayerAction(input.name, input.color, input.room))\n  }\n\n\n  return (\n    <form className='form' >\n      <div className='menu-container'>\n        <div className='title-container'>\n          <h3 style = {{color:'royalblue'}}>Welcome to Viral</h3>\n        </div>\n        <input\n          type='text'\n          name='name'\n          value={input.name}\n          placeholder='Player name '\n          onChange={handleChange}\n        ></input>\n\n\n        <input\n          type='text'\n          name='room'\n          value={input.room}\n          placeholder='Room '\n          onChange={handleChange}\n\n        ></input>\n        <div className='colors-container' >\n          <FirePawn className=\"icon\"\n            style={{ transform: (input.color === 'orange') ? 'scale(1.7)' : 'none' }}\n            onClick={() => handleSelect('orange')}\n          />\n\n          <HexagonPawn className=\"icon\"\n            style={{ transform: (input.color === 'green') ? 'scale(1.7)' : 'none' }}\n            onClick={() => handleSelect('green')}\n          />\n\n          <FlowerPawn className=\"icon\"\n            style={{ transform: (input.color === 'pink') ? 'scale(1.7)' : 'none' }}\n            onClick={() => handleSelect('pink')}\n          />\n\n          <RombPawn className=\"icon\"\n            style={{ transform: (input.color === 'blue') ? 'scale(1.7)' : 'none' }}\n            onClick={() => handleSelect('blue')}\n          />\n          <SunPawn className=\"icon\"\n            style={{ transform: (input.color === 'yellow') ? 'scale(1.7)' : 'none' }}\n            onClick={() => handleSelect('yellow')}\n          />\n\n          <SquarePawn className=\"icon\"\n            style={{ transform: (input.color === 'red') ? 'scale(1.7)' : 'none' }}\n            onClick={() => handleSelect('red')}\n          />\n        </div>\n\n        <button className='start_game_button' type='submit' onClick={addPlayer} >\n          Play\n        </button>\n      </div >\n    </form >\n  );\n};","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\GameOver\\gameOver.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\YouWon\\youWon.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\reduxTypes.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\initialState.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\InfoModal\\InfoModal.tsx",["154","155"],"import React, { useState } from 'react';\nimport './InfoModal.scss';\n\n\nexport const InfoModal: React.FC = () => {\n\n\n  const onClose = () => {\n\n  };\n\n  return (\n\n    <div className='modal_body'>\n      <h4>Welcome to Viral!</h4>\n      <p className='text'>\n        In this game you have to travel around town cleaning up misinformation from various sources.\n        You can either travel to an adjacent source or fast travel by using one of your cards. Each player can make 4 actions, either moving or cleaning, on each turn.\n        After each turn additional misinformation will spread throughout the town so you’ll have to act quickly!\n        The amount of misinformation which spreads each turn depends on the spread level. If a third marker of misinformation is put on a source there is an outbreak spreading it to adjacent sources.\n        Each outbreak increases the chaos meter!\n        After each turn the player also collects two source cards. The spread increases each time one of those source cards turns out to be one of the 3 hidden Viral cards!\n        To win you must debunk all three types of misinformation.\n        Each type of misinformation is debunked by collection 4 source cards representing that type of misinformation.\n        The game is over if the chaos meter increases to 100%, you run out of source cards or if you run out of any type of misinformation marker.\n        Good luck!\n          </p>\n    </div>\n\n\n\n  );\n};","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\CureDeck\\CureDeck.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\MarkersStore\\MarkersStore.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\sourceDeck\\sourceDeck.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\SpreadLevel\\SpreadLevel.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\MisinformationDeck\\misinformationDeck.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\PlayerPrompt\\PlayerPrompt.tsx",["156"],"import React,{useEffect, useRef} from 'react';\nimport {messages} from '../../logic/moves'\nimport { Gamestate } from '../../types/gameStateTypes'\n\nimport \"./PlayerPrompt.scss\"\n\nexport interface PlayerPromptProps {\n  state:Gamestate\n}\n\n\nexport const PlayerPrompt: React.FC<PlayerPromptProps> = ({state}:PlayerPromptProps) => {\n  const h1Ref = useRef<HTMLHeadingElement>(null);\n\n\n  const scrollToBottom = () => {\n    h1Ref.current?.scrollIntoView({\n      behavior: \"smooth\",\n      block: \"start\",\n    });\n  }\n\n  useEffect(() => {\n    scrollToBottom()\n    \n  }, [state])\n\n\n\n  return (\n    <div className=\"player-prompt-container\" >\n      {messages.map(msg => {\n        let player = state.players.filter(player => {\n          if (msg.search(player.name) !== -1 ) {\n            return player \n          }})[0]\n        return (\n          <div className=\"single-message\"\n            style={{ border: `2px solid ${player.pawnColor}` }}>{msg}</div>)\n      })}\n      \n\n      <div ref={h1Ref}></div>\n    </div>\n  )\n}","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\ChaosMeter\\ChaosMeter.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\SourceParent\\SourceParent.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\OtherPlayer\\OtherPlayer.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\CardHand\\CardHand.tsx",["157"],"import React from 'react';\nimport { SourceCard, } from '../SourceCard/SourceCard';\nimport { RootState } from '../../redux/gameState/store'\nimport { useSelector } from 'react-redux';\nimport { Card as SourceCardType } from '../../types/gameStateTypes';\nimport './CardHand.scss'\n\n\nexport const CardHand: React.FC = () => {\n\n\n  const Player = useSelector((state: RootState) => state.playerStateReducer);\n  const cards = useSelector((state: RootState) => state.gameStateReducer.players.filter(player => player.id === Player.id)[0].cards);\n  //console.log(`%c REMAINING PLAYER CARDS`,`background-color: lightgray; color: indigo; padding: 10px`);\n\n  const renderCards = (cardArray: SourceCardType[]) => {\n\n    return cardArray.map(card => {\n      if(card.cardType !=='viral' ) {\n        return <SourceCard name={card.sourceName} category={card.misinfoType} canShare={[]} />\n      }  else {\n        <h1> this is a viral card you are trying you are passing </h1>\n      }\n    })\n  }\n\n  return (\n    <div className=\"source-card-hand\">\n      {renderCards(cards)}\n    </div>\n  )\n}\n","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\logic\\connections.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\helpers\\utils.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\Source\\Source.tsx",["158"],"import React, { useEffect, useState } from 'react';\nimport { Player, Source } from '../../types/gameStateTypes'\nimport { getIcon } from '../../helpers/iconExporter'\nimport { toCamelCase, toKebabCase } from '../../helpers/utils';\nimport './Source.scss'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { clearMisinfoAction, debunkMisinfoAction, moveAction, logOnOffAction } from '../../redux/gameState/gameStateActions';\nimport { RootState } from '../../redux/gameState/store';\nimport { PlayerPawn } from '../PlayerPawn/PlayerPawn';\nimport { ModalComponent } from './DebunkModal';\n\n\n\nexport interface SourceProps {\n  source: Source;\n}\n\n\nexport const SourceComponent: React.FC<SourceProps> = ({ source }: SourceProps) => { // SVGIcon\n\n\n  const dispatch = useDispatch()\n  const gamestate = useSelector((state: RootState) => state.gameStateReducer)\n  const currentPlayer = useSelector((state: RootState) => state.gameStateReducer.players.filter(player => player.isCurrent === true))[0]\n\n  const allPlayers = useSelector((state: RootState) => state.gameStateReducer.players)\n\n\n  const [modalIsOpen, setIsOpen] = useState(false)\n  const [selectedDebunkCards, setselectedDebunkCards] = useState([])\n\n  let { name, markers_community, markers_social, markers_relations,\n    canMove, canLogOff, canLogOn, canClearCommunity,\n    canClearRelations, canClearSocial, canShare, canDebunk, misinfoType } = source;\n\n\n\n  useEffect(() => {\n\n  }, [modalIsOpen])\n  useEffect(() => {\n\n  }, [selectedDebunkCards])\n\n  const SVGIconSource: React.FunctionComponent<React.SVGProps<SVGSVGElement>>\n    = getIcon(toCamelCase(name) + 'Icon');\n  const SVGIconSourceOverlay: React.FunctionComponent<React.SVGProps<SVGSVGElement>>\n    = getIcon(toCamelCase(name) + 'Icon');\n\n\n  const getMarker = (category: string, num: number, canBeCleared: boolean, canDebunk: string[]) => {\n    if (num > 0 && canDebunk.includes(category)) {\n\n      const DebunkableIcon = getIcon(toCamelCase(`marker ${category} ${num}`))\n      return (<div onClick={() => debunkMisinforamtion(category)}><DebunkableIcon /></div>)\n\n    }\n\n\n    if (num > 0 && canBeCleared) {\n      \n      const ClearableIcon = getIcon(toCamelCase(`marker ${category} ${num}`))\n      \n\n      return (<div onClick={() => clearMisinformationbyOne(category)}><ClearableIcon /></div>)\n\n    }\n    if (num > 0) {\n     \n      const Icon = getIcon(toCamelCase(`marker ${category} ${num}`));\n      return <Icon className={`size${num}`} />;\n    }\n  }\n\n  const debunkMisinforamtion = (category: string) => {\n\n    setIsOpen(true)\n\n    setTimeout(async () => {\n      try {\n\n        dispatch(debunkMisinfoAction({\n          oldState: gamestate, currentPlayerID: currentPlayer.id,\n          misinfoType: category, usedCards: selectedDebunkCards\n        }))\n\n        alert(\"OK\");\n      } catch (err) {\n        alert(\"CANCEL\");\n      }\n    }, 7000);\n\n\n  }\n\n  const clearMisinformationbyOne = (misinfoType: string) => {\n   \n    dispatch(clearMisinfoAction({ oldState: gamestate, currentPlayerID: currentPlayer.id, misinfoType, location: source.name }))\n  }\n\n\n  const getPlayerPawns = () => {\n    let test: Player[] = [];\n    for (const player of allPlayers) {\n      if (player.currentSource === source.name && !test.includes(player)) {\n        test.push(player)\n\n      }\n    }\n\n    if (test.length > 0) return test.map(player => {\n      return <PlayerPawn color={player.pawnColor} />\n    })\n    else return null\n\n  }\n\n\n  const changePlayersCurrentSource = () => {\n    dispatch(moveAction({ oldState: gamestate, currentPlayerID: currentPlayer.id, location: source.name }))\n  }\n\n  const logonToNewSource = () => {\n    dispatch(logOnOffAction({ oldState: gamestate, currentPlayerID: currentPlayer.id, location: source.name, usedCard: source.name }))\n  }\n\n  const logoffToNewSource = () => {\n    const spentCard = gamestate.players.filter(player => player.id === currentPlayer.id)[0].currentSource;\n    dispatch(logOnOffAction({ oldState: gamestate, currentPlayerID: currentPlayer.id, location: source.name, usedCard: spentCard }))\n  }\n\n\n  let canMoveClassName = canMove ? 'can-move-to' : ''\n  let canLogOffClassName = canLogOff ? 'can-log-off' : ''\n  let canLogOnClassName = canLogOn ? 'can-log-on' : ''\n  let canDebunkClassName = canDebunk ? 'can-debunk' : ''\n\n  function unclickableMessage () {return null}\n\n  const closeModal = () => {\n\n    setIsOpen(false)\n\n  }\n\n\n  return (\n    <>\n      {modalIsOpen ? <ModalComponent modalIsOpen={modalIsOpen} closeModal={closeModal} setselectedDebunkCards={setselectedDebunkCards} /> : null}\n\n\n\n      <div\n        onClick={\n          canLogOff ?\n            logoffToNewSource :\n            canLogOn ?\n              logonToNewSource :\n              canMove ?\n                changePlayersCurrentSource :\n                unclickableMessage}\n        className={`source-container ${toKebabCase(name)} ${canLogOffClassName} ${canLogOnClassName} ${canMoveClassName} ${source.misinfoType} ${canDebunkClassName} `} >\n\n        <SVGIconSource />\n        <SVGIconSourceOverlay />\n        <div className={`markers-container ${misinfoType}`}>\n          {getMarker('community', markers_community, canClearCommunity, canDebunk)}\n          {getMarker('social', markers_social, canClearSocial, canDebunk)}\n          {getMarker('relations', markers_relations, canClearRelations, canDebunk)}\n        </div>\n        <div className=\"player-pawn-container\">\n          {getPlayerPawns()}\n        </div>\n      </div>\n    </>\n\n  )\n}\n","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\SourceCard\\SourceCard.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\Source\\DebunkModal.tsx",["159","160","161"],"import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../redux/gameState/store';\nimport { SourceCard } from '../SourceCard/SourceCard';\nimport { Card } from '../../types/gameStateTypes';\nimport ReactModal from 'react-modal';\n\n//TODO\n\n\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)'\n  }\n};\n\n\ninterface ModalProps {\n  modalIsOpen: boolean,\n  closeModal: Function,\n  setselectedDebunkCards: Function\n}\n\ninterface CardWithId extends Card {\n  id: string\n\n}\n\nexport function ModalComponent({ modalIsOpen, closeModal, setselectedDebunkCards, }: ModalProps) {\n  const playerId = useSelector((state: RootState) => state.playerStateReducer.id)\n\n  const players = useSelector((state: RootState) => state.gameStateReducer.players)\n\n  const [pickedCards, setpickedCards] = useState<CardWithId[]>([])\n\n\n  const fakeCards: Card[] = [{ cardType: \"connection\", sourceName: \"Instagram\", misinfoType: \"yellow\" },\n  { cardType: \"connection\", sourceName: \"Instagram\", misinfoType: \"yellow\" },\n  { cardType: \"connection\", sourceName: \"Instagram\", misinfoType: \"yellow\" }]\n\n  const fakeCardsWithIdInit: CardWithId[] = fakeCards.map((card) => {\n    (card as CardWithId).id = uid()\n    return card\n  }) as CardWithId[]\n\n  const [fakeCardsWithId, setfakeCardsWithId] = useState(fakeCardsWithIdInit)\n\n\n  useEffect(() => {\n    console.log('pickedCards from UseEffect', pickedCards)\n\n  }, [pickedCards])\n\n\n  function uid(rounds: number = 1) {\n    let uid = '';\n    while (rounds > 0) {\n      uid += Math.random().toString(32).substring(2, 10);\n      rounds -= 1;\n    }\n    return uid;\n  }\n\n\n  function afterOpenModal() {\n    // references are now sync'd and can be accessed.\n  }\n\n  function sendcloseModal(e: any) {\n    e.preventDefault()\n    console.log('Close Modal')\n\n    const pickedCardsAsCard: Card[] = pickedCards.map((cardWithId) => {\n      const card: Card = { cardType: cardWithId.cardType, sourceName: cardWithId.sourceName, misinfoType: cardWithId.misinfoType }\n      return card\n    }) as Card[]\n\n    setselectedDebunkCards(pickedCardsAsCard)\n    closeModal()\n  }\n\n  const clickOnCard = (e: React.MouseEvent<HTMLElement>, fakeCard: CardWithId) => {\n    console.log(e.target);\n    let div = e.target as HTMLInputElement;\n\n    if (!div.classList.contains('selected')) {\n      div.classList.add('selected')\n      setpickedCards(prev => [...prev, fakeCard])\n\n    } else {\n      div.classList.remove('selected')\n\n      const filtered = pickedCards.filter(card => card.id !== fakeCard.id)\n\n      console.log('filtered cards ', filtered)\n      setpickedCards(filtered)\n    }\n\n\n\n\n\n  }\n\n  return (\n    <div>\n\n      <ReactModal\n        ariaHideApp={false}\n        isOpen={modalIsOpen}\n        onAfterOpen={afterOpenModal}\n        onRequestClose={sendcloseModal}\n        style={customStyles}\n        contentLabel=\"Example Modal\"\n      >\n\n        {pickedCards.map((pickedCard, index) => <div style={{ height: 50, borderWidth: 'solid' }} key={index}\n          onClick={(e) => clickOnCard(e, pickedCard)}>\n          <SourceCard name={pickedCard.sourceName} category={pickedCard.cardType} canShare={[]} />\n\n        </div>)}\n\n        <div style={{ border: \"1px solid black\" }}></div>\n\n\n        {fakeCardsWithId.map((fakeCard, index) => <div style={{ height: 50, borderWidth: 'solid' }} key={index}\n          onClick={(e) => clickOnCard(e, fakeCard)}>\n          <SourceCard name={fakeCard.sourceName} category={fakeCard.cardType} canShare={[]} />\n\n        </div>)}\n        <button onClick={sendcloseModal}>Send</button>\n      </ReactModal>\n    </div>\n  );\n}","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\PlayerPawn\\PlayerPawn.tsx",[],["162","163"],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\logic\\moves.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\logic\\setup.ts",[],{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":5,"column":23,"nodeType":"170","messageId":"171","endLine":5,"endColumn":34},{"ruleId":"168","severity":1,"message":"172","line":6,"column":10,"nodeType":"170","messageId":"171","endLine":6,"endColumn":19},{"ruleId":"168","severity":1,"message":"173","line":1,"column":17,"nodeType":"170","messageId":"171","endLine":1,"endColumn":25},{"ruleId":"168","severity":1,"message":"174","line":8,"column":9,"nodeType":"170","messageId":"171","endLine":8,"endColumn":16},{"ruleId":"175","severity":1,"message":"176","line":33,"column":50,"nodeType":"177","messageId":"178","endLine":33,"endColumn":52},{"ruleId":"175","severity":1,"message":"179","line":18,"column":31,"nodeType":"177","messageId":"178","endLine":18,"endColumn":33},{"ruleId":"168","severity":1,"message":"180","line":34,"column":40,"nodeType":"170","messageId":"171","endLine":34,"endColumn":48},{"ruleId":"168","severity":1,"message":"181","line":36,"column":9,"nodeType":"170","messageId":"171","endLine":36,"endColumn":17},{"ruleId":"168","severity":1,"message":"182","line":38,"column":9,"nodeType":"170","messageId":"171","endLine":38,"endColumn":16},{"ruleId":"168","severity":1,"message":"183","line":52,"column":27,"nodeType":"170","messageId":"171","endLine":52,"endColumn":45},{"ruleId":"164","replacedBy":"184"},{"ruleId":"166","replacedBy":"185"},"no-native-reassign",["186"],"no-negated-in-lhs",["187"],"@typescript-eslint/no-unused-vars","'useSelector' is defined but never used.","Identifier","unusedVar","'RootState' is defined but never used.","'useState' is defined but never used.","'onClose' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a value to be returned at the end of arrow function.","'canShare' is assigned a value but never used.","'playerId' is assigned a value but never used.","'players' is assigned a value but never used.","'setfakeCardsWithId' is assigned a value but never used.",["186"],["187"],"no-global-assign","no-unsafe-negation"]