[{"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\stories\\Button.stories.tsx":"1","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\stories\\Page.stories.tsx":"2","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\stories\\Header.stories.tsx":"3","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\components\\Source\\Source.stories.tsx":"4","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\components\\SourceCard\\SourceCard.stories.tsx":"5","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\components\\Source\\Source.tsx":"6","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\components\\SourceCard\\SourceCard.tsx":"7","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\stories\\Header.tsx":"8","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\stories\\Page.tsx":"9","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\stories\\Button.tsx":"10","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\helpers\\iconExporter.ts":"11","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\components\\OtherPlayer\\OtherPlayer.stories.tsx":"12","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\types\\connections.ts":"13","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\components\\OtherPlayer\\OtherPlayer.tsx":"14","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\helpers\\utils.ts":"15","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\components\\CureDeck\\CureDeck.stories.tsx":"16","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\components\\SpreadLevel\\SpreadLevel.stories.tsx":"17","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\components\\SpreadLevel\\SpreadLevel.tsx":"18","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\components\\CureDeck\\CureDeck.tsx":"19","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\index.tsx":"20","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\reportWebVitals.ts":"21","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\App.tsx":"22","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\socket-io-client\\socket-io-client.tsx":"23","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\store.tsx":"24","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\gameStateActions.ts":"25","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\gameStateReducer.ts":"26","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\playerReducer.ts":"27","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\reduxTypes.ts":"28","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\logic\\actions.newState_CO.ts":"29","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\logic\\actions.MW.ts":"30","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\logic\\dummyState.REDO_CO.ts":"31","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\logic\\connections.ts":"32"},{"size":1089,"mtime":1612348325619,"results":"33","hashOfConfig":"34"},{"size":605,"mtime":1612224438438,"results":"35","hashOfConfig":"34"},{"size":510,"mtime":1612224438435,"results":"36","hashOfConfig":"34"},{"size":3063,"mtime":1612517334090,"results":"37","hashOfConfig":"34"},{"size":3091,"mtime":1612517334094,"results":"38","hashOfConfig":"34"},{"size":1776,"mtime":1612559511408,"results":"39","hashOfConfig":"34"},{"size":708,"mtime":1612517334095,"results":"40","hashOfConfig":"34"},{"size":1356,"mtime":1612224438436,"results":"41","hashOfConfig":"34"},{"size":2415,"mtime":1612224438439,"results":"42","hashOfConfig":"34"},{"size":941,"mtime":1612310291243,"results":"43","hashOfConfig":"34"},{"size":4132,"mtime":1612554579537,"results":"44","hashOfConfig":"34"},{"size":4299,"mtime":1612548472936,"results":"45","hashOfConfig":"34"},{"size":2978,"mtime":1612517334100,"results":"46","hashOfConfig":"34"},{"size":2148,"mtime":1612548472940,"results":"47","hashOfConfig":"34"},{"size":310,"mtime":1612517334097,"results":"48","hashOfConfig":"34"},{"size":645,"mtime":1612543704206,"results":"49","hashOfConfig":"34"},{"size":584,"mtime":1612543704215,"results":"50","hashOfConfig":"34"},{"size":701,"mtime":1612543704216,"results":"51","hashOfConfig":"34"},{"size":1223,"mtime":1612563507439,"results":"52","hashOfConfig":"34"},{"size":478,"mtime":1612268398394,"results":"53","hashOfConfig":"34"},{"size":425,"mtime":1612223687002,"results":"54","hashOfConfig":"34"},{"size":861,"mtime":1612564220930,"results":"55","hashOfConfig":"34"},{"size":1607,"mtime":1612564220938,"results":"56","hashOfConfig":"34"},{"size":562,"mtime":1612548120694,"results":"57","hashOfConfig":"34"},{"size":2341,"mtime":1612564220934,"results":"58","hashOfConfig":"34"},{"size":1821,"mtime":1612564220935,"results":"59","hashOfConfig":"34"},{"size":694,"mtime":1612564220936,"results":"60","hashOfConfig":"34"},{"size":2408,"mtime":1612564220937,"results":"61","hashOfConfig":"34"},{"size":12427,"mtime":1612548120686,"results":"62","hashOfConfig":"34"},{"size":9962,"mtime":1612548120685,"results":"63","hashOfConfig":"34"},{"size":3009,"mtime":1612564220933,"results":"64","hashOfConfig":"34"},{"size":2972,"mtime":1612548120687,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"14h2wr3",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"68"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"68"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"68"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"109"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"109"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"109"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\stories\\Button.stories.tsx",[],["139","140"],"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\stories\\Page.stories.tsx",[],"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\stories\\Header.stories.tsx",[],"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\components\\Source\\Source.stories.tsx",[],"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\components\\SourceCard\\SourceCard.stories.tsx",["141","142"],"import React from 'react';\n// also exported from '@storybook/react' if you can deal with breaking changes in 6.1\nimport { Story, Meta } from '@storybook/react/types-6-0';\nimport { SourceCard, SourceCardProps } from './SourceCard';\nimport { withDesign } from 'storybook-addon-designs'\n\nexport default {\n  title: 'Source Card',\n  component: SourceCard,\n  decorators: [withDesign]\n} as Meta;\n\nconst Template: Story<SourceCardProps> = (args: SourceCardProps) => <SourceCard {...args} />\n\nexport const HighSchool = Template.bind({});\nHighSchool.args = {\n  name: 'high school',\n  category: 'community'\n}\n\n\nexport const Taxi = Template.bind({});\nTaxi.args = {\n  name: 'taxi',\n  category: 'community'\n}\n\nexport const LocalCult = Template.bind({})\nLocalCult.args = {\n  name: 'local cult',\n  category: 'community'\n}\n\nexport const Pub = Template.bind({});\nPub.args = {\n  name: 'pub',\n  category: 'community'\n}\n\nexport const University = Template.bind({});\nUniversity.args = {\n  name: 'university',\n  category: 'community'\n}\n\nexport const HairSalon = Template.bind({});\nHairSalon.args = {\n  name: 'hair salon',\n  category: 'community'\n}\n\nexport const Gym = Template.bind({});\nGym.args = {\n  name: 'gym',\n  category: 'community'\n}\n\nexport const ASDA = Template.bind({});\nASDA.args = {\n  name: 'asda',\n  category: 'community'\n}\n\nexport const UncleEugene = Template.bind({});\nUncleEugene.args = {\n  name: 'uncle eugene',\n  category: 'relations'\n}\n\nexport const MotherInLaw = Template.bind({});\nMotherInLaw.args = {\n  name: 'mother-in-law',\n  category: 'relations'\n}\n\nexport const Cousin = Template.bind({});\nCousin.args = {\n  name: 'cousin',\n  category: 'relations'\n}\n\nexport const FranFromHR = Template.bind({});\nFranFromHR.args = {\n  name: 'fran from hr',\n  category: 'relations'\n}\n\nexport const EvilEx = Template.bind({});\nEvilEx.args = {\n  name: 'evil ex',\n  category: 'relations'\n}\n\nexport const GuyAtTheBusStop = Template.bind({});\nGuyAtTheBusStop.args = {\n  name: 'guy at the bus stop',\n  category: 'relations'\n}\n\nexport const CrazyDave = Template.bind({});\nCrazyDave.args = {\n  name: 'crazy dave',\n  category: 'relations'\n}\n\nexport const OpinionatedGrandpa = Template.bind({});\nOpinionatedGrandpa.args = {\n  name: 'opinionated grandpa',\n  category: 'relations'\n}\n\nexport const Illuminatify = Template.bind({});\nIlluminatify.args = {\n  name: 'illuminatify',\n  category:'social'\n}\n\nexport const YouTube = Template.bind({});\nYouTube.args = {\n  name: 'youtube',\n  category: 'social'\n}\n\nexport const Instagram = Template.bind({});\nInstagram.args = {\n  name: 'instagram',\n  category: 'social'\n}\n\nexport const Facebook = Template.bind({});\nFacebook.args = {\n  name: 'facebook',\n  category: 'social'\n}\n\nexport const Reddit = Template.bind({});\nReddit.args = {\n  name: 'reddit',\n  category: 'social'\n}\n\nexport const Twitter = Template.bind({});\nTwitter.args = {\n  name: 'twitter',\n  category: 'social'\n}\n\nexport const WhatsApp = Template.bind({});\nWhatsApp.args = {\n  name: 'whatsapp',\n  category: 'social'\n}\n\nexport const TikTok = Template.bind({});\nTikTok.args = {\n  name: 'tiktok',\n  category: 'social'\n}","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\components\\Source\\Source.tsx",["143","144","145"],"import React from 'react';\nimport { getIcon } from '../../helpers/iconExporter'\nimport { toCamelCase } from '../../helpers/utils';\n\n\nexport interface SourceProps {\n  name: string,\n  category: string,\n}\n\n\n\n// highlighted to show canMove, canLogon (single source which), canLogoff\n\n// 3 markers & can clear?\n\n// pawn <-- use otherPlayer, (canShare in otherPlayer)\n\n// canMove: white transparent overlay (AWAY LOCATION)\n// canLogon: blue border? (AWAY LOCATION)\n// canLogoff: green border? (AWAY LOCATION)\n// canLogon and Logoff: split blue/green border (AWAY LOCATION)\n\n// with social marker: red dot on corner w/ number 1,2,3 (BOTH CURRENT & AWAY)\n//    canClear that marker: slow flashing (CURRENT LOCATION)\n// with community marker: yellow triangle on corner w/ number 1,2,3 (BOTH CURRENT & AWAY)\n//    canClear that marker: slow flashing (CURRENT LOCATION)\n// with relations marker: blue square on corner w/ number 1,2,3 (BOTH CURRENT & AWAY)\n//    canClear that marker: slow flashing (CURRENT LOCATION)\n\nexport const Source: React.FC<SourceProps> = ({ name, category }: SourceProps) => { // SVGIcon\n  console.log('THIS IS THE NAME::::::: ', toCamelCase(name));\n  const SVGIconSource: React.FunctionComponent<React.SVGProps<SVGSVGElement>> = getIcon(toCamelCase(name) + 'Icon');\n  const SVGIconMarkerSocial: React.FunctionComponent<React.SVGProps<SVGSVGElement>> = getIcon(toCamelCase(name) + 'Icon');\n  const SVGIconMarkerRelations: React.FunctionComponent<React.SVGProps<SVGSVGElement>> = getIcon(toCamelCase(name) + 'Icon');\n  const SVGIconMarkerCommunity: React.FunctionComponent<React.SVGProps<SVGSVGElement>> = getIcon(toCamelCase(name) + 'Icon');\n\n\n\n  return (\n    <div className={`source-container ${name} ${category} `} >\n      <SVGIconSource />\n\n    </div>\n  )\n}\n\n","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\components\\SourceCard\\SourceCard.tsx",[],"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\stories\\Header.tsx",[],"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\stories\\Page.tsx",[],"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\stories\\Button.tsx",[],"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\helpers\\iconExporter.ts",[],"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\components\\OtherPlayer\\OtherPlayer.stories.tsx",[],"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\types\\connections.ts",[],"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\components\\OtherPlayer\\OtherPlayer.tsx",["146"],"import React from 'react';\nimport { Player } from '../../types/gameStateTypes';\nimport { getIcon } from '../../helpers/iconExporter';\nimport { toCamelCase } from '../../helpers/utils';\nimport { v4 as uuidv4 } from 'uuid';\nimport './OtherPlayer.css'\n// import { connections } from '../../../../logic/connections'\nimport { Connection } from '../../types/objects.REDO'\n\n\n\n\n// players: [\n//   {\n//     name: 'Player 1',\n//     id: '1234',\n//     cards: [],\n//     cardHandOverflow: false,\n//     isCurrent: true,\n//     pawnColor: 'green',\n//     currentSource: 'University'\n//   },\n//   {\n//     name: 'Player 2',\n//     id: '5678',\n//     cards: [],\n//     cardHandOverflow: false,\n//     isCurrent: true,\n//     pawnColor: 'purple',\n//     currentSource: 'University'\n//   },\n// ],\n\ninterface FakePlayer {\n  name: string;\n  cardHandFull: boolean;\n  cards: Connection[];\n  isCurrent: boolean;\n  pawnColor: string;\n  currentSource: string,\n}\n\nexport interface OtherPlayerProps {\n  player: FakePlayer\n}\n\n\nexport const OtherPlayer: React.FC<OtherPlayerProps> = ({ player }: OtherPlayerProps) => { // SVGIcon\n\n  const renderCards = (): JSX.Element[] => {\n    const angle = 40;\n    const numGaps = player.cards.length - 1;\n\n    return player.cards.map((card, index, cards) => {\n      const SVGIcon: React.FunctionComponent<React.SVGProps<SVGSVGElement>> = getIcon(toCamelCase(card.name) + 'Icon');\n      const rotationAngle = (numGaps * angle / 2) + index * angle - angle*numGaps;\n      return <div className=\"displace\" style={{\n        transform: ` rotate(${rotationAngle}deg)`,\n      }}>\n        <div\n          className=\"other-player-card\"\n          key={uuidv4()}\n          style={{\n            transform: `translateY(-50%) rotate(${-rotationAngle}deg)`,\n          }}\n        >\n          <SVGIcon />\n        </div>\n      </div>;\n    })\n  }\n  return (\n    <div className={`other-player-container ${player.name}`}  >\n      <div className={`player-avatar ${player.pawnColor} ${player.isCurrent ? 'current' : ''}`}>\n        <div className=\"player-hand\">\n          {renderCards()}\n        </div>\n        <p>{player.name}</p>\n      </div>\n    </div>\n  )\n}","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\helpers\\utils.ts",[],"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\components\\CureDeck\\CureDeck.stories.tsx",[],"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\components\\SpreadLevel\\SpreadLevel.stories.tsx",[],"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\components\\SpreadLevel\\SpreadLevel.tsx",[],"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\components\\CureDeck\\CureDeck.tsx",["147","148"],"import React from 'react';\nimport \"./CureDeck.css\"\nimport { DefaultRootState, useSelector } from 'react-redux'\nimport { RootState } from '../../redux/gameState/store';\n\n\nexport interface CureDeckProps {\n\n  hasACureForMisinformationA: boolean,\n  hasACureForMisinformationB: boolean,\n  hasACureForMisinformationC: boolean,\n\n}\n\n\n\nexport const CureDeck: React.FC<CureDeckProps> = ({ hasACureForMisinformationA\n  , hasACureForMisinformationB, hasACureForMisinformationC }: CureDeckProps) => { // SVGIcon\n  // using redux instead of props for real implementation\n  const gamestate = useSelector((state: RootState) => state.GameState.connectionDeck)\n\n\n\n  let noCureString = \"No cure - we're screwed\"\n  let cureString = \"We have a cure bitches!\"\n  const CureDeck = (<>\n    <div className=\"misinformation-cure-deck-container A\">{hasACureForMisinformationA ? cureString : noCureString}</div>\n    <div className=\"misinformation-cure-deck-container B\">{hasACureForMisinformationB ? cureString : noCureString}</div>\n    <div className=\"misinformation-cure-deck-container C\">{hasACureForMisinformationC ? cureString : noCureString}</div>\n\n\n  </>)\n\n  return (\n    <div className=\"cure-deck-container\" >\n      {CureDeck}\n    </div>\n  )\n}",["149","150"],"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\index.tsx",[],"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\reportWebVitals.ts",[],"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\App.tsx",["151","152","153"],"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\socket-io-client\\socket-io-client.tsx",["154"],"//based on change of state \nimport io from \"socket.io-client\";\nimport * as dotenv from 'dotenv';\nimport { RootState, store } from '../redux/gameState/store'\nimport { updateGameState } from \"../redux/gameState/gameStateActions\";\nimport { Gamestate } from \"../types/gameStateTypes\";\nimport { useSelector } from \"react-redux\";\n\n//connection to the server\ndotenv.config({ path: __dirname + '../.env' });\nconst socket = io(process.env.SERVER_URL || 'http://localhost:3002');\n\n\n// eslint-disable-next-line react-hooks/rules-of-hooks\nconst Player = useSelector((state: RootState) => state.Player);\n// eslint-disable-next-line react-hooks/rules-of-hooks\nconst GameState = useSelector((state: RootState) => state.GameState)\n\n// on click - 'start game' \nexport const joinRoom = (username: string, room: string) => {\n  socket.emit('joinRoom', Player);\n}\n\n// Message from server // welcome component \nsocket.on('joinConfirmation', (message: string) => {\n  console.log(message); // display message to the screen \n});\n\n\n//subscripion to any game state changes \nstore.subscribe(() => {\n  const newState = useSelector((state: RootState) => state.GameState)\n  socket.emit('onChangeState', { newState, Player })\n}\n)\n\n//data coming from backend after game state changed\nsocket.on('updatedState', (newState: Gamestate) => {\n  console.log('state is back to after user rejoins', newState)\n  newState.received = true;\n  store.dispatch(updateGameState(newState))\n})\n\n\n// on click when user wants to restart game \nexport const restartGame = () => {\n  joinRoom(Player.name, Player.room);\n  socket.emit('resumeGame', Player.room)\n}\n\n// how to we tell the users \nsocket.on('userLeft', (message: string) => console.log(message)) // need a end game button ","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\store.tsx",[],"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\gameStateActions.ts",[],"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\gameStateReducer.ts",[],"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\playerReducer.ts",[],"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\reduxTypes.ts",[],"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\logic\\actions.newState_CO.ts",[],"C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\logic\\actions.MW.ts",["155","156","157","158","159","160","161"],"import { Gamestate, Card, Source, Player } from '../types/gameStateTypes'\nimport { connections as sources } from './connections'\n\n//! HELPER HELPERS\nexport function shuffle(array: any[]) {\n  let currentIndex = array.length\n  let tempValue\n  let randomIndex\n\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1\n    tempValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = tempValue\n  }\n  return array;\n}\n\n\nexport function didWin(state: Gamestate) {\n  if (state.misinformation.community.debunked === true &&\n    state.misinformation.social.debunked === true &&\n    state.misinformation.relations.debunked === true)\n    return true\n  else return false;\n}\n\nexport function didLose(state: Gamestate) {\n  if (state.chaosMeter === 4)\n    return true\n  if (\n    state.misinformation.community.markersLeft === 0 ||\n    state.misinformation.social.markersLeft === 0 ||\n    state.misinformation.relations.markersLeft === 0\n  )\n    return true\n  if (state.connectionDeck.length === 0) {\n    return true\n  }\n  return false\n}\n\nexport function createConnectionDeck() {\n  let deck: Card[] = [];\n  for (const source of sources) {\n    deck.push({ cardType: 'connection', sourceName: source.name, misinfoType: source.category });\n  }\n  return deck;\n}\n\nexport function createMisinformationDeck() {\n  let deck: Card[] = [];\n  for (const source of sources) {\n    deck.push({ cardType: 'misinformation', sourceName: source.name, misinfoType: source.category });\n  }\n  return deck;\n}\n\nexport function createSources() {\n  let array: Source[] = [];\n  for (const source of sources) {\n    array.push({\n      name: source.name,\n      misinfoType: source.category,\n      markers_community: 0,\n      markers_social: 0,\n      markers_relations: 0,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    })\n  }\n  return array\n}\n\n//! SET STATE\n\nexport function playerOrder(oldState: Gamestate) { //! where to put this?\n  let players = oldState.players\n  let newPlayers = shuffle(players)\n  newPlayers[0].isCurrent = true\n  let newState = { ...oldState, newPlayers }\n  return newState\n}\n\nexport function insertViralCards(oldState: Gamestate) {\n  console.log('inserting viral cards to connection deck')\n  let oldDeck = oldState.connectionDeck\n\n  const viral1: Card = { cardType: \"viral\", sourceName: null, misinfoType: null }\n  const viral2: Card = { cardType: \"viral\", sourceName: null, misinfoType: null }\n  const viral3: Card = { cardType: \"viral\", sourceName: null, misinfoType: null }\n  let first = oldDeck.slice(0, (oldDeck.length / 3))\n  let second = oldDeck.slice((oldDeck.length / 3), (2 * oldDeck.length / 3))\n  let third = oldDeck.slice((2 * oldDeck.length / 3), oldDeck.length)\n\n  first.push(viral1)\n  second.push(viral2)\n  third.push(viral3)\n\n  first = shuffle(first)\n  second = shuffle(second)\n  third = shuffle(third)\n\n  let connectionDeck = [...first, ...second, ...third]\n\n  let newState = { ...oldState, connectionDeck }\n  return newState\n\n}\n\n\n//* spread level will define how many times this function is called \n\nexport function dealMisinfoCard(oldState: Gamestate, weight: number, isViral: boolean) {\n\n  let oldDeck: Card[] = oldState.misinformationDeckActive\n  let drawSource: string | null\n\n  if (isViral) {\n    drawSource = oldDeck[oldDeck.length - 1].sourceName\n  }\n  else {\n    drawSource = oldDeck[0].sourceName\n  }\n  console.log('dealing misinformation card', drawSource)\n\n  for (const source of oldState.sources) {\n\n    if (source.name === drawSource) {\n\n      while (weight > 0) {\n\n        let key = 'markers_' + source.misinfoType\n        let key2 = source.misinfoType\n        if (key === `markers_community` && key2 === `community`\n          || key === `markers_social` && key2 === `social`\n          || key === `markers_relations` && key2 === `relations`\n        ) {\n          if (source[key] === 3) {\n            oldState = outbreak(source, oldState)\n          }\n          else {\n\n            source[key]++\n            oldState.misinformation[key2].markersLeft--\n          }\n\n          didLose(oldState)\n\n\n\n          weight--\n        }\n      }\n    }\n    if (isViral) {\n      oldState.misinformationDeckPassive.push(oldDeck[oldDeck.length - 1])\n      oldState.misinformationDeckActive.shift()\n    }\n    else {\n      oldState.misinformationDeckPassive.push(oldDeck[0]) //! LOOK INTO THIS\n      oldState.misinformationDeckActive.shift()\n    }\n    let newState = { ...oldState }\n    return newState\n  }\n}\n\nexport function outbreak(outbreak_source: Source, oldState: Gamestate) {\n  console.log('outbreak!! chaos meter increases')\n  oldState.chaosMeter++\n  let connections!: string[];\n  for (const source of sources) {\n    if (source.name === outbreak_source.name) {\n      connections = source.connections  //* set list of connections to spread to\n    }\n  }\n  for (const connection of connections) {\n    for (const source of oldState.sources) {\n      if (source.name === connection) {\n        let key = outbreak_source.misinfoType\n        if (key === 'markers_community' || key === 'markers_relations' || key === 'markers_social')\n          if (source[key] === 3) {\n            oldState = outbreak(source, oldState)\n          }\n          else {\n            source[key]++\n          }\n\n      }\n    }\n  }\n  console.log('outbreak on', outbreak_source)\n  let newState = { ...oldState }\n  return newState\n}\n\n\n\nexport function dealConnectionCard(oldState: Gamestate) {\n  let newCard: Card = oldState.connectionDeck[0]\n\n\n\n  console.log('dealing connection card', newCard)\n\n  if (newCard.cardType === 'viral') {\n    oldState = viral(oldState)\n    oldState.connectionDeck.shift()\n  }\n  else {\n    for (const player of oldState.players) {\n      if (player.isCurrent) {\n        console.log('dealing connection card', newCard)\n        player.cards.push(newCard)\n        oldState.connectionDeck.shift()\n        if (player.cards.length > 6) {\n          let chosenCard = {\n            cardType: 'connection',\n            sourceName: 'University',\n            misinfoType: 'community',\n          } //* front end to give player choice of card to delete\n          //deleteCard(chosenCard, oldState)\n        }\n      }\n    }\n  }\n\n  let newState = { ...oldState }\n  return newState\n}\n\nexport function viral(oldState: Gamestate) {\n  console.log('viral card!!!')\n  oldState = dealMisinfoCard(oldState, 3, true)!\n\n  oldState.spreadLevel++\n  //* shuffle passive misinfo deck and put on top of active misinfo deck\n  oldState.misinformationDeckActive = [...shuffle(oldState.misinformationDeckPassive), ...oldState.misinformationDeckActive]\n  let newState = { ...oldState }\n  return newState\n}\n\n// export function deleteCard(card: Card, oldState: Gamestate) {\n//   for (const player of oldState.players) {\n//     if (player.isCurrent) {\n//       for (const [i, value] of player.cards.entries()) {\n//         if (value === card) {\n//           player.cards.splice(i, 1)\n//         }\n//       }\n//     }\n//   }\n//   let newState = { ...oldState }\n//   return newState\n\n// }\n\n\n\nexport function createPlayer(name: string, color: string, room: string) {\n\n  // update the state fo rthe player\n  let random = Math.floor(Math.random() * 100000)\n  const player = {\n    name,\n    id: String(random),\n    cards: [],\n    cardHandOverflow: false,\n    isCurrent: false,\n    pawnColor: color,\n    currentSource: 'crazy dave',\n    room: room\n  }\n  return player\n\n}\n\n\nexport function addPlayerToGame(player: Player, oldState: Gamestate) {\n\n  oldState.players.push(player)\n\n  let newState = { ...oldState }\n  return newState;\n}\n\nexport function setUp(players: Player[]) {\n\n  let cards;\n  let misinfo = 6;\n  let index = 0;\n  let weights = [3, 3, 2, 2, 1, 1]\n\n  const sources = createSources()\n  const spreadLevel = 0;\n  const chaosMeter = 0;\n  const misinformation = {\n    community: { name: 'community', debunked: false, markersLeft: 16 },\n    social: { name: 'social', debunked: false, markersLeft: 16 },\n    relations: { name: 'relations', debunked: false, markersLeft: 16 },\n  }\n  const withoutViral = shuffle(createConnectionDeck());\n  const misinformationDeckActive = shuffle(createMisinformationDeck());\n  const misinformationDeckPassive: Card[] = []\n  const dealHistory = 0;\n  const turnMovesLeft = 4;\n  const gameWon = false;\n  const gameLost = false;\n  const received = false;\n\n\n  let state = {\n    sources,\n    players,\n    spreadLevel,\n    chaosMeter,\n    misinformation,\n    connectionDeck: withoutViral,\n    misinformationDeckActive,\n    misinformationDeckPassive,\n    dealHistory,\n    turnMovesLeft,\n    gameWon,\n    gameLost,\n    received\n  }\n\n  if (state.players.length > 2) cards = 2;\n  else cards = 3\n\n  for (let i = 0; i < state.players.length; i++) { //* deal connection cards to players before inserting viral cards\n    console.log(state.players)\n    if (state.players.length > 2) cards = 2;\n    else cards = 3\n    while (cards > 0) {\n      state = dealConnectionCard(state)\n      cards--\n    }\n    state.players[i].isCurrent = false;\n    if (i !== state.players.length - 1) state.players[i + 1].isCurrent = true;\n    else state.players[0].isCurrent = true;\n  }\n\n  let updateState = insertViralCards({ ...state, connectionDeck: withoutViral })\n\n\n  while (misinfo > 0) {\n    let weight = weights[index]\n    updateState = dealMisinfoCard(updateState, weight, false)!\n    index++\n    misinfo--\n  }\n\n  let newState = { ...updateState }\n  return newState\n}\n\n\n// let array = [{\n//   name: 'Player 1',\n//   id: '1234',\n//   cards: [],\n//   cardHandOverflow: false,\n//   isCurrent: true,\n//   pawnColor: 'green',\n//   currentSource: 'crazy dave'\n// },\n// {\n//   name: 'Player 2',\n//   id: '5678',\n//   cards: [],\n//   cardHandOverflow: false,\n//   isCurrent: false,\n//   pawnColor: 'purple',\n//   currentSource: 'crazy dave'\n// },\n// ]\n\n\n\n\n\n\n\n\n\n","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\logic\\dummyState.REDO_CO.ts",["162","163","164","165","166"],"// this initial state presumes 2 players, 3 locations (one for each color), 3 connection and 3 misinfo cards, and 1 viral card.\n\nimport { Gamestate, Card, Source, Player, Misinformation, Connection } from '../types/gameStateTypes'\n\nexport const initDummyState: Gamestate = {\n  sources: [\n    {\n      name: 'University',\n      misinfoType: 'blue',\n      markers_community: 0,\n      markers_social: 0,\n      markers_relations: 0,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'Gym',\n      misinfoType: 'red',\n      markers_community: 0,\n      markers_social: 0,\n      markers_relations: 0,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n    {\n      name: 'Instagram',\n      misinfoType: 'yellow',\n      markers_community: 0,\n      markers_social: 0,\n      markers_relations: 0,\n      canMove: false,\n      canLogOn: false,\n      canLogOff: false,\n      canClearCommunity: false,\n      canClearSocial: false,\n      canClearRelations: false,\n      canShare: [],\n      canDebunk: [],\n    },\n  ],\n  players: [\n    {\n      name: 'Player 1',\n      id: '1234',\n      cards: [],\n      cardHandOverflow: false,\n      isCurrent: true,\n      pawnColor: 'green',\n      currentSource: 'University',\n      room: '12345'\n    },\n    {\n      name: 'Player 2',\n      id: '5678',\n      cards: [],\n      cardHandOverflow: false,\n      isCurrent: true,\n      pawnColor: 'purple',\n      currentSource: 'University',\n      room: '12345'\n    },\n  ],\n  spreadLevel: 1,\n  chaosMeter: 0,\n  misinformation: {\n    community: {\n      name: 'Misinfo Type 1',\n      debunked: false,\n      markersLeft: 16,\n    },\n    social: {\n      name: 'Misinfo Type 2',\n      debunked: false,\n      markersLeft: 16,\n    },\n    relations: {\n      name: 'Misinfo Type 3',\n      debunked: false,\n      markersLeft: 16,\n    },\n  },\n  connectionDeck: [\n    {\n      cardType: 'connection',\n      sourceName: 'University',\n      misinfoType: 'blue',\n    },\n    {\n      cardType: 'connection',\n      sourceName: 'Gym',\n      misinfoType: 'red',\n    },\n    {\n      cardType: 'connection',\n      sourceName: 'Instagram',\n      misinfoType: 'yellow',\n    },\n    {\n      cardType: 'viral',\n      sourceName: null,\n      misinfoType: null,\n    },\n  ],\n  misinformationDeckActive: [\n    {\n      cardType: 'misinformation',\n      sourceName: 'University',\n      misinfoType: 'blue',\n    },\n    {\n      cardType: 'misinformation',\n      sourceName: 'Gym',\n      misinfoType: 'red',\n    },\n    {\n      cardType: 'misinformation',\n      sourceName: 'Instagram',\n      misinfoType: 'yellow',\n    },\n  ],\n  misinformationDeckPassive: [],\n  turnMovesLeft: 4,\n  dealHistory: 0,\n  gameWon: false,\n  gameLost: false,\n  received: false,\n}","C:\\Users\\kgrac\\Documents\\coding_folder\\Codeworks\\Senior\\Thesis Project\\Viral\\client\\src\\logic\\connections.ts",[],{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","severity":1,"message":"172","line":1,"column":8,"nodeType":"173","messageId":"174","endLine":1,"endColumn":13},{"ruleId":"171","severity":1,"message":"175","line":3,"column":10,"nodeType":"173","messageId":"174","endLine":3,"endColumn":15},{"ruleId":"171","severity":1,"message":"176","line":34,"column":9,"nodeType":"173","messageId":"174","endLine":34,"endColumn":84},{"ruleId":"171","severity":1,"message":"177","line":35,"column":9,"nodeType":"173","messageId":"174","endLine":35,"endColumn":87},{"ruleId":"171","severity":1,"message":"178","line":36,"column":9,"nodeType":"173","messageId":"174","endLine":36,"endColumn":87},{"ruleId":"171","severity":1,"message":"179","line":2,"column":10,"nodeType":"173","messageId":"174","endLine":2,"endColumn":16},{"ruleId":"171","severity":1,"message":"180","line":3,"column":10,"nodeType":"173","messageId":"174","endLine":3,"endColumn":26},{"ruleId":"171","severity":1,"message":"181","line":20,"column":9,"nodeType":"173","messageId":"174","endLine":20,"endColumn":18},{"ruleId":"167","replacedBy":"182"},{"ruleId":"169","replacedBy":"183"},{"ruleId":"171","severity":1,"message":"184","line":2,"column":15,"nodeType":"173","messageId":"174","endLine":2,"endColumn":22},{"ruleId":"171","severity":1,"message":"185","line":8,"column":10,"nodeType":"173","messageId":"174","endLine":8,"endColumn":18},{"ruleId":"171","severity":1,"message":"186","line":12,"column":9,"nodeType":"173","messageId":"174","endLine":12,"endColumn":14},{"ruleId":"171","severity":1,"message":"187","line":17,"column":7,"nodeType":"173","messageId":"174","endLine":17,"endColumn":16},{"ruleId":"188","severity":1,"message":"189","line":142,"column":41,"nodeType":"190","messageId":"191","endLine":142,"endColumn":43},{"ruleId":"188","severity":1,"message":"189","line":143,"column":11,"nodeType":"190","messageId":"191","endLine":143,"endColumn":13},{"ruleId":"188","severity":1,"message":"192","line":143,"column":11,"nodeType":"190","messageId":"191","endLine":143,"endColumn":13},{"ruleId":"188","severity":1,"message":"192","line":143,"column":39,"nodeType":"190","messageId":"191","endLine":143,"endColumn":41},{"ruleId":"188","severity":1,"message":"192","line":144,"column":11,"nodeType":"190","messageId":"191","endLine":144,"endColumn":13},{"ruleId":"188","severity":1,"message":"192","line":144,"column":42,"nodeType":"190","messageId":"191","endLine":144,"endColumn":44},{"ruleId":"171","severity":1,"message":"193","line":225,"column":15,"nodeType":"173","messageId":"174","endLine":225,"endColumn":25},{"ruleId":"171","severity":1,"message":"194","line":3,"column":21,"nodeType":"173","messageId":"174","endLine":3,"endColumn":25},{"ruleId":"171","severity":1,"message":"195","line":3,"column":27,"nodeType":"173","messageId":"174","endLine":3,"endColumn":33},{"ruleId":"171","severity":1,"message":"179","line":3,"column":35,"nodeType":"173","messageId":"174","endLine":3,"endColumn":41},{"ruleId":"171","severity":1,"message":"196","line":3,"column":43,"nodeType":"173","messageId":"174","endLine":3,"endColumn":57},{"ruleId":"171","severity":1,"message":"197","line":3,"column":59,"nodeType":"173","messageId":"174","endLine":3,"endColumn":69},"no-native-reassign",["198"],"no-negated-in-lhs",["199"],"@typescript-eslint/no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'Story' is defined but never used.","'SVGIconMarkerSocial' is assigned a value but never used.","'SVGIconMarkerRelations' is assigned a value but never used.","'SVGIconMarkerCommunity' is assigned a value but never used.","'Player' is defined but never used.","'DefaultRootState' is defined but never used.","'gamestate' is assigned a value but never used.",["198"],["199"],"'Grommet' is defined but never used.","'CureDeck' is defined but never used.","'theme' is assigned a value but never used.","'GameState' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","'chosenCard' is assigned a value but never used.","'Card' is defined but never used.","'Source' is defined but never used.","'Misinformation' is defined but never used.","'Connection' is defined but never used.","no-global-assign","no-unsafe-negation"]