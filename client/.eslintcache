[{"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\index.tsx":"1","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\reportWebVitals.ts":"2","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\App.tsx":"3","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\socket-io-client\\socket-io-client.tsx":"4","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\StartGame.tsx":"5","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\store.tsx":"6","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\gameStateActions.ts":"7","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\playerReducer.ts":"8","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\helpers\\iconExporter.ts":"9","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\gameStateReducer.ts":"10","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\allGamesReducer.ts":"11","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\GameOn.tsx":"12","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\NewGameMenu\\NewGameMenu.tsx":"13","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\GameOver\\gameOver.tsx":"14","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\YouWon\\youWon.tsx":"15","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\reduxTypes.ts":"16","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\initialState.tsx":"17","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\InfoModal\\InfoModal.tsx":"18","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\CureDeck\\CureDeck.tsx":"19","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\MarkersStore\\MarkersStore.tsx":"20","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\sourceDeck\\sourceDeck.tsx":"21","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\SpreadLevel\\SpreadLevel.tsx":"22","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\MisinformationDeck\\misinformationDeck.tsx":"23","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\PlayerPrompt\\PlayerPrompt.tsx":"24","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\ChaosMeter\\ChaosMeter.tsx":"25","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\SourceParent\\SourceParent.tsx":"26","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\OtherPlayer\\OtherPlayer.tsx":"27","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\CardHand\\CardHand.tsx":"28","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\logic\\connections.ts":"29","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\helpers\\utils.ts":"30","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\Source\\Source.tsx":"31","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\SourceCard\\SourceCard.tsx":"32","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\Source\\DebunkModal.tsx":"33","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\PlayerPawn\\PlayerPawn.tsx":"34","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\logic\\moves.ts":"35","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\logic\\setup.ts":"36"},{"size":500,"mtime":1612774295908,"results":"37","hashOfConfig":"38"},{"size":425,"mtime":1612257005249,"results":"39","hashOfConfig":"38"},{"size":412,"mtime":1612986386637,"results":"40","hashOfConfig":"38"},{"size":1966,"mtime":1612967373352,"results":"41","hashOfConfig":"38"},{"size":2329,"mtime":1613040419966,"results":"42","hashOfConfig":"38"},{"size":917,"mtime":1612974618227,"results":"43","hashOfConfig":"38"},{"size":3115,"mtime":1612901467689,"results":"44","hashOfConfig":"38"},{"size":702,"mtime":1613202375126,"results":"45","hashOfConfig":"38"},{"size":5352,"mtime":1613043420973,"results":"46","hashOfConfig":"38"},{"size":2820,"mtime":1613202377788,"results":"47","hashOfConfig":"38"},{"size":369,"mtime":1612901467688,"results":"48","hashOfConfig":"38"},{"size":4779,"mtime":1613043420967,"results":"49","hashOfConfig":"38"},{"size":3692,"mtime":1613040419959,"results":"50","hashOfConfig":"38"},{"size":753,"mtime":1612986386660,"results":"51","hashOfConfig":"38"},{"size":149,"mtime":1612892935157,"results":"52","hashOfConfig":"38"},{"size":3243,"mtime":1612901467695,"results":"53","hashOfConfig":"38"},{"size":1523,"mtime":1612862358488,"results":"54","hashOfConfig":"38"},{"size":1446,"mtime":1613061845000,"results":"55","hashOfConfig":"38"},{"size":1909,"mtime":1612990809175,"results":"56","hashOfConfig":"38"},{"size":738,"mtime":1612862358470,"results":"57","hashOfConfig":"38"},{"size":349,"mtime":1612782842860,"results":"58","hashOfConfig":"38"},{"size":831,"mtime":1612978672787,"results":"59","hashOfConfig":"38"},{"size":377,"mtime":1612778562574,"results":"60","hashOfConfig":"38"},{"size":1025,"mtime":1613202376929,"results":"61","hashOfConfig":"38"},{"size":1619,"mtime":1612974618205,"results":"62","hashOfConfig":"38"},{"size":1141,"mtime":1613040419964,"results":"63","hashOfConfig":"38"},{"size":4903,"mtime":1612978672786,"results":"64","hashOfConfig":"38"},{"size":1090,"mtime":1613141262576,"results":"65","hashOfConfig":"38"},{"size":3011,"mtime":1613042006183,"results":"66","hashOfConfig":"38"},{"size":556,"mtime":1612862358480,"results":"67","hashOfConfig":"38"},{"size":7226,"mtime":1613202376098,"results":"68","hashOfConfig":"38"},{"size":1842,"mtime":1613141262577,"results":"69","hashOfConfig":"38"},{"size":3972,"mtime":1612901467684,"results":"70","hashOfConfig":"38"},{"size":1194,"mtime":1613042006166,"results":"71","hashOfConfig":"38"},{"size":16875,"mtime":1613202576199,"results":"72","hashOfConfig":"38"},{"size":6540,"mtime":1613202360634,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"hmvcsi",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"76"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"76"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"76"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"76"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"76"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"76"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"76"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"76"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"76"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"76"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"76"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"76"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"76"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"76"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\index.tsx",[],["161","162"],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\reportWebVitals.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\App.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\socket-io-client\\socket-io-client.tsx",["163"],"//based on change of state \nimport io from \"socket.io-client\";\nimport * as dotenv from 'dotenv';\nimport { store } from '../redux/gameState/store'\nimport { GetAllGamesAction, updateGameState } from \"../redux/gameState/gameStateActions\";\nimport { Gamestate } from \"../types/gameStateTypes\";\nimport { Play } from \"grommet-icons\";\ndotenv.config({ path: __dirname + '../.env' });\nconst socket = io(process.env.SERVER_URL || 'http://localhost:3002');\n\n\nconst Player = store.getState().playerStateReducer\n\n// on click - 'start game' \nexport const joinRoom = (player: typeof Player) => {\n  socket.emit('joinRoom', player);\n}\n\n// Message from server // welcome component \nsocket.on('joinConfirmation', (message: string) => {\n  console.log(message); // display message to the screen \n\n});\n\n//subscripion to any game state changes \n\nstore.subscribe(() => {\n  const newState = store.getState().gameStateReducer\n  const Player = store.getState().playerStateReducer\n  // console.log(newState, 'NEW STATE FROM SUBSCRIBE ')\n  // console.log(Player, 'PLAYER')\n  if (!newState.received && Player && newState.gameOn) {\n    socket.emit('onChangeState', { newState, Player })\n  }\n})\n\n// const addPlayer = (player: typeof Player) => {\n//   socket.emit('addPlayerToGame', player)\n// }\n\n\n//data coming from backend after game state changed\nsocket.on('updatedState', (newState: Gamestate) => {\n  console.log('newstate from client ', newState)\n  newState.received = true;\n  store.dispatch(updateGameState(newState))\n})\n\nexport const getGame = (player: typeof Player) => {\n  // console.log(player, 'PLAYER ON GET GAME - WILL BE ADDED HERE')\n  player && socket.emit('retriveGame', player)\n\n}\n\nexport const getGames = () => {\n  socket.emit('getGames')\n  socket.on('games', (\n    (data: string[]) => {\n      store.dispatch(GetAllGamesAction(data))\n    }\n  ))\n}\ngetGames();\n\n\n\n// how to we tell the users \nsocket.on('userLeft', (message: string) => console.log(message)) // need a end game button ","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\StartGame.tsx",["164","165","166","167","168","169","170","171","172"],"\nimport React, { useEffect, useState } from 'react';\n// import { Box, Button, Grommet, Card, CardHeader, CardBody, CardFooter, Meter } from 'grommet';\n// import { Notification } from 'grommet-icons';\nimport { Provider, useDispatch, useSelector } from 'react-redux';\nimport { RootState, store } from '../redux/gameState/store';\nimport { getGame, getGames, joinRoom } from '../socket-io-client/socket-io-client';\nimport { CureDeck } from '../components/CureDeck/CureDeck';\nimport { getIcon } from '../helpers/iconExporter'\nimport { NewGameMenu } from '../components/NewGameMenu/NewGameMenu'\nimport { addPlayerToGameState, DealCardsToNewPlayerAction, StartGameAction } from '../redux/gameState/gameStateActions';\nimport { Gamestate, Player } from '../types/gameStateTypes';\nimport { GameOn } from './GameOn';\nimport { GameOver } from './GameOver/gameOver'\nimport { Winner } from './YouWon/youWon'\n\nexport const StartGame: React.FC = (): JSX.Element => {\n\n  const dispatch = useDispatch();\n  // const [showSidebar, setShowSidebar] = useState(false);\n  const player = useSelector((state: RootState) => state.playerStateReducer)\n  const allRooms = useSelector((state: RootState) => state.allGamesStateReducer)\n  const [stateRendered, updateStateRendered] = useState(false)\n  // let gameOn: boolean = false;\n  let state = useSelector((state: RootState) => state.gameStateReducer)\n\n  const startGame = (player: Player) => {\n    if (!stateRendered) {\n      joinRoom(player)\n      if (allRooms.filter(room => room === player.room).length > 0) {\n        getGame(player);\n        updateStateRendered(true)\n      } else {\n        dispatch(StartGameAction([player]))\n        updateStateRendered(true)\n      }\n    }\n  }\n  \n\n  const MapSVG = getIcon('map');\n  // const addPlayer = () => {\n  //   dispatch(addPlayerToGameState(player, gamestate))\n  // }\n\n  return (\n\n    <div className=\"start-game-container\">\n      {state.gameWon ?\n        <Winner /> :\n        state.gameLost ?\n          <GameOver /> :\n          (player.name.length < 1) ?\n\n\n            <NewGameMenu />\n\n            : (\n              (!stateRendered) ?\n                <h1>\n                  game loading ...\n          {startGame(player)}\n                </h1>\n                :\n                <GameOn rendered={stateRendered} />\n            )\n      }\n    </div>\n  )\n}\n\n\n\n\n\n\n\n\n","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\store.tsx",["173"],"\nimport { createStore } from \"redux\";\nimport { combineReducers } from 'redux'\nimport { playerStateReducer } from './playerReducer'\n\n\n// import {Gamestate} from '../../types/gameStateTypes'\nimport { gameStateReducer } from './gameStateReducer';\nimport { Gamestate, Player } from \"../../types/gameStateTypes\";\nimport { allGamesStateReducer } from '../gameState/allGamesReducer'\nimport { initialState } from \"./initialState\";\nexport const reducer = combineReducers({\n  playerStateReducer,\n  gameStateReducer,\n  allGamesStateReducer\n})\n/* eslint-disable no-underscore-dangle */\nexport const store = createStore(reducer,\n  (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\n  (window as any).__REDUX_DEVTOOLS_EXTENSION__());\n  /* eslint-enable */\n\n// export type RootState = ReturnType<typeof reducer>\nexport interface RootState {\n  playerStateReducer: Player\n  gameStateReducer: Gamestate,\n  allGamesStateReducer: String[]\n}","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\gameStateActions.ts",["174"],"import { ClearmisinfoProps, CLEAR_MISINFO, DebunkMisinfoProps, DEBUNK_MISINFO, discardCardProps, DISCARD_ACTION, logOnOffProps, LOG_ON_OFF, MoveActionProps, MOVE_ACTION, ShareCardProps, SHARE_CARD, UPDATE_GAME_STATE, GameStateActionTypes, PlayerStateActionTypes, ADD_PLAYER, GET_ALL_GAMES, AllGamesActionTypes, START_GAME, ADD_PLAYER_TO_GAME, DEAL_CARDS, dealCardsProp } from './reduxTypes';\nimport { Gamestate, Player, } from '../../types/gameStateTypes'\nimport { gameStateReducer } from './gameStateReducer';\n//Below are example of actions with typescript.\n// we need to create an action for each reduced case\n\n\nexport function moveAction(props: MoveActionProps): GameStateActionTypes {\n  const { oldState, currentPlayerID, location } = props\n  return {\n    type: MOVE_ACTION,\n    payload: { oldState, currentPlayerID, location }\n  }\n}\n\n\n\nexport function clearMisinfoAction(props: ClearmisinfoProps): GameStateActionTypes {\n  const { oldState, currentPlayerID, location, misinfoType } = props;\n  return {\n    type: CLEAR_MISINFO,\n    payload: { oldState, currentPlayerID, location, misinfoType }\n  }\n}\n\n\nexport function shareCardAction(props: ShareCardProps): GameStateActionTypes {\n  const { oldState, currentPlayerID, recipient, sharedCard } = props;\n  return {\n    type: SHARE_CARD,\n    payload: { oldState, currentPlayerID, recipient, sharedCard }\n  }\n}\n\nexport function logOnOffAction(props: logOnOffProps): GameStateActionTypes {\n  const { oldState, currentPlayerID, location, usedCard } = props;\n  return {\n    type: LOG_ON_OFF,\n    payload: { oldState, currentPlayerID, location, usedCard }\n  }\n}\nexport function debunkMisinfoAction(props: DebunkMisinfoProps): GameStateActionTypes {\n  const { oldState, currentPlayerID, usedCards, misinfoType } = props;\n  return {\n    type: DEBUNK_MISINFO,\n    payload: { oldState, currentPlayerID, usedCards, misinfoType }\n  }\n}\n\nexport function discardCardAction(props: discardCardProps): GameStateActionTypes {\n  const { oldState, currentPlayerID, discardedCard } = props;\n  return {\n    type: DISCARD_ACTION,\n    payload: { oldState, currentPlayerID, discardedCard }\n  }\n}\n//redux action to update whole gameState // examples\nexport function updateGameState(gameState: Gamestate): GameStateActionTypes {\n  return {\n    type: UPDATE_GAME_STATE,\n    payload: gameState\n  }\n}\n\nexport function AddPlayerAction(name: string, color: string, room: string): PlayerStateActionTypes {\n  return {\n    type: ADD_PLAYER,\n    payload: { name, color, room }\n  }\n}\n\nexport function GetAllGamesAction(array: string[]): AllGamesActionTypes {\n  return {\n    type: GET_ALL_GAMES,\n    payload: array\n  }\n}\n\n\nexport function StartGameAction(players: Player[]): GameStateActionTypes {\n  return {\n    type: START_GAME,\n    payload: players\n  }\n}\n\nexport function addPlayerToGameState(player: Player): GameStateActionTypes {\n  return {\n    type: ADD_PLAYER_TO_GAME,\n    payload: { player }\n  }\n}\n\n\nexport function DealCardsToNewPlayerAction(props: dealCardsProp): GameStateActionTypes {\n  const { player, state } = props;\n  return {\n    type: DEAL_CARDS,\n    payload: { player, state }\n  }\n}","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\playerReducer.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\helpers\\iconExporter.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\gameStateReducer.ts",["175","176"],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\allGamesReducer.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\GameOn.tsx",["177","178","179","180","181","182","183","184","185","186","187","188"],"\nimport React, { useEffect, useState } from 'react';\n// import { Box, Button, Grommet, Card, CardHeader, CardBody, CardFooter, Meter } from 'grommet';\n// import { Notification } from 'grommet-icons';\nimport { Provider, useDispatch, useSelector } from 'react-redux';\nimport { RootState, store } from '../redux/gameState/store';\nimport { getGame, getGames, joinRoom } from '../socket-io-client/socket-io-client';\nimport { CureDeck } from '../components/CureDeck/CureDeck';\nimport { getIcon } from '../helpers/iconExporter'\nimport { SourceCard } from '../components/SourceCard/SourceCard';\nimport { CardHand } from '../components/CardHand/CardHand';\nimport { SourceDeck } from '../components/sourceDeck/sourceDeck'\nimport { MarkersStore } from '../components/MarkersStore/MarkersStore'\nimport { MisinformationDeck } from '../components/MisinformationDeck/misinformationDeck'\nimport { ChaosMeter } from '../components/ChaosMeter/ChaosMeter'\nimport { SpreadLevel } from '../components/SpreadLevel/SpreadLevel';\nimport { PlayerPrompt } from '../components/PlayerPrompt/PlayerPrompt';\nimport { SourceParent } from '../components/SourceParent/SourceParent';\nimport { NewGameMenu } from '../components/NewGameMenu/NewGameMenu'\nimport { addPlayerToGameState, DealCardsToNewPlayerAction, StartGameAction } from '../redux/gameState/gameStateActions';\nimport { Gamestate, Player } from '../types/gameStateTypes';\nimport { UpdateGameStateAction } from '../redux/gameState/reduxTypes';\nimport { OtherPlayer } from './OtherPlayer/OtherPlayer';\n// import { InfoModal } from './InfoModal/InfoModal';\nimport Modal from 'react-modal';\nimport { InfoModal } from './InfoModal/InfoModal';\nimport './InfoModal/InfoModal.scss';\n\n\ninterface Props {\n  rendered: boolean\n}\n\nexport const GameOn: React.FC<Props> = ({ rendered }): JSX.Element => {\n\n  const dispatch = useDispatch();\n  // const [showSidebar, setShowSidebar] = useState(false);\n  const player = useSelector((state: RootState) => state.playerStateReducer)\n  const allRooms = useSelector((state: RootState) => state.allGamesStateReducer)\n  const [modal, updateModal] = useState(false)\n  const getCards = () => {\n    state = store.getState().gameStateReducer\n    console.log(state, 'state from the gey cards button')\n    dispatch(DealCardsToNewPlayerAction({ player, state }))\n  }\n\n  const checkCards = (newstate: Gamestate) => {\n    for (let PLAYER of newstate.players) {\n      if (PLAYER.id === player.id) {\n        const p = PLAYER.cards;\n        const card = p[0];\n        if (!card) {\n\n          return true\n        }\n      }\n    }\n    return false;\n  };\n\n\n\n  const openModal = () => {\n    updateModal(true)\n  }\n  const closeModal = () => {\n    updateModal(false)\n  }\n  const InfoIcon = getIcon('infoIcon');\n\n  let state = useSelector((state: RootState) => state.gameStateReducer)\n  const ConnectionsWithFrame = getIcon('connectionsWithFrame');\n\n  return (\n    <div>\n      { (rendered && state.gameOn) &&\n        <div className=\"app-outer-wrapper\">\n          <div className=\"app-container\">\n            {/* <Map /> */}\n            {/* <GameBoard /> */}\n            <div className=\"sidebar left\">\n              {(checkCards(state) === true && state.turnMovesLeft > 3) ?\n                <button\n                  className='get-cards'\n                  onClick={getCards}> GET CARDS </button>\n                :\n                <CardHand />\n              }\n              <PlayerPrompt state={state} />\n            </div>\n            <div className=\"board-container\">\n              <div id=\"game-board\">\n                {/* <MapSVG className=\"map-svg\"/> */}\n                <ConnectionsWithFrame className=\"connections-overlay\" />\n                <SourceParent />\n                {/* <div id=\"connections-paths\"> */}\n                <OtherPlayer />\n                {/* </div> */}\n\n              </div>\n              {/* <SourceParent /> */}\n              <SourceDeck />\n              <MisinformationDeck />\n              <MarkersStore />\n              {/* <ChaosMeterGrommet /> */}\n              {/* <OtherPlayer /> */}\n              {/* </Grommet> */}\n\n            </div>\n            <div className=\"sidebar right\">\n              {<InfoIcon onClick={openModal} />}\n              <Modal\n                isOpen={modal}\n                onRequestClose={closeModal}\n                contentLabel=\"Game rules\"\n                className=\"mymodal\"\n                overlayClassName='overlayClassName'\n                ariaHideApp={false}\n              >\n                <InfoModal />\n                <button className='modal_button' onClick={closeModal}>close</button >\n              </Modal>\n              <ChaosMeter />\n              <SpreadLevel />\n              <CureDeck />\n            </div>\n          </div>\n        </div>\n      }\n    </div >\n  )\n}\n","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\NewGameMenu\\NewGameMenu.tsx",["189","190","191","192","193","194","195","196","197","198","199"],"import React, { ButtonHTMLAttributes, ChangeEvent, DetailedHTMLProps, useState } from 'react';\nimport './NewGameMenu.scss';\n// import { startGameEvent, addPlayerEvent } from '../../logic/event.listeners'\nimport { AddPlayerAction, addPlayerToGameState, DealCardsToNewPlayerAction, StartGameAction, updateGameState } from '../../redux/gameState/gameStateActions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState, store } from '../../redux/gameState/store';\nimport { Player } from '../../types/gameStateTypes';\nimport { Console } from 'console';\nimport { getIcon } from '../../helpers/iconExporter'\n\n\nexport const NewGameMenu: React.FC = () => {\n\n  const FirePawn = getIcon('firePawn');\n  const HexagonPawn = getIcon('hexagonPlayerPawn');\n  const FlowerPawn = getIcon('flowerPawn');\n  const RombPawn = getIcon('rombPawn')\n  const SunPawn = getIcon('sunPawn')\n  const SquarePawn = getIcon('squarePawn')\n\n  function handleChange(event: ChangeEvent<HTMLInputElement>): void {\n    event.preventDefault()\n    if (event.target) {\n      updateInput(state => ({\n        ...state,\n        [event.target.name]: event.target.value\n      }))\n    }\n\n  }\n  const [input, updateInput] = useState({ name: '', color: '', room: '' })\n  const dispatch = useDispatch();\n\n\n  const handleSelect = (color: string) => {\n    let selectedPawn: string = 'none';\n    selectedPawn = color === input.color ? 'none' : color;\n\n    updateInput(state => ({\n      ...state,\n      color: selectedPawn\n    }))\n\n  }\n\n  let player = useSelector((state: RootState) => state.playerStateReducer)\n  let state = useSelector((state: RootState) => state.gameStateReducer)\n\n  const addPlayer = (event: React.MouseEvent<HTMLElement>) => {\n    event.preventDefault()\n    dispatch(AddPlayerAction(input.name, input.color, input.room))\n  }\n\n\n  return (\n    <form className='form' >\n      <div className='menu-container'>\n        <div className='title-container'>\n          <h3 style = {{color:'royalblue'}}>Welcome to Viral</h3>\n        </div>\n        <input\n          type='text'\n          name='name'\n          value={input.name}\n          placeholder='Player name '\n          onChange={handleChange}\n        ></input>\n\n\n        <input\n          type='text'\n          name='room'\n          value={input.room}\n          placeholder='Room '\n          onChange={handleChange}\n\n        ></input>\n        <div className='colors-container' >\n          <FirePawn className=\"icon\"\n            style={{ transform: (input.color === 'orange') ? 'scale(1.7)' : 'none' }}\n            onClick={() => handleSelect('orange')}\n          />\n\n          <HexagonPawn className=\"icon\"\n            style={{ transform: (input.color === 'green') ? 'scale(1.7)' : 'none' }}\n            onClick={() => handleSelect('green')}\n          />\n\n          <FlowerPawn className=\"icon\"\n            style={{ transform: (input.color === 'pink') ? 'scale(1.7)' : 'none' }}\n            onClick={() => handleSelect('pink')}\n          />\n\n          <RombPawn className=\"icon\"\n            style={{ transform: (input.color === 'blue') ? 'scale(1.7)' : 'none' }}\n            onClick={() => handleSelect('blue')}\n          />\n          <SunPawn className=\"icon\"\n            style={{ transform: (input.color === 'yellow') ? 'scale(1.7)' : 'none' }}\n            onClick={() => handleSelect('yellow')}\n          />\n\n          <SquarePawn className=\"icon\"\n            style={{ transform: (input.color === 'red') ? 'scale(1.7)' : 'none' }}\n            onClick={() => handleSelect('red')}\n          />\n        </div>\n\n        <button className='start_game_button' type='submit' onClick={addPlayer} >\n          Play\n        </button>\n      </div >\n    </form >\n  );\n};","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\GameOver\\gameOver.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\YouWon\\youWon.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\reduxTypes.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\redux\\gameState\\initialState.tsx",["200","201","202","203","204"],"// this initial state presumes 2 players, 3 locations (one for each color), 3 connection and 3 misinfo cards, and 1 viral card.\n\nimport { Gamestate, Card, Source, Player, Misinformation, Connection } from '../../types/gameStateTypes'\n\nexport const initialState: Gamestate = {\n  sources: [\n  \n  ],\n  players: [\n  ],\n  spreadLevel: 1,\n  chaosMeter: 0,\n  misinformation: {\n    community: {\n      name: 'Misinfo Type 1',\n      debunked: false,\n      markersLeft: 16,\n    },\n    social: {\n      name: 'Misinfo Type 2',\n      debunked: false,\n      markersLeft: 16,\n    },\n    relations: {\n      name: 'Misinfo Type 3',\n      debunked: false,\n      markersLeft: 16,\n    },\n  },\n  connectionDeck: [\n    {\n      cardType: 'connection',\n      sourceName: 'University',\n      misinfoType: 'blue',\n    },\n    {\n      cardType: 'connection',\n      sourceName: 'Gym',\n      misinfoType: 'red',\n    },\n    {\n      cardType: 'connection',\n      sourceName: 'Instagram',\n      misinfoType: 'yellow',\n    },\n    {\n      cardType: 'viral',\n    },\n  ],\n  misinformationDeckActive: [\n    {\n      cardType: 'misinformation',\n      sourceName: 'University',\n      misinfoType: 'blue',\n    },\n    {\n      cardType: 'misinformation',\n      sourceName: 'Gym',\n      misinfoType: 'red',\n    },\n    {\n      cardType: 'misinformation',\n      sourceName: 'Instagram',\n      misinfoType: 'yellow',\n    },\n  ],\n  misinformationDeckPassive: [],\n  turnMovesLeft: 4,\n  dealHistory: 0,\n  gameWon: false,\n  gameLost: false,\n  received: false,\n  gameOn:false\n}","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\InfoModal\\InfoModal.tsx",["205","206"],"import React, { useState } from 'react';\nimport './InfoModal.scss';\n\n\nexport const InfoModal: React.FC = () => {\n\n\n  const onClose = () => {\n\n  };\n\n  return (\n\n    <div className='modal_body'>\n      <h4>Welcome to Viral!</h4>\n      <p className='text'>\n        In this game you have to travel around town cleaning up misinformation from various sources.\n        You can either travel to an adjacent source or fast travel by using one of your cards. Each player can make 4 actions, either moving or cleaning, on each turn.\n        After each turn additional misinformation will spread throughout the town so you’ll have to act quickly!\n        The amount of misinformation which spreads each turn depends on the spread level. If a third marker of misinformation is put on a source there is an outbreak spreading it to adjacent sources.\n        Each outbreak increases the chaos meter!\n        After each turn the player also collects two source cards. The spread increases each time one of those source cards turns out to be one of the 3 hidden Viral cards!\n        To win you must debunk all three types of misinformation.\n        Each type of misinformation is debunked by collection 4 source cards representing that type of misinformation.\n        The game is over if the chaos meter increases to 100%, you run out of source cards or if you run out of any type of misinformation marker.\n        Good luck!\n          </p>\n    </div>\n\n\n\n  );\n};","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\CureDeck\\CureDeck.tsx",["207","208","209","210","211","212","213","214"],"import React from 'react';\nimport \"./CureDeck.scss\"\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../redux/gameState/store';\n\n\nimport WifiIcon from '@material-ui/icons/Wifi';\nimport WifiOffIcon from '@material-ui/icons/WifiOff';\n\n\n\nconst style = {\n  large: {\n    fontSize:50\n  }\n}\nexport const CureDeck: React.FC = ():JSX.Element => {\n\n  const gamestate = useSelector((state: RootState) => state.gameStateReducer)\n\n  let misinformationCommunityHasDebunked = gamestate.misinformation.community.debunked\n  let misinformationRelationsHasDebunked = gamestate.misinformation.relations.debunked\n  let misinformationSocialHasDebunked = gamestate.misinformation.social.debunked\n\n  const communityCubesLeft = useSelector((state:RootState) => state.gameStateReducer.misinformation.community.markersLeft)\n  const relationsCubesLeft = useSelector((state:RootState) => state.gameStateReducer.misinformation.relations.markersLeft)\n  const socialCubesLeft = useSelector((state:RootState) => state.gameStateReducer.misinformation.social.markersLeft)\n\n  let noCureString = \"Not debunked yet - we're screwed\"\n  let cureString = \"Debunked!! bitches!\"\n  const CureDeck = (<>\n    <div className=\"debunk-indicator community\">\n      {/* {misinformationCommunityHasDebunked ? <WifiOffIcon style={style.large} /> : <WifiIcon style={style.large} />} */}\n      {communityCubesLeft}\n    </div>\n    <div className=\"debunk-indicator relations\">\n      {/* {misinformationRelationsHasDebunked ? <WifiOffIcon style={style.large} /> : <WifiIcon style={style.large} />} */}\n      {relationsCubesLeft}\n    </div>\n    <div className=\"debunk-indicator social\">\n      {socialCubesLeft}\n      {/* {misinformationSocialHasDebunked ? <WifiOffIcon style={style.large} /> : <WifiIcon style={style.large} />} */}\n    </div>\n        \n  </>)\n\n  return (\n    <div className=\"cure-deck-container\" >\n      {CureDeck}\n    </div>\n  )\n}","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\MarkersStore\\MarkersStore.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\sourceDeck\\sourceDeck.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\SpreadLevel\\SpreadLevel.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\MisinformationDeck\\misinformationDeck.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\PlayerPrompt\\PlayerPrompt.tsx",["215","216"],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\ChaosMeter\\ChaosMeter.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\SourceParent\\SourceParent.tsx",["217","218","219"],"import React from 'react'\nimport PropTypes from 'prop-types'\n// import { initDummyState } from '../../logic/dummyState.REDO_CO';\nimport { SourceComponent  } from '../Source/Source'\nimport {Source} from '../../types/gameStateTypes'\nimport { render } from '@testing-library/react';\nimport {useSelector} from 'react-redux'\nimport { RootState } from '../../redux/gameState/store'\nimport './SourceParent.scss'\nimport { getIcon } from '../../helpers/iconExporter';\n\nexport const SourceParent = () => {\n  // const sources = initDummyState.sources;\n  const sources = useSelector((state: RootState) => state.gameStateReducer.sources);\n\n\n  const EmptyAppIcon = getIcon('emptyAppIcon');\n\n\n  const renderSources = (srcArr: Source[]) => {\n\n    return srcArr.map(source => {\n      //! GET source.markers_community etc and plug into props of SourceComponent\n\n\n      return <SourceComponent source={source} key={source.name}/>\n    })\n  }\n\n  return (\n    <div id=\"source-parent-grid-container\">\n      {renderSources(sources)}\n      {/* <EmptyAppIcon className=\"empty-app-icon-1\" />\n      <EmptyAppIcon className=\"empty-app-icon-2\" /> */}\n    </div>\n  )\n}\n\n\n\n","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\OtherPlayer\\OtherPlayer.tsx",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\CardHand\\CardHand.tsx",["220"],"import React from 'react';\nimport { SourceCard, } from '../SourceCard/SourceCard';\nimport { RootState } from '../../redux/gameState/store'\nimport { useSelector } from 'react-redux';\nimport { Card as SourceCardType } from '../../types/gameStateTypes';\nimport './CardHand.scss'\n\n\nexport const CardHand: React.FC = () => {\n\n\n  const Player = useSelector((state: RootState) => state.playerStateReducer);\n  const cards = useSelector((state: RootState) => state.gameStateReducer.players.filter(player => player.id === Player.id)[0].cards);\n  console.log(`%c REMAINING PLAYER CARDS`,`background-color: lightgray; color: indigo; padding: 10px`);\n\n  const renderCards = (cardArray: SourceCardType[]) => {\n\n    return cardArray.map(card => {\n      console.log(card)\n      if(card.cardType !=='viral' ) {\n        return <SourceCard name={card.sourceName} category={card.misinfoType} canShare={[]} />\n      }  else {\n        <h1> this is a viral card you are trying you are passing </h1>\n      }\n    })\n  }\n\n  return (\n    <div className=\"source-card-hand\">\n      {renderCards(cards)}\n    </div>\n  )\n}\n","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\logic\\connections.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\helpers\\utils.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\Source\\Source.tsx",["221","222","223"],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\SourceCard\\SourceCard.tsx",["224","225","226"],"import React from 'react';\nimport { getIcon } from '../../helpers/iconExporter'\nimport { toCamelCase, toPascalCase } from '../../helpers/utils'\nimport './SourceCard.scss'\nimport { shareCardEvent } from '../../logic/event.listeners';\nimport { ShareCardProps } from '../../redux/gameState/reduxTypes'\n\n//! issue with \"Card\" interface beings used for both Source/connection & \"Viral\" cards, which have name type \"null\" - possible change types/logic later\nexport interface SourceCardProps {\n  name: string,    //! NULL TO BE REMOVED\n  category: string, //! NULL TO BE REMOVED\n  canShare: any[]\n}\n// DON'T NEED ===> canlogon can go to the place if you have that card\n// canShare: a button that appears on each card when you are on the same location as another player\n// canchare: Player[]\n\n\nexport const SourceCard: React.FC<SourceCardProps> = ({ name, category, canShare }: SourceCardProps) => { // SVGIcon\n\n  const currentState = {}\n\n  console.log('Source name:', name, 'category:', category, 'can share:', canShare)\n  const SVGIcon = getIcon(toCamelCase(name) + 'Icon');\n\n  const handleShareClick = (id: string) => {\n    //DISPATCH ACTION\n    console.log(`SHARING CARD ${name} WITH ${id}`);\n  }\n\n\n  const renderShareButtons = (shareWith: { name: string, id: string }[]) => {\n    return shareWith.map(player => <button onClick={() => handleShareClick(player.id)\n\n      // shareCardEvent({\n      //   oldState: currentState,\n      //   currentPlayerID: ,\n      //   recipient: player.id,\n      //   sharedCard: name\n      // })\n    }>{player.name}</button>)\n  }\n  return (\n    <div className={`source-card-container ${category}`} >\n      <SVGIcon name={name} className=\"card-icon\" />\n      <div className=\"name-container\" >\n        <p className=\"title\">{toPascalCase(name)}</p>\n        {renderShareButtons(canShare)}\n      </div>\n    </div>\n  )\n}","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\Source\\DebunkModal.tsx",["227","228","229","230","231"],"import React, { useEffect, useState } from 'react';\nimport Modal from 'react-modal';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../redux/gameState/store';\nimport { SourceCard } from '../SourceCard/SourceCard';\nimport ReactDOM from 'react-dom';\nimport { Card } from '../../types/gameStateTypes';\nimport ReactModal from 'react-modal';\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)'\n  }\n};\n\n\ninterface ModalProps {\n  modalIsOpen: boolean,\n  closeModal: Function,\n  setselectedDebunkCards: Function\n}\n\ninterface CardWithId extends Card {\n  id: string\n\n}\n\nexport function ModalComponent({ modalIsOpen, closeModal, setselectedDebunkCards, }: ModalProps) {\n  const playerId = useSelector((state: RootState) => state.playerStateReducer.id)\n\n  const players = useSelector((state: RootState) => state.gameStateReducer.players)\n\n  const [pickedCards, setpickedCards] = useState<CardWithId[]>([])\n\n\n  let playerCards = players.find(player => player.id === playerId)?.cards\n\n\n\n\n  console.log('FUCK ALL THESE LOGS _ -----------------!!!!!playerCards ', playerId, players)\n\n  const fakeCards: Card[] = [{ cardType: \"connection\", sourceName: \"Instagram\", misinfoType: \"yellow\" },\n  { cardType: \"connection\", sourceName: \"Instagram\", misinfoType: \"yellow\" },\n  { cardType: \"connection\", sourceName: \"Instagram\", misinfoType: \"yellow\" }]\n\n  const fakeCardsWithIdInit: CardWithId[] = fakeCards.map((card) => {\n    (card as CardWithId).id = uid()\n    return card\n  }) as CardWithId[]\n\n  const [fakeCardsWithId, setfakeCardsWithId] = useState(fakeCardsWithIdInit)\n\n\n  var subtitle: any;\n\n  useEffect(() => {\n    console.log('pickedCards from UseEffect', pickedCards)\n\n  }, [pickedCards])\n\n\n  function uid(rounds: number = 1) {\n    let uid = '';\n    while (rounds > 0) {\n      uid += Math.random().toString(32).substring(2, 10);\n      rounds -= 1;\n    }\n    return uid;\n  }\n\n\n  function afterOpenModal() {\n    // references are now sync'd and can be accessed.\n  }\n\n  function sendcloseModal(e: any) {\n    e.preventDefault()\n    console.log('Close Modal')\n\n    const pickedCardsAsCard: Card[] = pickedCards.map((cardWithId) => {\n      const card: Card = { cardType: cardWithId.cardType, sourceName: cardWithId.sourceName, misinfoType: cardWithId.misinfoType }\n      return card\n    }) as Card[]\n\n    setselectedDebunkCards(pickedCardsAsCard)\n    closeModal()\n  }\n\n  const clickOnCard = (e: React.MouseEvent<HTMLElement>, fakeCard: CardWithId) => {\n    console.log(e.target);\n    let div = e.target as HTMLInputElement;\n\n    if (!div.classList.contains('selected')) {\n      div.classList.add('selected')\n      setpickedCards(prev => [...prev, fakeCard])\n\n    } else {\n      div.classList.remove('selected')\n\n      const filtered = pickedCards.filter(card => card.id !== fakeCard.id)\n\n      console.log('filtered cards ', filtered)\n      setpickedCards(filtered)\n    }\n\n\n\n\n\n  }\n\n  return (\n    <div>\n\n      <ReactModal\n        ariaHideApp={false}\n        isOpen={modalIsOpen}\n        onAfterOpen={afterOpenModal}\n        onRequestClose={sendcloseModal}\n        style={customStyles}\n        contentLabel=\"Example Modal\"\n      >\n\n        {pickedCards.map((pickedCard, index) => <div style={{ height: 50, borderWidth: 'solid' }} key={index}\n          onClick={(e) => clickOnCard(e, pickedCard)}>\n          <SourceCard name={pickedCard.sourceName} category={pickedCard.cardType} canShare={[]} />\n\n        </div>)}\n\n        <div style={{ border: \"1px solid black\" }}></div>\n\n\n        {fakeCardsWithId.map((fakeCard, index) => <div style={{ height: 50, borderWidth: 'solid' }} key={index}\n          onClick={(e) => clickOnCard(e, fakeCard)}>\n          <SourceCard name={fakeCard.sourceName} category={fakeCard.cardType} canShare={[]} />\n\n        </div>)}\n        <button onClick={sendcloseModal}>Send</button>\n      </ReactModal>\n    </div>\n  );\n}","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\components\\PlayerPawn\\PlayerPawn.tsx",["232","233","234","235"],"// import React from 'react';\nimport React from 'react';\n// also exported from '@storybook/react' if you can deal with breaking changes in 6.1\nimport { Story, Meta } from '@storybook/react/types-6-0';\nimport './PlayerPawn.scss';\nimport { withDesign } from 'storybook-addon-designs';\nimport { useSelector } from 'react-redux';\n// import {RootState} from '../../redux/gameState/store'\nimport { getIcon } from '../../helpers/iconExporter'\n\n\nconst FirePawn = getIcon('firePawn');\nconst HexagonPawn = getIcon('hexagonPlayerPawn');\nconst FlowerPawn = getIcon('flowerPawn');\nconst RombPawn = getIcon('rombPawn')\nconst SunPawn = getIcon('sunPawn')\nconst SquarePawn = getIcon('squarePawn')\n\n\nconst getPawn = (color: string) => {\n\n  if (color === 'orange') return <FirePawn />;\n  if (color === 'red') return <SquarePawn />;\n  if (color === 'blue') return <RombPawn />;\n  if (color === 'yellow') return <SunPawn />;\n  if (color === 'pink') return <FlowerPawn />;\n  if (color === 'green') return <HexagonPawn />;\n\n}\n\nexport interface PlayerPawnProps {\n  color: string\n}\n\nexport const PlayerPawn: React.FC<PlayerPawnProps> = ({\n  color,\n}: PlayerPawnProps) => {\n  return (\n  <>\n  {getPawn(color)}\n  </>)\n};\n","C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\logic\\moves.ts",[],"C:\\Users\\HP-Omen\\Desktop\\Coding\\Codeworks\\Thesis Project\\Viral\\client\\src\\logic\\setup.ts",[],{"ruleId":"236","replacedBy":"237"},{"ruleId":"238","replacedBy":"239"},{"ruleId":"240","severity":1,"message":"241","line":7,"column":10,"nodeType":"242","messageId":"243","endLine":7,"endColumn":14},{"ruleId":"240","severity":1,"message":"244","line":2,"column":17,"nodeType":"242","messageId":"243","endLine":2,"endColumn":26},{"ruleId":"240","severity":1,"message":"245","line":5,"column":10,"nodeType":"242","messageId":"243","endLine":5,"endColumn":18},{"ruleId":"240","severity":1,"message":"246","line":6,"column":21,"nodeType":"242","messageId":"243","endLine":6,"endColumn":26},{"ruleId":"240","severity":1,"message":"247","line":7,"column":19,"nodeType":"242","messageId":"243","endLine":7,"endColumn":27},{"ruleId":"240","severity":1,"message":"248","line":8,"column":10,"nodeType":"242","messageId":"243","endLine":8,"endColumn":18},{"ruleId":"240","severity":1,"message":"249","line":11,"column":10,"nodeType":"242","messageId":"243","endLine":11,"endColumn":30},{"ruleId":"240","severity":1,"message":"250","line":11,"column":32,"nodeType":"242","messageId":"243","endLine":11,"endColumn":58},{"ruleId":"240","severity":1,"message":"251","line":12,"column":10,"nodeType":"242","messageId":"243","endLine":12,"endColumn":19},{"ruleId":"240","severity":1,"message":"252","line":41,"column":9,"nodeType":"242","messageId":"243","endLine":41,"endColumn":15},{"ruleId":"240","severity":1,"message":"253","line":11,"column":10,"nodeType":"242","messageId":"243","endLine":11,"endColumn":22},{"ruleId":"240","severity":1,"message":"254","line":3,"column":10,"nodeType":"242","messageId":"243","endLine":3,"endColumn":26},{"ruleId":"240","severity":1,"message":"255","line":1,"column":10,"nodeType":"242","messageId":"243","endLine":1,"endColumn":28},{"ruleId":"240","severity":1,"message":"256","line":6,"column":10,"nodeType":"242","messageId":"243","endLine":6,"endColumn":17},{"ruleId":"240","severity":1,"message":"244","line":2,"column":17,"nodeType":"242","messageId":"243","endLine":2,"endColumn":26},{"ruleId":"240","severity":1,"message":"245","line":5,"column":10,"nodeType":"242","messageId":"243","endLine":5,"endColumn":18},{"ruleId":"240","severity":1,"message":"257","line":7,"column":10,"nodeType":"242","messageId":"243","endLine":7,"endColumn":17},{"ruleId":"240","severity":1,"message":"247","line":7,"column":19,"nodeType":"242","messageId":"243","endLine":7,"endColumn":27},{"ruleId":"240","severity":1,"message":"258","line":7,"column":29,"nodeType":"242","messageId":"243","endLine":7,"endColumn":37},{"ruleId":"240","severity":1,"message":"259","line":10,"column":10,"nodeType":"242","messageId":"243","endLine":10,"endColumn":20},{"ruleId":"240","severity":1,"message":"260","line":19,"column":10,"nodeType":"242","messageId":"243","endLine":19,"endColumn":21},{"ruleId":"240","severity":1,"message":"249","line":20,"column":10,"nodeType":"242","messageId":"243","endLine":20,"endColumn":30},{"ruleId":"240","severity":1,"message":"261","line":20,"column":60,"nodeType":"242","messageId":"243","endLine":20,"endColumn":75},{"ruleId":"240","severity":1,"message":"262","line":21,"column":21,"nodeType":"242","messageId":"243","endLine":21,"endColumn":27},{"ruleId":"240","severity":1,"message":"263","line":22,"column":10,"nodeType":"242","messageId":"243","endLine":22,"endColumn":31},{"ruleId":"240","severity":1,"message":"264","line":39,"column":9,"nodeType":"242","messageId":"243","endLine":39,"endColumn":17},{"ruleId":"240","severity":1,"message":"265","line":1,"column":17,"nodeType":"242","messageId":"243","endLine":1,"endColumn":37},{"ruleId":"240","severity":1,"message":"266","line":1,"column":52,"nodeType":"242","messageId":"243","endLine":1,"endColumn":69},{"ruleId":"240","severity":1,"message":"249","line":4,"column":27,"nodeType":"242","messageId":"243","endLine":4,"endColumn":47},{"ruleId":"240","severity":1,"message":"250","line":4,"column":49,"nodeType":"242","messageId":"243","endLine":4,"endColumn":75},{"ruleId":"240","severity":1,"message":"261","line":4,"column":77,"nodeType":"242","messageId":"243","endLine":4,"endColumn":92},{"ruleId":"240","severity":1,"message":"267","line":4,"column":94,"nodeType":"242","messageId":"243","endLine":4,"endColumn":109},{"ruleId":"240","severity":1,"message":"246","line":6,"column":21,"nodeType":"242","messageId":"243","endLine":6,"endColumn":26},{"ruleId":"240","severity":1,"message":"262","line":7,"column":10,"nodeType":"242","messageId":"243","endLine":7,"endColumn":16},{"ruleId":"240","severity":1,"message":"256","line":8,"column":10,"nodeType":"242","messageId":"243","endLine":8,"endColumn":17},{"ruleId":"240","severity":1,"message":"268","line":46,"column":7,"nodeType":"242","messageId":"243","endLine":46,"endColumn":13},{"ruleId":"240","severity":1,"message":"269","line":47,"column":7,"nodeType":"242","messageId":"243","endLine":47,"endColumn":12},{"ruleId":"240","severity":1,"message":"270","line":3,"column":21,"nodeType":"242","messageId":"243","endLine":3,"endColumn":25},{"ruleId":"240","severity":1,"message":"271","line":3,"column":27,"nodeType":"242","messageId":"243","endLine":3,"endColumn":33},{"ruleId":"240","severity":1,"message":"262","line":3,"column":35,"nodeType":"242","messageId":"243","endLine":3,"endColumn":41},{"ruleId":"240","severity":1,"message":"272","line":3,"column":43,"nodeType":"242","messageId":"243","endLine":3,"endColumn":57},{"ruleId":"240","severity":1,"message":"273","line":3,"column":59,"nodeType":"242","messageId":"243","endLine":3,"endColumn":69},{"ruleId":"240","severity":1,"message":"274","line":1,"column":17,"nodeType":"242","messageId":"243","endLine":1,"endColumn":25},{"ruleId":"240","severity":1,"message":"275","line":8,"column":9,"nodeType":"242","messageId":"243","endLine":8,"endColumn":16},{"ruleId":"240","severity":1,"message":"276","line":7,"column":8,"nodeType":"242","messageId":"243","endLine":7,"endColumn":16},{"ruleId":"240","severity":1,"message":"277","line":8,"column":8,"nodeType":"242","messageId":"243","endLine":8,"endColumn":19},{"ruleId":"240","severity":1,"message":"278","line":12,"column":7,"nodeType":"242","messageId":"243","endLine":12,"endColumn":12},{"ruleId":"240","severity":1,"message":"279","line":21,"column":7,"nodeType":"242","messageId":"243","endLine":21,"endColumn":41},{"ruleId":"240","severity":1,"message":"280","line":22,"column":7,"nodeType":"242","messageId":"243","endLine":22,"endColumn":41},{"ruleId":"240","severity":1,"message":"281","line":23,"column":7,"nodeType":"242","messageId":"243","endLine":23,"endColumn":38},{"ruleId":"240","severity":1,"message":"282","line":29,"column":7,"nodeType":"242","messageId":"243","endLine":29,"endColumn":19},{"ruleId":"240","severity":1,"message":"283","line":30,"column":7,"nodeType":"242","messageId":"243","endLine":30,"endColumn":17},{"ruleId":"240","severity":1,"message":"274","line":1,"column":34,"nodeType":"242","messageId":"243","endLine":1,"endColumn":42},{"ruleId":"284","severity":1,"message":"285","line":33,"column":50,"nodeType":"286","messageId":"287","endLine":33,"endColumn":52},{"ruleId":"240","severity":1,"message":"288","line":2,"column":8,"nodeType":"242","messageId":"243","endLine":2,"endColumn":17},{"ruleId":"240","severity":1,"message":"289","line":6,"column":10,"nodeType":"242","messageId":"243","endLine":6,"endColumn":16},{"ruleId":"240","severity":1,"message":"290","line":17,"column":9,"nodeType":"242","messageId":"243","endLine":17,"endColumn":21},{"ruleId":"284","severity":1,"message":"291","line":18,"column":31,"nodeType":"286","messageId":"287","endLine":18,"endColumn":33},{"ruleId":"240","severity":1,"message":"292","line":11,"column":10,"nodeType":"242","messageId":"243","endLine":11,"endColumn":18},{"ruleId":"240","severity":1,"message":"293","line":143,"column":9,"nodeType":"242","messageId":"243","endLine":143,"endColumn":19},{"ruleId":"240","severity":1,"message":"294","line":149,"column":9,"nodeType":"242","messageId":"243","endLine":149,"endColumn":22},{"ruleId":"240","severity":1,"message":"295","line":5,"column":10,"nodeType":"242","messageId":"243","endLine":5,"endColumn":24},{"ruleId":"240","severity":1,"message":"296","line":6,"column":10,"nodeType":"242","messageId":"243","endLine":6,"endColumn":24},{"ruleId":"240","severity":1,"message":"297","line":21,"column":9,"nodeType":"242","messageId":"243","endLine":21,"endColumn":21},{"ruleId":"240","severity":1,"message":"298","line":2,"column":8,"nodeType":"242","messageId":"243","endLine":2,"endColumn":13},{"ruleId":"240","severity":1,"message":"299","line":6,"column":8,"nodeType":"242","messageId":"243","endLine":6,"endColumn":16},{"ruleId":"240","severity":1,"message":"300","line":41,"column":7,"nodeType":"242","messageId":"243","endLine":41,"endColumn":18},{"ruleId":"240","severity":1,"message":"301","line":57,"column":27,"nodeType":"242","messageId":"243","endLine":57,"endColumn":45},{"ruleId":"240","severity":1,"message":"302","line":60,"column":7,"nodeType":"242","messageId":"243","endLine":60,"endColumn":20},{"ruleId":"240","severity":1,"message":"303","line":4,"column":10,"nodeType":"242","messageId":"243","endLine":4,"endColumn":15},{"ruleId":"240","severity":1,"message":"304","line":4,"column":17,"nodeType":"242","messageId":"243","endLine":4,"endColumn":21},{"ruleId":"240","severity":1,"message":"305","line":6,"column":10,"nodeType":"242","messageId":"243","endLine":6,"endColumn":20},{"ruleId":"240","severity":1,"message":"306","line":7,"column":10,"nodeType":"242","messageId":"243","endLine":7,"endColumn":21},"no-native-reassign",["307"],"no-negated-in-lhs",["308"],"@typescript-eslint/no-unused-vars","'Play' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Provider' is defined but never used.","'store' is defined but never used.","'getGames' is defined but never used.","'CureDeck' is defined but never used.","'addPlayerToGameState' is defined but never used.","'DealCardsToNewPlayerAction' is defined but never used.","'Gamestate' is defined but never used.","'MapSVG' is assigned a value but never used.","'initialState' is defined but never used.","'gameStateReducer' is defined but never used.","'ADD_PLAYER_TO_GAME' is defined but never used.","'Console' is defined but never used.","'getGame' is defined but never used.","'joinRoom' is defined but never used.","'SourceCard' is defined but never used.","'NewGameMenu' is defined but never used.","'StartGameAction' is defined but never used.","'Player' is defined but never used.","'UpdateGameStateAction' is defined but never used.","'allRooms' is assigned a value but never used.","'ButtonHTMLAttributes' is defined but never used.","'DetailedHTMLProps' is defined but never used.","'updateGameState' is defined but never used.","'player' is assigned a value but never used.","'state' is assigned a value but never used.","'Card' is defined but never used.","'Source' is defined but never used.","'Misinformation' is defined but never used.","'Connection' is defined but never used.","'useState' is defined but never used.","'onClose' is assigned a value but never used.","'WifiIcon' is defined but never used.","'WifiOffIcon' is defined but never used.","'style' is assigned a value but never used.","'misinformationCommunityHasDebunked' is assigned a value but never used.","'misinformationRelationsHasDebunked' is assigned a value but never used.","'misinformationSocialHasDebunked' is assigned a value but never used.","'noCureString' is assigned a value but never used.","'cureString' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'PropTypes' is defined but never used.","'render' is defined but never used.","'EmptyAppIcon' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","'logOnOff' is defined but never used.","'renderIcon' is assigned a value but never used.","'renderAsLogOn' is assigned a value but never used.","'shareCardEvent' is defined but never used.","'ShareCardProps' is defined but never used.","'currentState' is assigned a value but never used.","'Modal' is defined but never used.","'ReactDOM' is defined but never used.","'playerCards' is assigned a value but never used.","'setfakeCardsWithId' is assigned a value but never used.","'subtitle' is defined but never used.","'Story' is defined but never used.","'Meta' is defined but never used.","'withDesign' is defined but never used.","'useSelector' is defined but never used.","no-global-assign","no-unsafe-negation"]