[{"/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/index.tsx":"1","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/reportWebVitals.ts":"2","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/App.tsx":"3","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/socket-io-client/socket-io-client.tsx":"4","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/StartGame.tsx":"5","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/redux/gameState/store.tsx":"6","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/redux/gameState/gameStateActions.ts":"7","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/redux/gameState/gameStateReducer.ts":"8","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/redux/gameState/allGamesReducer.ts":"9","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/redux/gameState/playerReducer.ts":"10","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/helpers/iconExporter.ts":"11","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/GameOn.tsx":"12","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/NewGameMenu/NewGameMenu.tsx":"13","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/YouWon/youWon.tsx":"14","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/GameOver/gameOver.tsx":"15","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/redux/gameState/reduxTypes.ts":"16","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/logic/actions.newState_CO.ts":"17","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/logic/actions.MW.ts":"18","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/redux/gameState/initialState.tsx":"19","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/CardHand/CardHand.tsx":"20","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/sourceDeck/sourceDeck.tsx":"21","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/MarkersStore/MarkersStore.tsx":"22","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/ChaosMeter/ChaosMeter.tsx":"23","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/SourceParent/SourceParent.tsx":"24","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/OtherPlayer/OtherPlayer.tsx":"25","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/PlayerPrompt/PlayerPrompt.tsx":"26","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/MisinformationDeck/misinformationDeck.tsx":"27","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/logic/connections.ts":"28","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/helpers/utils.ts":"29","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/SourceCard/SourceCard.tsx":"30","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/Source/Source.tsx":"31","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/Source/DebunkModal.tsx":"32","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/PlayerPawn/PlayerPawn.tsx":"33"},{"size":500,"mtime":1612896238544,"results":"34","hashOfConfig":"35"},{"size":425,"mtime":1612016729288,"results":"36","hashOfConfig":"35"},{"size":415,"mtime":1612896238520,"results":"37","hashOfConfig":"35"},{"size":1969,"mtime":1612964247020,"results":"38","hashOfConfig":"35"},{"size":2295,"mtime":1612964247013,"results":"39","hashOfConfig":"35"},{"size":706,"mtime":1612896238547,"results":"40","hashOfConfig":"35"},{"size":3115,"mtime":1612964247018,"results":"41","hashOfConfig":"35"},{"size":2857,"mtime":1612964247019,"results":"42","hashOfConfig":"35"},{"size":369,"mtime":1612964247017,"results":"43","hashOfConfig":"35"},{"size":707,"mtime":1612896238547,"results":"44","hashOfConfig":"35"},{"size":4538,"mtime":1612964247014,"results":"45","hashOfConfig":"35"},{"size":3483,"mtime":1612964247002,"results":"46","hashOfConfig":"35"},{"size":3027,"mtime":1612964247003,"results":"47","hashOfConfig":"35"},{"size":149,"mtime":1612964247013,"results":"48","hashOfConfig":"35"},{"size":128,"mtime":1612964247003,"results":"49","hashOfConfig":"35"},{"size":3243,"mtime":1612964247019,"results":"50","hashOfConfig":"35"},{"size":14913,"mtime":1612964247016,"results":"51","hashOfConfig":"35"},{"size":12389,"mtime":1612964247015,"results":"52","hashOfConfig":"35"},{"size":1523,"mtime":1612896238546,"results":"53","hashOfConfig":"35"},{"size":960,"mtime":1612964247001,"results":"54","hashOfConfig":"35"},{"size":349,"mtime":1612896238542,"results":"55","hashOfConfig":"35"},{"size":738,"mtime":1612896238535,"results":"56","hashOfConfig":"35"},{"size":1471,"mtime":1612964247002,"results":"57","hashOfConfig":"35"},{"size":943,"mtime":1612964247011,"results":"58","hashOfConfig":"35"},{"size":2733,"mtime":1612896238537,"results":"59","hashOfConfig":"35"},{"size":661,"mtime":1612964247008,"results":"60","hashOfConfig":"35"},{"size":377,"mtime":1612896238535,"results":"61","hashOfConfig":"35"},{"size":2987,"mtime":1612896238545,"results":"62","hashOfConfig":"35"},{"size":556,"mtime":1612896238543,"results":"63","hashOfConfig":"35"},{"size":1759,"mtime":1612896238540,"results":"64","hashOfConfig":"35"},{"size":7873,"mtime":1612967112627,"results":"65","hashOfConfig":"35"},{"size":3972,"mtime":1612964247009,"results":"66","hashOfConfig":"35"},{"size":644,"mtime":1612964247008,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"eogvai",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"70"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"70"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"70"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"70"},"/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/index.tsx",[],["148","149"],"/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/reportWebVitals.ts",[],"/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/App.tsx",[],"/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/socket-io-client/socket-io-client.tsx",["150"],"//based on change of state \nimport io from \"socket.io-client\";\nimport * as dotenv from 'dotenv';\nimport { store } from '../redux/gameState/store'\nimport { GetAllGamesAction, updateGameState } from \"../redux/gameState/gameStateActions\";\nimport { Gamestate } from \"../types/gameStateTypes\";\nimport { Play } from \"grommet-icons\";\ndotenv.config({ path: __dirname + '../.env' });\nconst socket = io(process.env.SERVER_URL || 'http://localhost:3002');\n\n\nconst Player = store.getState().playerStateReducer\n\n// on click - 'start game' \nexport const joinRoom = (player: typeof Player) => {\n  socket.emit('joinRoom', player);\n}\n\n// Message from server // welcome component \nsocket.on('joinConfirmation', (message: string) => {\n  console.log(message); // display message to the screen \n\n});\n\n//subscripion to any game state changes \n\nstore.subscribe(() => {\n  const newState = store.getState().gameStateReducer\n  const Player = store.getState().playerStateReducer\n  // console.log(newState, 'NEW STATE FROM SUBSCRIBE ')\n  // console.log(Player, 'PLAYER')\n  if (!newState.received && Player && newState.gameOn) {\n    socket.emit('onChangeState', { newState, Player })\n  }\n})\n\n// const addPlayer = (player: typeof Player) => {\n//   socket.emit('addPlayerToGame', player)\n// }\n\n\n//data coming from backend after game state changed\nsocket.on('updatedState', (newState: Gamestate) => {\n  // console.log('newstate from client ', newState)\n  newState.received = true;\n  store.dispatch(updateGameState(newState))\n})\n\nexport const getGame = (player: typeof Player) => {\n  // console.log(player, 'PLAYER ON GET GAME - WILL BE ADDED HERE')\n  player && socket.emit('retriveGame', player)\n\n}\n\nexport const getGames = () => {\n  socket.emit('getGames')\n  socket.on('games', (\n    (data: string[]) => {\n      store.dispatch(GetAllGamesAction(data))\n    }\n  ))\n}\ngetGames();\n\n\n\n// how to we tell the users \nsocket.on('userLeft', (message: string) => console.log(message)) // need a end game button ","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/StartGame.tsx",["151","152","153","154","155","156","157","158","159"],"\nimport React, { useEffect, useState } from 'react';\n// import { Box, Button, Grommet, Card, CardHeader, CardBody, CardFooter, Meter } from 'grommet';\n// import { Notification } from 'grommet-icons';\nimport { Provider, useDispatch, useSelector } from 'react-redux';\nimport { RootState, store } from '../redux/gameState/store';\nimport { getGame, getGames, joinRoom } from '../socket-io-client/socket-io-client';\nimport { CureDeck } from '../components/CureDeck/CureDeck';\nimport { getIcon } from '../helpers/iconExporter'\n\n\nimport { NewGameMenu } from '../components/NewGameMenu/NewGameMenu'\nimport { addPlayerToGameState, DealCardsToNewPlayerAction, StartGameAction } from '../redux/gameState/gameStateActions';\nimport { Gamestate, Player } from '../types/gameStateTypes';\n\nimport { GameOn } from './GameOn';\n\nimport { GameOver } from './GameOver/gameOver'\nimport { Winner } from './YouWon/youWon'\n\nexport const StartGame: React.FC = (): JSX.Element => {\n\n  const dispatch = useDispatch();\n  // const [showSidebar, setShowSidebar] = useState(false);\n  const player = useSelector((state: RootState) => state.playerStateReducer)\n  const allRooms = useSelector((state: RootState) => state.allGamesStateReducer)\n  const [stateRendered, updateStateRendered] = useState(false)\n  // let gameOn: boolean = false;\n  let state = useSelector((state: RootState) => state.gameStateReducer)\n\n  const startGame = (player: Player) => {\n    if (!stateRendered) {\n      joinRoom(player)\n      if (allRooms.filter(room => room === player.room).length > 0) {\n        getGame(player);\n        updateStateRendered(true)\n      } else {\n        dispatch(StartGameAction([player]))\n        updateStateRendered(true)\n      }\n    }\n  }\n\n\n  const MapSVG = getIcon('map');\n  // const addPlayer = () => {\n  //   dispatch(addPlayerToGameState(player, gamestate))\n  // }\n\n  return (\n\n    <div>\n      {state.gameWon ?\n        <Winner /> :\n        state.gameLost ?\n          <GameOver /> :\n          (player.name.length < 1) ?\n            <NewGameMenu />\n            : (\n              (!stateRendered) ?\n                <h1>\n                  game loading ...\n          {startGame(player)}\n                </h1>\n                :\n                <GameOn rendered={stateRendered} />\n            )\n      }\n    </div>\n  )\n}\n\n\n\n\n\n\n\n\n","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/redux/gameState/store.tsx",[],"/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/redux/gameState/gameStateActions.ts",["160"],"import { ClearmisinfoProps, CLEAR_MISINFO, DebunkMisinfoProps, DEBUNK_MISINFO, discardCardProps, DISCARD_ACTION, logOnOffProps, LOG_ON_OFF, MoveActionProps, MOVE_ACTION, ShareCardProps, SHARE_CARD, UPDATE_GAME_STATE, GameStateActionTypes, PlayerStateActionTypes, ADD_PLAYER, GET_ALL_GAMES, AllGamesActionTypes, START_GAME, ADD_PLAYER_TO_GAME, DEAL_CARDS, dealCardsProp } from './reduxTypes';\nimport { Gamestate, Player, } from '../../types/gameStateTypes'\nimport { gameStateReducer } from './gameStateReducer';\n//Below are example of actions with typescript.\n// we need to create an action for each reduced case\n\n\nexport function moveAction(props: MoveActionProps): GameStateActionTypes {\n  const { oldState, currentPlayerID, location } = props\n  return {\n    type: MOVE_ACTION,\n    payload: { oldState, currentPlayerID, location }\n  }\n}\n\n\n\nexport function clearMisinfoAction(props: ClearmisinfoProps): GameStateActionTypes {\n  const { oldState, currentPlayerID, location, misinfoType } = props;\n  return {\n    type: CLEAR_MISINFO,\n    payload: { oldState, currentPlayerID, location, misinfoType }\n  }\n}\n\n\nexport function shareCardAction(props: ShareCardProps): GameStateActionTypes {\n  const { oldState, currentPlayerID, recipient, sharedCard } = props;\n  return {\n    type: SHARE_CARD,\n    payload: { oldState, currentPlayerID, recipient, sharedCard }\n  }\n}\n\nexport function logOnOffAction(props: logOnOffProps): GameStateActionTypes {\n  const { oldState, currentPlayerID, location, usedCard } = props;\n  return {\n    type: LOG_ON_OFF,\n    payload: { oldState, currentPlayerID, location, usedCard }\n  }\n}\nexport function debunkMisinfoAction(props: DebunkMisinfoProps): GameStateActionTypes {\n  const { oldState, currentPlayerID, usedCards, misinfoType } = props;\n  return {\n    type: DEBUNK_MISINFO,\n    payload: { oldState, currentPlayerID, usedCards, misinfoType }\n  }\n}\n\nexport function discardCardAction(props: discardCardProps): GameStateActionTypes {\n  const { oldState, currentPlayerID, discardedCard } = props;\n  return {\n    type: DISCARD_ACTION,\n    payload: { oldState, currentPlayerID, discardedCard }\n  }\n}\n//redux action to update whole gameState // examples\nexport function updateGameState(gameState: Gamestate): GameStateActionTypes {\n  return {\n    type: UPDATE_GAME_STATE,\n    payload: gameState\n  }\n}\n\nexport function AddPlayerAction(name: string, color: string, room: string): PlayerStateActionTypes {\n  return {\n    type: ADD_PLAYER,\n    payload: { name, color, room }\n  }\n}\n\nexport function GetAllGamesAction(array: string[]): AllGamesActionTypes {\n  return {\n    type: GET_ALL_GAMES,\n    payload: array\n  }\n}\n\n\nexport function StartGameAction(players: Player[]): GameStateActionTypes {\n  return {\n    type: START_GAME,\n    payload: players\n  }\n}\n\nexport function addPlayerToGameState(player: Player): GameStateActionTypes {\n  return {\n    type: ADD_PLAYER_TO_GAME,\n    payload: { player }\n  }\n}\n\n\nexport function DealCardsToNewPlayerAction(props: dealCardsProp): GameStateActionTypes {\n  const { player, state } = props;\n  return {\n    type: DEAL_CARDS,\n    payload: { player, state }\n  }\n}","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/redux/gameState/gameStateReducer.ts",["161","162","163"],"import { ADD_PLAYER_TO_GAME, CLEAR_MISINFO, DEAL_CARDS, DEBUNK_MISINFO, DISCARD_ACTION, GameStateActionTypes, LOG_ON_OFF, MOVE_ACTION, SHARE_CARD, START_GAME, UPDATE_GAME_STATE } from './reduxTypes';\nimport { initialState } from './initialState'\nimport { Gamestate } from '../../types/gameStateTypes'\nimport { clearMisinfo, debunkMisinfo, discardCard, logOnOff, moveAction, shareCard } from '../../logic/actions.newState_CO'\nimport { addPlayerToGame, dealCardsToNewPlayer, setUp } from '../../logic/actions.MW';\nimport { Console } from 'console';\n//here should be a initial State of the Game\nconst GameState: Gamestate = initialState;\n// const GameState: Gamestate = gameState;\n\nexport function gameStateReducer(\n  state = GameState,\n  action: GameStateActionTypes\n): Gamestate {\n  switch (action.type) {\n    case MOVE_ACTION: {\n      const ap = action.payload;\n      const newstate = moveAction(ap.oldState, ap.currentPlayerID, ap.location)\n      return { ...state, ...newstate, received: false };\n    }\n    case CLEAR_MISINFO: {\n      const ap = action.payload;\n      // return {...clearMisinfo(ap.oldState, ap.currentPlayerID, ap.misinfoType, ap.location),  ...state, received: false }}\n      const newState = { ...state, received: false }\n      return { ...newState, ...clearMisinfo(ap.oldState, ap.currentPlayerID, ap.misinfoType, ap.location) }\n    }\n\n    case SHARE_CARD: {\n      const ap = action.payload;\n      const newstate = shareCard(ap.oldState, ap.currentPlayerID, ap.recipient, ap.sharedCard)\n      return { ...state, ...newstate, received: false };\n    }\n    case LOG_ON_OFF: {\n      const ap = action.payload;\n      const newstate = logOnOff(ap.oldState, ap.currentPlayerID, ap.location, ap.usedCard)\n      return { ...state, ...newstate, received: false };\n    }\n    case DEBUNK_MISINFO: {\n      const ap = action.payload;\n      const newstate = debunkMisinfo(ap.oldState, ap.currentPlayerID, ap.usedCards, ap.misinfoType)\n      return { ...state, ...newstate, received: false };\n    }\n    case DISCARD_ACTION: {\n      const ap = action.payload;\n      const newstate = discardCard(ap.oldState, ap.currentPlayerID, ap.discardedCard)\n      return { ...state, ...newstate, received: false };\n    }\n\n    case UPDATE_GAME_STATE:\n      return {\n        ...state, ...action.payload\n      }\n\n    case DEAL_CARDS: {\n      const ap = action.payload;\n      const newstate = dealCardsToNewPlayer(ap.player, ap.state)\n      console.log(\n        'reducer - deal cards', newstate\n      )\n      return { ...newstate, received: false }\n    }\n    case START_GAME: {\n      const initialState = setUp(action.payload)\n      // console.log('it gets here - START GAME REDUCER')\n      const obj = { ...state, ...initialState, gameOn: true, received: false }\n      // console.log('obj - AFTER UPDATE', obj)\n      return obj\n\n    }\n    default: return state\n  }\n}\n","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/redux/gameState/allGamesReducer.ts",[],"/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/redux/gameState/playerReducer.ts",[],"/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/helpers/iconExporter.ts",[],"/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/GameOn.tsx",["164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179"],"\nimport React, { useEffect, useState } from 'react';\n// import { Box, Button, Grommet, Card, CardHeader, CardBody, CardFooter, Meter } from 'grommet';\n// import { Notification } from 'grommet-icons';\nimport { Provider, useDispatch, useSelector } from 'react-redux';\nimport { RootState, store } from '../redux/gameState/store';\nimport { getGame, getGames, joinRoom } from '../socket-io-client/socket-io-client';\nimport { CureDeck } from '../components/CureDeck/CureDeck';\nimport { getIcon } from '../helpers/iconExporter'\nimport { SourceCard } from '../components/SourceCard/SourceCard';\nimport { CardHand } from '../components/CardHand/CardHand';\nimport { SourceDeck } from '../components/sourceDeck/sourceDeck'\nimport { MarkersStore } from '../components/MarkersStore/MarkersStore'\nimport { MisinformationDeck } from '../components/MisinformationDeck/misinformationDeck'\nimport { ChaosMeter } from '../components/ChaosMeter/ChaosMeter'\nimport { SpreadLevel } from '../components/SpreadLevel/SpreadLevel';\nimport { PlayerPrompt } from '../components/PlayerPrompt/PlayerPrompt';\nimport { SourceParent } from '../components/SourceParent/SourceParent';\nimport { NewGameMenu } from '../components/NewGameMenu/NewGameMenu'\nimport { addPlayerToGameState, DealCardsToNewPlayerAction, StartGameAction } from '../redux/gameState/gameStateActions';\nimport { Gamestate, Player } from '../types/gameStateTypes';\nimport { UpdateGameStateAction } from '../redux/gameState/reduxTypes';\nimport { OtherPlayer } from './OtherPlayer/OtherPlayer';\n\n\ninterface Props {\n  rendered: boolean\n}\n\nexport const GameOn: React.FC<Props> = ({ rendered }): JSX.Element => {\n\n  const dispatch = useDispatch();\n  // const [showSidebar, setShowSidebar] = useState(false);\n  const player = useSelector((state: RootState) => state.playerStateReducer)\n  const allRooms = useSelector((state: RootState) => state.allGamesStateReducer)\n\n  const getCards = () => {\n    state = store.getState().gameStateReducer\n    console.log(state, 'state from the gey cards button')\n    dispatch(DealCardsToNewPlayerAction({ player, state }))\n  }\n\n  const checkCards = (newstate: Gamestate) => {\n    for (let PLAYER of newstate.players) {\n      if (PLAYER.id === player.id) {\n        const p = PLAYER.cards;\n        const card = p[0];\n        if (!card) {\n\n          return true\n        }\n      }\n    }\n    return false;\n  };\n\n\n\n  let state = useSelector((state: RootState) => state.gameStateReducer)\n\n  return (\n    <div>\n      { (rendered && state.gameOn) &&\n        <div className=\"app-outer-wrapper\">\n          <div className=\"app-container\">\n            {/* <Map /> */}\n            {/* <GameBoard /> */}\n            <div className=\"sidebar left\">\n              {(checkCards(state) === true) ?\n                <button onClick={getCards}> get cards </button>\n                :\n                <CardHand />\n              }\n              <PlayerPrompt />\n            </div>\n            <div className=\"board-container\">\n              <div id=\"game-board\">\n                {/* <MapSVG className=\"map-svg\"/> */}\n                <SourceParent />\n              </div>\n              <SourceDeck />\n              <MisinformationDeck />\n              <MarkersStore />\n              {/* <ChaosMeterGrommet /> */}\n              <OtherPlayer />\n              {/* </Grommet> */}\n\n            </div>\n            <div className=\"sidebar right\">\n              <ChaosMeter />\n            </div>\n          </div>\n        </div>\n      }\n    </div >\n  )\n}","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/NewGameMenu/NewGameMenu.tsx",["180","181","182","183","184","185","186","187","188","189","190","191","192"],"import React, { ButtonHTMLAttributes, ChangeEvent, DetailedHTMLProps, useState } from 'react';\nimport './NewGameMenu.scss';\n// import { startGameEvent, addPlayerEvent } from '../../logic/event.listeners'\nimport { AddPlayerAction, addPlayerToGameState, DealCardsToNewPlayerAction, StartGameAction, updateGameState } from '../../redux/gameState/gameStateActions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState, store } from '../../redux/gameState/store';\nimport { Player } from '../../types/gameStateTypes';\nimport { Console } from 'console';\nimport { getIcon} from '../../helpers/iconExporter'\n\n\nexport const NewGameMenu: React.FC = () => {\n  const [input, updateName] = useState({ name: '', color: '', room: '' })\n  // const [Room, updateRoom] = useState('')\n  const dispatch = useDispatch();\n  const [option, updateOption] = useState(true)\n\n  const HexagonPawn = getIcon('hexagonPlayerPawn');\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    event.preventDefault()\n    if (event.target) {\n      updateName(state => ({\n        ...state,\n        [event.target.name]: event.target.value\n      }))\n    }\n\n  }\n\n\n  let player = useSelector((state: RootState) => state.playerStateReducer)\n  let state = useSelector((state: RootState) => state.gameStateReducer)\n\n  const addPlayer = (event: React.MouseEvent<HTMLElement>) => {\n    event.preventDefault()\n    dispatch(AddPlayerAction(input.name, input.color, input.room))\n  }\n\n\n\n\n\n\n\n  // const selectRoom = (e: React.ChangeEvent<HTMLSelectElement>) => {\n  //   console.log(e.target.value);\n  //   updateRoom(e.target.value);\n  // }\n\n  return (\n    <form className='form' >\n      <div className='menu-container'>\n        <div className='title-container'>\n          <h3>Welcome</h3>\n        </div>\n        <HexagonPawn className=\"hex-pawn\" />\n        <input\n          type='text'\n          name='name'\n          value={input.name}\n          placeholder='player name...'\n          onChange={handleChange}\n        ></input>\n\n        <input\n          type='text'\n          name='color'\n          value={input.color}\n          placeholder='color'\n          onChange={handleChange}\n        >\n        </input>\n\n        <input\n          type='text'\n          name='room'\n          value={input.room}\n          placeholder='room name'\n          onChange={handleChange}\n\n        ></input>\n        <input\n          type='text'\n          name='number of players'\n          placeholder='1 - 4 players...'\n        ></input>\n        {/*\n        <select\n          placeholder='select room'\n          value={Room}\n          onChange={selectRoom}>\n          {(rooms.length > 0) ?\n            rooms.map(room =>\n              <option value={`${room}`} id='room-options'>\n                {room}\n              </option>) :\n            <option> Start new game</option>\n          }\n        </select> */}\n\n        <button className='start_game_button' type='submit' onClick={addPlayer} >\n          Play\n        </button>\n      </div>\n    </form>\n  );\n};","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/YouWon/youWon.tsx",[],"/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/GameOver/gameOver.tsx",[],"/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/redux/gameState/reduxTypes.ts",[],"/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/logic/actions.newState_CO.ts",["193","194","195","196"],"import { Gamestate, Card,ViralCard, Source, Player, Misinformation } from '../types/gameStateTypes'\nimport { didWin, viral as playViralCard, dealMisinfoCard,dealConnectionCard, didLose, setUp } from './actions.MW'\nimport { connections as sources } from './connections'\nimport {viralCheck} from './actions.MW'\nimport { MisinformationDeck } from '../components/MisinformationDeck/misinformationDeck';\n\n\n//* START THE GAME\n//? called when start button pressed, after game initialised and player order set\n\nexport function startGame(oldState: Gamestate) {\n  const currentPlayerID: Player['id'] = oldState.players[0].id;\n  return updatePossibleActions(oldState, currentPlayerID);\n}\n\n//* ACTIONS\n\nexport function moveAction(oldState: Gamestate, currentPlayerID: Player['id'], location: Source['name']): Gamestate {\n  const newState: Gamestate =\n  {\n    ...oldState,\n    players: oldState.players\n      .map((player) => player.id === currentPlayerID ?\n        { ...player, currentSource: location } :\n        player\n      ),\n    turnMovesLeft: oldState.turnMovesLeft - 1,\n  };\n  console.log(`%c player moved to ${location}`,`background-color: green; color: white; padding: 10px`);\n  console.log(`%c there are ${newState.turnMovesLeft} moves left`,`background-color: lightpink; color: black; padding: 10px`);\n  return nextMoveChecker(newState, currentPlayerID);\n}\n\n\nexport function clearMisinfo(oldState: Gamestate, currentPlayerID: Player['id'], misinfoType: Misinformation['name'], location: Source['name']): Gamestate {\n  const sourceIndex: number = oldState.sources.map((source) => source.name).indexOf(location);\n  console.log('old state in clearmisinfo', oldState)\n  let noOfMarkers: number = 1;\n  if (oldState.misinformation[misinfoType].debunked) {\n    noOfMarkers = oldState.sources[sourceIndex][`markers_${misinfoType}`]\n  };\n  const newState: Gamestate =\n  {\n    ...oldState,\n    sources: oldState.sources\n      .map((source) => source.name === location ?\n        { ...source, [`markers_${misinfoType}`]: source[`markers_${misinfoType}`] - noOfMarkers } :\n        source\n      ), \n    misinformation: {\n      ...oldState.misinformation,\n      [misinfoType]: {\n        ...oldState.misinformation[misinfoType],\n        markersLeft: oldState.misinformation[misinfoType].markersLeft - noOfMarkers\n      }\n    },\n    turnMovesLeft: oldState.turnMovesLeft - 1,\n  };\n  console.log('player cleared', noOfMarkers, misinfoType);\n  console.log(`%c player cleared ${noOfMarkers} ${misinfoType} markers`,`background-color: lightsalmon; color: green; padding: 10px`);\n  console.log(`%c there are ${newState.turnMovesLeft} moves left`,`background-color: lightpink; color: black; padding: 10px`);\n  return nextMoveChecker(newState, currentPlayerID);\n}\n\n\nexport function shareCard(oldState: Gamestate, currentPlayerID: Player['id'], recipient: Player['id'], sharedCard: Card['sourceName']): Gamestate {\n  \n  const playerIndex = oldState.players\n    .map((player) => player.id)\n    .indexOf(currentPlayerID);\n  const cardMisinfoValue = oldState.players[playerIndex].cards\n    .filter((card) => card.sourceName === sharedCard)[0].misinfoType;\n  \n  \n  const newState: Gamestate =\n  {\n    ...oldState,\n    players: oldState.players\n      .map((player) => player.id === currentPlayerID ?\n        {\n          ...player,\n          cards: player.cards.filter((card) => card.sourceName !== sharedCard)\n        } :\n        player.id === recipient ?\n          {\n            ...player,\n            cards: [...player.cards, {\n              cardType: 'connection',\n              sourceName: sharedCard,\n              misinfoType: cardMisinfoValue\n            }],\n          } :\n          player\n      ),\n    turnMovesLeft: oldState.turnMovesLeft - 1,\n  };\n  console.log('player shared', sharedCard, 'with player', recipient);\n  console.log(`%c there are ${newState.turnMovesLeft} moves left`,`background-color: lightpink; color: black; padding: 10px`);\n  return nextMoveChecker(newState, currentPlayerID);\n}\n\n\nexport function logOnOff(oldState: Gamestate, currentPlayerID: Player['id'], location: Source['name'], usedCard: Card['sourceName']): Gamestate {\n  const newState: Gamestate =\n  {\n    ...oldState,\n    players: oldState.players\n      .map((player) => player.id === currentPlayerID ?\n        {\n          ...player,\n          currentSource: location,\n          cards: player.cards.filter((card) => card.sourceName !== usedCard)\n        } :\n        player\n      ),\n    turnMovesLeft: oldState.turnMovesLeft - 1,\n  };\n  console.log(`%c player flew to ${location} using the ${usedCard} card`,`background-color: cyan; color: black; padding: 10px`);\n  console.log(`%c there are ${newState.turnMovesLeft} moves left`,`background-color: lightpink; color: black; padding: 10px`);\n  return nextMoveChecker(newState, currentPlayerID);\n}\n\n\nexport function debunkMisinfo(oldState: Gamestate, currentPlayerID: Player['id'], usedCards: Card['sourceName'][], misinfoType: Misinformation['name']): Gamestate {\n  const newState: Gamestate =\n  {\n    ...oldState,\n    players: oldState.players\n      .map((player) => player.id === currentPlayerID ?\n        {\n          ...player,\n          cards: player.cards.filter((card) => !usedCards.includes(card.sourceName))\n        } :\n        player\n      ),\n    misinformation: {\n      ...oldState.misinformation,\n      [misinfoType]: {\n        ...oldState.misinformation[misinfoType],\n        debunked: true,\n      }\n    },\n    turnMovesLeft: oldState.turnMovesLeft - 1,\n  };\n  if (didWin(newState)) {\n    console.log(`%c CONGRATULATIONS! You debunked all the misinformation in the world and won. Good for you.`,`background-color: chartreuse; color: indianred; padding: 10px; font-weight: bold`);\n    return {\n      ...newState,\n      gameWon: true,\n    }\n  } else {\n    console.log('player debunked', misinfoType);\n    console.log(`%c there are ${newState.turnMovesLeft} moves left`,`background-color: lightpink; color: black; padding: 10px`);\n    return nextMoveChecker(newState, currentPlayerID)\n  }\n}\n\n\n//* TURN\n\nexport function updatePossibleActions(oldState: Gamestate, currentPlayerID: Player['id']): Gamestate {\n  //* settup\n  const playerIndex: number = oldState.players.map((player) => player.id).indexOf(currentPlayerID);\n  const location: Player['currentSource'] = oldState.players[playerIndex].currentSource;\n  const sourceIndex: number = oldState.sources.map((source) => source.name).indexOf(location);\n  //* move check\n  const adjacents: string[] = sources.filter((source) => source.name === location)[0].connections;\n  //* clear checks\n  const clearCommunityMisinfo: boolean = oldState.sources[sourceIndex].markers_community > 0;\n  const clearSocialMisinfo: boolean = oldState.sources[sourceIndex].markers_social > 0;\n  const clearRelationsMisinfo: boolean = oldState.sources[sourceIndex].markers_relations > 0;\n  //* share checks\n  // check if cards in hand\n  let possibleShares: Player[] = [];\n  if (oldState.players[playerIndex].cards.length > 0) {\n    // check if another player is there\n    const otherPlayers: Player[] = oldState\n      .players\n      .filter((player) => player.id !== currentPlayerID)\n      .filter((otherPlayer) => otherPlayer.currentSource === location);\n    // check players have space in their hand\n    possibleShares = otherPlayers\n      .filter((player) => player.cards.length < 6)\n  }\n  //* logoff checks\n  // check hand contains current location card\n  const logoffPossible: boolean = oldState.players[playerIndex].cards\n    .filter((card) => card.sourceName === location)\n    .length > 0;\n  //* logon check\n  // check hand contains other location card\n  const logonPossible: Card['sourceName'][] = oldState.players[playerIndex].cards\n    .map((card) => card.sourceName)\n    .filter((name) => name !== location);\n  //* debunk checks\n  // check if we are at home (debunk 1/2)\n  const atHome: boolean = location === 'crazy dave';\n  // check hand contains 4 of any misinfo type/area (debunk 2/2)\n  const debunkable: Misinformation['name'][] = []\n  if (atHome) {\n    if (\n      oldState.players[playerIndex].cards\n        .filter((card) => card.misinfoType === 'community')\n        .length >= 4) {\n      debunkable.push('community')\n    };\n    if (\n      oldState.players[playerIndex].cards\n        .filter((card) => card.misinfoType === 'social')\n        .length >= 4) {\n      debunkable.push('social')\n    };\n    if (\n      oldState.players[playerIndex].cards\n        .filter((card) => card.misinfoType === 'relations')\n        .length >= 4) {\n      debunkable.push('relations')\n    };\n  };\n  //* UPDATE ENTIRE STATE WITH ALL ABOVE CHANGES\n  const newState: Gamestate =\n  {\n    ...oldState,\n    sources: oldState.sources\n      .map((source) => source.name === location ?\n        {\n          ...source,\n          canMove: false,\n          canLogOn: false,\n          canLogOff: false,\n          canClearCommunity: clearCommunityMisinfo,\n          canClearSocial: clearSocialMisinfo,\n          canClearRelations: clearRelationsMisinfo,\n          canShare: possibleShares,\n          canDebunk: debunkable,\n        } :\n        {\n          ...source,\n          canMove: adjacents.includes(source.name),\n          canLogOn: logonPossible.includes(source.name) && !adjacents.includes(source.name),\n          canLogOff: logoffPossible && !adjacents.includes(source.name),\n          canClearCommunity: false,\n          canClearSocial: false,\n          canClearRelations: false,\n          canShare: [],\n          canDebunk: [],\n        }\n      ),\n  };\n  return newState;\n}\n\n\nexport function boardActions(oldState: Gamestate, currentPlayerID: Player['id'], noOfCards: number): Gamestate {\n  // deal connection cards\n  const playerIndex = oldState.players\n    .map((player) => player.id)\n    .indexOf(currentPlayerID);\n  let cardsLeft = noOfCards;\n  \n  let newState: Gamestate = oldState;\n  while (cardsLeft > 0) {\n    newState = dealConnectionCard(oldState);\n    // check here for losing\n    if (didLose(newState)){\n      console.log(`%c there are no more cards in the deck, so...`,`color: darkred; padding:10px`);\n      console.log(`%c ...You Lose!`,`background-color: darkred; color: mintcream; font-weight: bold; padding:10px`);\n      console.log(`%c SETTING UP NEW GAME...`,`background-color: mediumspringgreen; color: navy; font-weight: bold; padding:10px`);\n      setUp(newState.players);\n    }\n    if (newState.players[playerIndex].cards.length > 6) {\n      console.log('your hand is full, you need to discard a card');\n      return {\n        ...newState,\n        players: newState.players\n          .map((player) => player.id === currentPlayerID ?\n            { ...player, cardHandOverflow: true } :\n            player\n          ),\n        dealHistory: cardsLeft - 1,\n      } // exits function here\n    }\n    cardsLeft--;\n  }\n  //? do we need to put breaks here, and how, for the front end to update or show when a card has been dealt?\n  // check spread marker for weight\n  // deal misinfo cards\n  let misinfoCardNo = [2, 2, 3, 4][newState.spreadLevel];\n  while (misinfoCardNo > 0) {\n    newState = dealMisinfoCard(newState, 1, false)!\n    // check if lose (run out of misinfo)\n    if (didLose(newState)){\n      console.log(`%c there are no more misinfo cards in the deck, so...`,`color: darkred; padding:10px`);\n      console.log(`%c ...You Lose!`,`background-color: darkred; color: mintcream; font-weight: bold; padding:10px`);\n      console.log(`%c SETTING UP NEW GAME...`,`background-color: mediumspringgreen; color: navy; font-weight: bold; padding:10px`);\n      setUp(newState.players);\n    }\n    misinfoCardNo--\n  }\n  //change current player turn\n  //? anything else needs resetting?\n  return nextTurn(newState, currentPlayerID)\n}\n\n//* HELPERS\n\nexport function nextTurn(oldState: Gamestate, currentPlayerID: Player['id']): Gamestate {\n  if(oldState.players.length>1){\n  const playerIndex: number = oldState.players.map((player) => player.id).indexOf(currentPlayerID);\n  const nextPlayerIndex: number = playerIndex === oldState.players.length - 1 ?\n    0 :\n    playerIndex + 1;\n  const newState: Gamestate =\n  {\n    ...oldState,\n    players: oldState.players\n      .map((player, index) => index === playerIndex ?\n        { ...player, isCurrent: false } :\n        index === nextPlayerIndex ?\n          { ...player, isCurrent: true } :\n          player\n      ),\n    // reset number of moves\n    turnMovesLeft: 4,\n  };console.log(`%c NEXT PLAYERS TURN`,`background-color: lightgreen; color: black; padding: 10px`);\n  return updatePossibleActions(newState, newState.players[nextPlayerIndex].id)\n}\n  const newState= {\n    ...oldState,\n    turnMovesLeft: 4,\n  };\n  return updatePossibleActions(newState,currentPlayerID)\n}\n\n\n// export function dealConnectionCard(oldState: Gamestate, currentPlayerID: Player['id']): Gamestate {\n//   //* if no cards left then game is lost\n//   if (oldState.connectionDeck.length === 0) {\n//     console.log('no more connections... you lost!');\n//     return {\n//       ...oldState,\n//       gameLost: true\n//     }\n//   }\n//   const newCard: Card|ViralCard = oldState.connectionDeck[0]\n//   console.log('NEWCARD' , newCard)\n//   if (viralCheck(newCard)) {\n//     //? does viral function remove card? should it be returned? should it also break for game checks?\n//     console.log('you drew a viral card!');\n//     return playViralCard(oldState)\n//   }\n//   else {\n//     const newState: Gamestate =\n//     {\n//       ...oldState,\n//       players: oldState.players\n//         .map((player) => player.id === currentPlayerID ?\n//           {\n//             ...player,\n//             cards: [...player.cards, newCard],\n//           } :\n//           player\n//         ),\n//       connectionDeck: oldState.connectionDeck.slice(1)\n//     };\n//     console.log('player was dealt a', newCard, 'connection card');\n//     return newState;\n//   }\n// }\n\n\nexport function nextMoveChecker(oldState: Gamestate, currentPlayerID: Player['id']): Gamestate {\n  if (oldState.turnMovesLeft > 0) {\n    return updatePossibleActions(oldState, currentPlayerID)\n  } else {\n    //? move onto 'board actions' part of turn\n    return boardActions(oldState, currentPlayerID, 2)\n  }\n}\n\n\n// called when player has chosen to discard card from hand, when cardHandOverflow === true\nexport function discardCard(oldState: Gamestate, currentPlayerID: Player['id'], discardedCard: Card['sourceName']): Gamestate {\n  const newState: Gamestate =\n  {\n    ...oldState,\n    players: oldState.players\n      .map((player) => player.id === currentPlayerID ?\n        {\n          ...player,\n          cards: player.cards.filter((card) => card.sourceName !== discardedCard),\n          cardHandOverflow: false,\n        } :\n        player\n      ),\n  };\n  //? calling boardActions with newState.dealHistory will decrement the amount of connection cards to be dealt, allowing the function to continue where it left off\n  return boardActions(newState, currentPlayerID, newState.dealHistory)\n}","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/logic/actions.MW.ts",[],"/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/redux/gameState/initialState.tsx",["197","198","199","200","201"],"// this initial state presumes 2 players, 3 locations (one for each color), 3 connection and 3 misinfo cards, and 1 viral card.\n\nimport { Gamestate, Card, Source, Player, Misinformation, Connection } from '../../types/gameStateTypes'\n\nexport const initialState: Gamestate = {\n  sources: [\n  \n  ],\n  players: [\n  ],\n  spreadLevel: 1,\n  chaosMeter: 0,\n  misinformation: {\n    community: {\n      name: 'Misinfo Type 1',\n      debunked: false,\n      markersLeft: 16,\n    },\n    social: {\n      name: 'Misinfo Type 2',\n      debunked: false,\n      markersLeft: 16,\n    },\n    relations: {\n      name: 'Misinfo Type 3',\n      debunked: false,\n      markersLeft: 16,\n    },\n  },\n  connectionDeck: [\n    {\n      cardType: 'connection',\n      sourceName: 'University',\n      misinfoType: 'blue',\n    },\n    {\n      cardType: 'connection',\n      sourceName: 'Gym',\n      misinfoType: 'red',\n    },\n    {\n      cardType: 'connection',\n      sourceName: 'Instagram',\n      misinfoType: 'yellow',\n    },\n    {\n      cardType: 'viral',\n    },\n  ],\n  misinformationDeckActive: [\n    {\n      cardType: 'misinformation',\n      sourceName: 'University',\n      misinfoType: 'blue',\n    },\n    {\n      cardType: 'misinformation',\n      sourceName: 'Gym',\n      misinfoType: 'red',\n    },\n    {\n      cardType: 'misinformation',\n      sourceName: 'Instagram',\n      misinfoType: 'yellow',\n    },\n  ],\n  misinformationDeckPassive: [],\n  turnMovesLeft: 4,\n  dealHistory: 0,\n  gameWon: false,\n  gameLost: false,\n  received: false,\n  gameOn:false\n}","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/CardHand/CardHand.tsx",[],"/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/sourceDeck/sourceDeck.tsx",[],"/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/MarkersStore/MarkersStore.tsx",[],"/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/ChaosMeter/ChaosMeter.tsx",["202"],"import React from 'react';\nimport './ChaosMeter.scss';\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../redux/gameState/store';\nexport const ChaosMeter: React.FC = () => {\n  //const chaos = store.getState().gameStateReducer.chaosMeter;\n  const chaos = useSelector((state: RootState) => state.gameStateReducer.chaosMeter)\n\n  return (\n    <div className=\"rings\">\n      <div className=\"percent1\">\n        <svg>\n          <circle cx=\"70\" cy=\"70\" r=\"70\"></circle>\n          <circle cx=\"70\" cy=\"70\" r=\"70\"></circle>\n        </svg>\n      </div>\n      <div className=\"number \">\n        <h2>75<span>%</span></h2>\n      </div>\n    </div>\n  );\n};\n\n//   <div className='progress-container'>\n//     <svg className='progress-circle' viewBox='0 0 64 64'>\n//       <circle\n//         className='progressbar__track'\n//         cx='50%'\n//         cy='50%'\n//         r='30px'\n//       ></circle>\n//       <circle\n//         className='progressbar__thumb\n//         progressbar__thumb--track-1'\n//         cx='50%'\n//         cy='50%'\n//         r='30px'\n//       ></circle>\n//       <circle\n//         className='progressbar__thumb\n//         progressbar__thumb--track-2'\n//         cx='50%'\n//         cy='50%'\n//         r='30px'\n//       ></circle>\n//       <circle\n//         className='progressbar__thumb\n//         progressbar__thumb--track-3'\n//         cx='50%'\n//         cy='50%'\n//         r='30px'\n//       ></circle>\n//     </svg>\n//   </div>\n// );\n","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/SourceParent/SourceParent.tsx",["203","204"],"import React from 'react'\nimport PropTypes from 'prop-types'\n// import { initDummyState } from '../../logic/dummyState.REDO_CO';\nimport { SourceComponent  } from '../Source/Source'\nimport {Source} from '../../types/gameStateTypes'\nimport { render } from '@testing-library/react';\nimport {useSelector} from 'react-redux'\nimport { RootState } from '../../redux/gameState/store'\nimport './SourceParent.scss'\n\nexport const SourceParent = () => {\n  // const sources = initDummyState.sources;\n  const sources = useSelector((state: RootState) => state.gameStateReducer.sources);\n\n\n  // use the\n\n  const renderSources = (srcArr: Source[]) => {\n    \n    return srcArr.map(source => {\n      //! GET source.markers_community etc and plug into props of SourceComponent\n\n\n      return <SourceComponent source={source} key={source.name}/>\n    })\n  }\n\n  return (\n    <div id=\"source-parent-grid-container\">\n      {renderSources(sources)}\n    </div>\n  )\n}\n\n\n\n","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/OtherPlayer/OtherPlayer.tsx",[],"/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/PlayerPrompt/PlayerPrompt.tsx",[],"/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/MisinformationDeck/misinformationDeck.tsx",[],"/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/logic/connections.ts",[],"/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/helpers/utils.ts",[],"/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/SourceCard/SourceCard.tsx",["205","206","207"],"import React from 'react';\nimport { getIcon } from '../../helpers/iconExporter'\nimport { toCamelCase, toPascalCase } from '../../helpers/utils'\nimport './SourceCard.scss'\nimport { shareCardEvent } from '../../logic/event.listeners';\nimport { ShareCardProps } from '../../redux/gameState/reduxTypes'\n\n//! issue with \"Card\" interface beings used for both Source/connection & \"Viral\" cards, which have name type \"null\" - possible change types/logic later\nexport interface SourceCardProps {\n  name: string,    //! NULL TO BE REMOVED\n  category: string, //! NULL TO BE REMOVED\n  canShare: any[]\n}\n// DON'T NEED ===> canlogon can go to the place if you have that card\n// canShare: a button that appears on each card when you are on the same location as another player\n// canchare: Player[]\n\n\nexport const SourceCard: React.FC<SourceCardProps> = ({ name, category, canShare }: SourceCardProps) => { // SVGIcon\n\n  const currentState = {}\n\n  const SVGIcon = getIcon(toCamelCase(name) + 'Icon');\n\n  const handleShareClick = (id: string) => {\n    //DISPATCH ACTION\n    console.log(`SHARING CARD ${name} WITH ${id}`);\n  }\n\n\n  const renderShareButtons = (shareWith: { name: string, id: string }[]) => {\n    return shareWith.map(player => <button onClick={() => handleShareClick(player.id)\n\n      // shareCardEvent({\n      //   oldState: currentState,\n      //   currentPlayerID: ,\n      //   recipient: player.id,\n      //   sharedCard: name\n      // })\n    }>{player.name}</button>)\n  }\n  return (\n    <div className={`source-card-container ${category}`} >\n      <SVGIcon name={name} className=\"card-icon\" />\n      <div className=\"name-container\" >\n        <p className=\"title\">{toPascalCase(name)}</p>\n        {renderShareButtons(canShare)}\n      </div>\n    </div>\n  )\n}","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/Source/Source.tsx",["208","209","210","211","212"],"/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/Source/DebunkModal.tsx",["213","214","215","216","217"],"import React, { useEffect, useState } from 'react';\nimport Modal from 'react-modal';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../redux/gameState/store';\nimport { SourceCard } from '../SourceCard/SourceCard';\nimport ReactDOM from 'react-dom';\nimport { Card } from '../../types/gameStateTypes';\nimport ReactModal from 'react-modal';\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)'\n  }\n};\n\n\ninterface ModalProps {\n  modalIsOpen: boolean,\n  closeModal: Function,\n  setselectedDebunkCards: Function\n}\n\ninterface CardWithId extends Card {\n  id: string\n\n}\n\nexport function ModalComponent({ modalIsOpen, closeModal, setselectedDebunkCards, }: ModalProps) {\n  const playerId = useSelector((state: RootState) => state.playerStateReducer.id)\n\n  const players = useSelector((state: RootState) => state.gameStateReducer.players)\n\n  const [pickedCards, setpickedCards] = useState<CardWithId[]>([])\n\n\n  let playerCards = players.find(player => player.id === playerId)?.cards\n\n\n\n\n  console.log('FUCK ALL THESE LOGS _ -----------------!!!!!playerCards ', playerId, players)\n\n  const fakeCards: Card[] = [{ cardType: \"connection\", sourceName: \"Instagram\", misinfoType: \"yellow\" },\n  { cardType: \"connection\", sourceName: \"Instagram\", misinfoType: \"yellow\" },\n  { cardType: \"connection\", sourceName: \"Instagram\", misinfoType: \"yellow\" }]\n\n  const fakeCardsWithIdInit: CardWithId[] = fakeCards.map((card) => {\n    (card as CardWithId).id = uid()\n    return card\n  }) as CardWithId[]\n\n  const [fakeCardsWithId, setfakeCardsWithId] = useState(fakeCardsWithIdInit)\n\n\n  var subtitle: any;\n\n  useEffect(() => {\n    console.log('pickedCards from UseEffect', pickedCards)\n\n  }, [pickedCards])\n\n\n  function uid(rounds: number = 1) {\n    let uid = '';\n    while (rounds > 0) {\n      uid += Math.random().toString(32).substring(2, 10);\n      rounds -= 1;\n    }\n    return uid;\n  }\n\n\n  function afterOpenModal() {\n    // references are now sync'd and can be accessed.\n  }\n\n  function sendcloseModal(e: any) {\n    e.preventDefault()\n    console.log('Close Modal')\n\n    const pickedCardsAsCard: Card[] = pickedCards.map((cardWithId) => {\n      const card: Card = { cardType: cardWithId.cardType, sourceName: cardWithId.sourceName, misinfoType: cardWithId.misinfoType }\n      return card\n    }) as Card[]\n\n    setselectedDebunkCards(pickedCardsAsCard)\n    closeModal()\n  }\n\n  const clickOnCard = (e: React.MouseEvent<HTMLElement>, fakeCard: CardWithId) => {\n    console.log(e.target);\n    let div = e.target as HTMLInputElement;\n\n    if (!div.classList.contains('selected')) {\n      div.classList.add('selected')\n      setpickedCards(prev => [...prev, fakeCard])\n\n    } else {\n      div.classList.remove('selected')\n\n      const filtered = pickedCards.filter(card => card.id !== fakeCard.id)\n\n      console.log('filtered cards ', filtered)\n      setpickedCards(filtered)\n    }\n\n\n\n\n\n  }\n\n  return (\n    <div>\n\n      <ReactModal\n        ariaHideApp={false}\n        isOpen={modalIsOpen}\n        onAfterOpen={afterOpenModal}\n        onRequestClose={sendcloseModal}\n        style={customStyles}\n        contentLabel=\"Example Modal\"\n      >\n\n        {pickedCards.map((pickedCard, index) => <div style={{ height: 50, borderWidth: 'solid' }} key={index}\n          onClick={(e) => clickOnCard(e, pickedCard)}>\n          <SourceCard name={pickedCard.sourceName} category={pickedCard.cardType} canShare={[]} />\n\n        </div>)}\n\n        <div style={{ border: \"1px solid black\" }}></div>\n\n\n        {fakeCardsWithId.map((fakeCard, index) => <div style={{ height: 50, borderWidth: 'solid' }} key={index}\n          onClick={(e) => clickOnCard(e, fakeCard)}>\n          <SourceCard name={fakeCard.sourceName} category={fakeCard.cardType} canShare={[]} />\n\n        </div>)}\n        <button onClick={sendcloseModal}>Send</button>\n      </ReactModal>\n    </div>\n  );\n}","/Users/connormacphee/Desktop/codeworks-round-2/senior/Thesis-Project/Viral/client/src/components/PlayerPawn/PlayerPawn.tsx",["218","219","220","221"],"// import React from 'react';\nimport React from 'react';\n// also exported from '@storybook/react' if you can deal with breaking changes in 6.1\nimport { Story, Meta } from '@storybook/react/types-6-0';\nimport './PlayerPawn.css';\nimport { withDesign } from 'storybook-addon-designs';\nimport { useSelector } from 'react-redux';\n// import {RootState} from '../../redux/gameState/store'\n\n\nexport interface PlayerPawnProps {\n  color: string;\n}\n\nexport const PlayerPawn: React.FC<PlayerPawnProps> = ({\n  color,\n}: PlayerPawnProps) => {\n  return (\n    <div className='container'>\n      <div className={`player_pawn ${color}`}></div>\n    </div>\n  );\n};\n",{"ruleId":"222","replacedBy":"223"},{"ruleId":"224","replacedBy":"225"},{"ruleId":"226","severity":1,"message":"227","line":7,"column":10,"nodeType":"228","messageId":"229","endLine":7,"endColumn":14},{"ruleId":"226","severity":1,"message":"230","line":2,"column":17,"nodeType":"228","messageId":"229","endLine":2,"endColumn":26},{"ruleId":"226","severity":1,"message":"231","line":5,"column":10,"nodeType":"228","messageId":"229","endLine":5,"endColumn":18},{"ruleId":"226","severity":1,"message":"232","line":6,"column":21,"nodeType":"228","messageId":"229","endLine":6,"endColumn":26},{"ruleId":"226","severity":1,"message":"233","line":7,"column":19,"nodeType":"228","messageId":"229","endLine":7,"endColumn":27},{"ruleId":"226","severity":1,"message":"234","line":8,"column":10,"nodeType":"228","messageId":"229","endLine":8,"endColumn":18},{"ruleId":"226","severity":1,"message":"235","line":13,"column":10,"nodeType":"228","messageId":"229","endLine":13,"endColumn":30},{"ruleId":"226","severity":1,"message":"236","line":13,"column":32,"nodeType":"228","messageId":"229","endLine":13,"endColumn":58},{"ruleId":"226","severity":1,"message":"237","line":14,"column":10,"nodeType":"228","messageId":"229","endLine":14,"endColumn":19},{"ruleId":"226","severity":1,"message":"238","line":45,"column":9,"nodeType":"228","messageId":"229","endLine":45,"endColumn":15},{"ruleId":"226","severity":1,"message":"239","line":3,"column":10,"nodeType":"228","messageId":"229","endLine":3,"endColumn":26},{"ruleId":"226","severity":1,"message":"240","line":1,"column":10,"nodeType":"228","messageId":"229","endLine":1,"endColumn":28},{"ruleId":"226","severity":1,"message":"241","line":5,"column":10,"nodeType":"228","messageId":"229","endLine":5,"endColumn":25},{"ruleId":"226","severity":1,"message":"242","line":6,"column":10,"nodeType":"228","messageId":"229","endLine":6,"endColumn":17},{"ruleId":"226","severity":1,"message":"230","line":2,"column":17,"nodeType":"228","messageId":"229","endLine":2,"endColumn":26},{"ruleId":"226","severity":1,"message":"243","line":2,"column":28,"nodeType":"228","messageId":"229","endLine":2,"endColumn":36},{"ruleId":"226","severity":1,"message":"231","line":5,"column":10,"nodeType":"228","messageId":"229","endLine":5,"endColumn":18},{"ruleId":"226","severity":1,"message":"244","line":7,"column":10,"nodeType":"228","messageId":"229","endLine":7,"endColumn":17},{"ruleId":"226","severity":1,"message":"233","line":7,"column":19,"nodeType":"228","messageId":"229","endLine":7,"endColumn":27},{"ruleId":"226","severity":1,"message":"245","line":7,"column":29,"nodeType":"228","messageId":"229","endLine":7,"endColumn":37},{"ruleId":"226","severity":1,"message":"234","line":8,"column":10,"nodeType":"228","messageId":"229","endLine":8,"endColumn":18},{"ruleId":"226","severity":1,"message":"246","line":9,"column":10,"nodeType":"228","messageId":"229","endLine":9,"endColumn":17},{"ruleId":"226","severity":1,"message":"247","line":10,"column":10,"nodeType":"228","messageId":"229","endLine":10,"endColumn":20},{"ruleId":"226","severity":1,"message":"248","line":16,"column":10,"nodeType":"228","messageId":"229","endLine":16,"endColumn":21},{"ruleId":"226","severity":1,"message":"249","line":19,"column":10,"nodeType":"228","messageId":"229","endLine":19,"endColumn":21},{"ruleId":"226","severity":1,"message":"235","line":20,"column":10,"nodeType":"228","messageId":"229","endLine":20,"endColumn":30},{"ruleId":"226","severity":1,"message":"250","line":20,"column":60,"nodeType":"228","messageId":"229","endLine":20,"endColumn":75},{"ruleId":"226","severity":1,"message":"251","line":21,"column":21,"nodeType":"228","messageId":"229","endLine":21,"endColumn":27},{"ruleId":"226","severity":1,"message":"252","line":22,"column":10,"nodeType":"228","messageId":"229","endLine":22,"endColumn":31},{"ruleId":"226","severity":1,"message":"253","line":35,"column":9,"nodeType":"228","messageId":"229","endLine":35,"endColumn":17},{"ruleId":"226","severity":1,"message":"254","line":1,"column":17,"nodeType":"228","messageId":"229","endLine":1,"endColumn":37},{"ruleId":"226","severity":1,"message":"255","line":1,"column":52,"nodeType":"228","messageId":"229","endLine":1,"endColumn":69},{"ruleId":"226","severity":1,"message":"235","line":4,"column":27,"nodeType":"228","messageId":"229","endLine":4,"endColumn":47},{"ruleId":"226","severity":1,"message":"236","line":4,"column":49,"nodeType":"228","messageId":"229","endLine":4,"endColumn":75},{"ruleId":"226","severity":1,"message":"250","line":4,"column":77,"nodeType":"228","messageId":"229","endLine":4,"endColumn":92},{"ruleId":"226","severity":1,"message":"256","line":4,"column":94,"nodeType":"228","messageId":"229","endLine":4,"endColumn":109},{"ruleId":"226","severity":1,"message":"232","line":6,"column":21,"nodeType":"228","messageId":"229","endLine":6,"endColumn":26},{"ruleId":"226","severity":1,"message":"251","line":7,"column":10,"nodeType":"228","messageId":"229","endLine":7,"endColumn":16},{"ruleId":"226","severity":1,"message":"242","line":8,"column":10,"nodeType":"228","messageId":"229","endLine":8,"endColumn":17},{"ruleId":"226","severity":1,"message":"257","line":16,"column":10,"nodeType":"228","messageId":"229","endLine":16,"endColumn":16},{"ruleId":"226","severity":1,"message":"258","line":16,"column":18,"nodeType":"228","messageId":"229","endLine":16,"endColumn":30},{"ruleId":"226","severity":1,"message":"259","line":32,"column":7,"nodeType":"228","messageId":"229","endLine":32,"endColumn":13},{"ruleId":"226","severity":1,"message":"260","line":33,"column":7,"nodeType":"228","messageId":"229","endLine":33,"endColumn":12},{"ruleId":"226","severity":1,"message":"261","line":1,"column":26,"nodeType":"228","messageId":"229","endLine":1,"endColumn":35},{"ruleId":"226","severity":1,"message":"262","line":2,"column":27,"nodeType":"228","messageId":"229","endLine":2,"endColumn":40},{"ruleId":"226","severity":1,"message":"263","line":4,"column":9,"nodeType":"228","messageId":"229","endLine":4,"endColumn":19},{"ruleId":"226","severity":1,"message":"264","line":5,"column":10,"nodeType":"228","messageId":"229","endLine":5,"endColumn":28},{"ruleId":"226","severity":1,"message":"265","line":3,"column":21,"nodeType":"228","messageId":"229","endLine":3,"endColumn":25},{"ruleId":"226","severity":1,"message":"266","line":3,"column":27,"nodeType":"228","messageId":"229","endLine":3,"endColumn":33},{"ruleId":"226","severity":1,"message":"251","line":3,"column":35,"nodeType":"228","messageId":"229","endLine":3,"endColumn":41},{"ruleId":"226","severity":1,"message":"267","line":3,"column":43,"nodeType":"228","messageId":"229","endLine":3,"endColumn":57},{"ruleId":"226","severity":1,"message":"268","line":3,"column":59,"nodeType":"228","messageId":"229","endLine":3,"endColumn":69},{"ruleId":"226","severity":1,"message":"269","line":7,"column":9,"nodeType":"228","messageId":"229","endLine":7,"endColumn":14},{"ruleId":"226","severity":1,"message":"270","line":2,"column":8,"nodeType":"228","messageId":"229","endLine":2,"endColumn":17},{"ruleId":"226","severity":1,"message":"271","line":6,"column":10,"nodeType":"228","messageId":"229","endLine":6,"endColumn":16},{"ruleId":"226","severity":1,"message":"272","line":5,"column":10,"nodeType":"228","messageId":"229","endLine":5,"endColumn":24},{"ruleId":"226","severity":1,"message":"273","line":6,"column":10,"nodeType":"228","messageId":"229","endLine":6,"endColumn":24},{"ruleId":"226","severity":1,"message":"274","line":21,"column":9,"nodeType":"228","messageId":"229","endLine":21,"endColumn":21},{"ruleId":"226","severity":1,"message":"275","line":16,"column":10,"nodeType":"228","messageId":"229","endLine":16,"endColumn":18},{"ruleId":"226","severity":1,"message":"276","line":198,"column":9,"nodeType":"228","messageId":"229","endLine":198,"endColumn":19},{"ruleId":"226","severity":1,"message":"277","line":209,"column":9,"nodeType":"228","messageId":"229","endLine":209,"endColumn":22},{"ruleId":"226","severity":1,"message":"278","line":232,"column":7,"nodeType":"228","messageId":"229","endLine":232,"endColumn":25},{"ruleId":"226","severity":1,"message":"279","line":239,"column":9,"nodeType":"228","messageId":"229","endLine":239,"endColumn":15},{"ruleId":"226","severity":1,"message":"280","line":2,"column":8,"nodeType":"228","messageId":"229","endLine":2,"endColumn":13},{"ruleId":"226","severity":1,"message":"281","line":6,"column":8,"nodeType":"228","messageId":"229","endLine":6,"endColumn":16},{"ruleId":"226","severity":1,"message":"282","line":41,"column":7,"nodeType":"228","messageId":"229","endLine":41,"endColumn":18},{"ruleId":"226","severity":1,"message":"283","line":57,"column":27,"nodeType":"228","messageId":"229","endLine":57,"endColumn":45},{"ruleId":"226","severity":1,"message":"284","line":60,"column":7,"nodeType":"228","messageId":"229","endLine":60,"endColumn":20},{"ruleId":"226","severity":1,"message":"285","line":4,"column":10,"nodeType":"228","messageId":"229","endLine":4,"endColumn":15},{"ruleId":"226","severity":1,"message":"286","line":4,"column":17,"nodeType":"228","messageId":"229","endLine":4,"endColumn":21},{"ruleId":"226","severity":1,"message":"287","line":6,"column":10,"nodeType":"228","messageId":"229","endLine":6,"endColumn":20},{"ruleId":"226","severity":1,"message":"288","line":7,"column":10,"nodeType":"228","messageId":"229","endLine":7,"endColumn":21},"no-native-reassign",["289"],"no-negated-in-lhs",["290"],"@typescript-eslint/no-unused-vars","'Play' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Provider' is defined but never used.","'store' is defined but never used.","'getGames' is defined but never used.","'CureDeck' is defined but never used.","'addPlayerToGameState' is defined but never used.","'DealCardsToNewPlayerAction' is defined but never used.","'Gamestate' is defined but never used.","'MapSVG' is assigned a value but never used.","'gameStateReducer' is defined but never used.","'ADD_PLAYER_TO_GAME' is defined but never used.","'addPlayerToGame' is defined but never used.","'Console' is defined but never used.","'useState' is defined but never used.","'getGame' is defined but never used.","'joinRoom' is defined but never used.","'getIcon' is defined but never used.","'SourceCard' is defined but never used.","'SpreadLevel' is defined but never used.","'NewGameMenu' is defined but never used.","'StartGameAction' is defined but never used.","'Player' is defined but never used.","'UpdateGameStateAction' is defined but never used.","'allRooms' is assigned a value but never used.","'ButtonHTMLAttributes' is defined but never used.","'DetailedHTMLProps' is defined but never used.","'updateGameState' is defined but never used.","'option' is assigned a value but never used.","'updateOption' is assigned a value but never used.","'player' is assigned a value but never used.","'state' is assigned a value but never used.","'ViralCard' is defined but never used.","'playViralCard' is defined but never used.","'viralCheck' is defined but never used.","'MisinformationDeck' is defined but never used.","'Card' is defined but never used.","'Source' is defined but never used.","'Misinformation' is defined but never used.","'Connection' is defined but never used.","'chaos' is assigned a value but never used.","'PropTypes' is defined but never used.","'render' is defined but never used.","'shareCardEvent' is defined but never used.","'ShareCardProps' is defined but never used.","'currentState' is assigned a value but never used.","'logOnOff' is defined but never used.","'renderIcon' is assigned a value but never used.","'renderAsLogOn' is assigned a value but never used.","'canDebunkClassName' is assigned a value but never used.","'NewSVG' is assigned a value but never used.","'Modal' is defined but never used.","'ReactDOM' is defined but never used.","'playerCards' is assigned a value but never used.","'setfakeCardsWithId' is assigned a value but never used.","'subtitle' is defined but never used.","'Story' is defined but never used.","'Meta' is defined but never used.","'withDesign' is defined but never used.","'useSelector' is defined but never used.","no-global-assign","no-unsafe-negation"]